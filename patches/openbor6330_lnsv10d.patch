diff -crB engine/build.bat "engine mod/build.bat"
*** engine/build.bat	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/build.bat"	2018-10-15 01:42:14.008968200 +0200
***************
*** 11,33 ****
  
  @setlocal
  @echo off
! set BUILDBATCH=1
  set TOOLS=../tools/bin;../tools/7-Zip;../tools/svn/bin
  set PATH=%TOOLS%
! bash.exe build.sh all
  @endlocal
  
  @rem ----------------------- Batch CMD Line Scripts ------------------------
  
! @setlocal
! @echo off
! @if not exist "%CD%\releases\PSP\OpenBOR\EBOOT.PBP" goto missing
! @if not exist "%CD%\releases\WINDOWS\OpenBOR\OpenBOR.exe" goto missing
  
! set TOOLS=../tools/bin;../tools/7-Zip;../tools/svn/bin
! set PATH=%TOOLS%;%PATH%
! call xbox/make.bat
! bash.exe version.sh 1
  :missing
  @endlocal
  
--- 11,33 ----
  
  @setlocal
  @echo off
! @rem set BUILDBATCH=1
  set TOOLS=../tools/bin;../tools/7-Zip;../tools/svn/bin
  set PATH=%TOOLS%
! bash.exe build.sh 5
  @endlocal
  
  @rem ----------------------- Batch CMD Line Scripts ------------------------
  
! @rem @setlocal
! @rem @echo off
! @rem @if not exist "%CD%\releases\PSP\OpenBOR\EBOOT.PBP" goto missing
! @rem @if not exist "%CD%\releases\WINDOWS\OpenBOR\OpenBOR.exe" goto missing
  
! @rem set TOOLS=../tools/bin;../tools/7-Zip;../tools/svn/bin
! @rem set PATH=%TOOLS%;%PATH%
! @rem call xbox/make.bat
! @rem bash.exe version.sh 1
  :missing
  @endlocal
  
Only in engine mod: compilar.sh
diff -crB engine/environ.sh "engine mod/environ.sh"
*** engine/environ.sh	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/environ.sh"	2019-10-10 00:33:07.343509000 +0200
***************
*** 184,189 ****
--- 184,196 ----
  #                                                                          #
  ############################################################################
  5)
+ 	export WINDEV=../tools/win-sdk/bin
+ 	export SDKPATH=../tools/win-sdk
+ 	export EXTENSION=.exe
+ 	export PATH=$TOOLS:$WINDEV
+ 	;;
+ 
+ 15)
     if test -e "/usr/i586-mingw32msvc"; then
       export WINDEV=/usr/bin
       export SDKPATH=/usr/i586-mingw32msvc
diff -crB engine/Makefile "engine mod/Makefile"
*** engine/Makefile	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/Makefile"	2019-10-10 02:37:30.360699900 +0200
***************
*** 53,59 ****
  BUILD_WEBM      = 1
  BUILDING        = 1
  YASM 	        = yasm$(EXTENSION)
! CC              = $(WINDEV)/$(PREFIX)gcc$(EXTENSION)
  INCLUDES        = $(SDKPATH)/include \
                    $(SDKPATH)/include/SDL2
  LIBRARIES       = $(SDKPATH)/lib
--- 53,59 ----
  BUILD_WEBM      = 1
  BUILDING        = 1
  YASM 	        = yasm$(EXTENSION)
! CC              = gcc$(EXTENSION)
  INCLUDES        = $(SDKPATH)/include \
                    $(SDKPATH)/include/SDL2
  LIBRARIES       = $(SDKPATH)/lib
***************
*** 81,101 ****
  BUILD_WEBM      = 1
  BUILDING        = 1
  YASM 	        = yasm
! CC  	        = $(LNXDEV)/$(PREFIX)gcc
  OBJTYPE         = elf
  INCLUDES        = $(SDKPATH)/include
! ifeq ($(findstring 64, $(GCC_TARGET)), 64)
  TARGET_ARCH     = amd64
  BUILD_AMD64     = 1
  ARCHFLAGS       = -m64
  LIBRARIES       = $(SDKPATH)/lib/$(GCC_TARGET)
  CFLAGS          += -DAMD64
! else
! TARGET_ARCH     = x86
! ARCHFLAGS       = -m32
! LIBRARIES       = $(SDKPATH)/lib32
! BUILD_MMX       = 1
! endif
  ifeq ($(BUILD_LINUX), 0)
  BUILD_DEBUG     = 1
  endif
--- 81,96 ----
  BUILD_WEBM      = 1
  BUILDING        = 1
  YASM 	        = yasm
! CC  	        = gcc
  OBJTYPE         = elf
  INCLUDES        = $(SDKPATH)/include
! 
  TARGET_ARCH     = amd64
  BUILD_AMD64     = 1
  ARCHFLAGS       = -m64
  LIBRARIES       = $(SDKPATH)/lib/$(GCC_TARGET)
  CFLAGS          += -DAMD64
! 
  ifeq ($(BUILD_LINUX), 0)
  BUILD_DEBUG     = 1
  endif
***************
*** 190,199 ****
  ifndef BUILD_DEBUG
  ifndef NO_STRIP
  ifdef BUILD_WIN
! STRIP 	        = $(WINDEV)/$(PREFIX)strip$(EXTENSION) $(TARGET) -o $(TARGET_FINAL)
  endif
  ifdef BUILD_LINUX
! STRIP 	        = $(LNXDEV)/$(PREFIX)strip $(TARGET) -o $(TARGET_FINAL)
  endif
  ifdef BUILD_DARWIN
  STRIP           = $(PREFIX)strip $(TARGET) -o $(TARGET_FINAL)
--- 185,194 ----
  ifndef BUILD_DEBUG
  ifndef NO_STRIP
  ifdef BUILD_WIN
! STRIP 	        = strip$(EXTENSION) $(TARGET) -o $(TARGET_FINAL)
  endif
  ifdef BUILD_LINUX
! STRIP 	        = strip $(TARGET) -o $(TARGET_FINAL)
  endif
  ifdef BUILD_DARWIN
  STRIP           = $(PREFIX)strip $(TARGET) -o $(TARGET_FINAL)
***************
*** 442,449 ****
  #----------------------------------------------------------------------------------------------------
  
  CFLAGS 	       += $(addprefix -I", $(addsuffix ", $(INCS))) $(ARCHFLAGS) -D$(TARGET_PLATFORM)
! CFLAGS 	       += -g -Wall -Werror -fsigned-char -std=gnu99
! 
  
  ifndef BUILD_DARWIN
  ifdef BUILD_LINUX
--- 437,445 ----
  #----------------------------------------------------------------------------------------------------
  
  CFLAGS 	       += $(addprefix -I", $(addsuffix ", $(INCS))) $(ARCHFLAGS) -D$(TARGET_PLATFORM)
! #CFLAGS 	       += -g -Wall -Werror -fsigned-char -std=gnu99
! #-Wno-unused-variable
! CFLAGS 	       += -g -Wall -fsigned-char -std=gnu99 
  
  ifndef BUILD_DARWIN
  ifdef BUILD_LINUX
diff -crB engine/openbor.c "engine mod/openbor.c"
*** engine/openbor.c	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/openbor.c"	2019-10-17 20:52:03.071812200 +0200
***************
*** 34,39 ****
--- 34,41 ----
  //  Global Variables                                                        //
  /////////////////////////////////////////////////////////////////////////////
  
+ int finisheds_games_count = 0;
+ 
  a_playrecstatus *playrecstatus = NULL;
  
  s_set_entry *levelsets = NULL;
***************
*** 204,209 ****
--- 206,213 ----
  float offscreen_noatk_factor = 0.5f;
  float noatk_duration = 0.75f;
  
+ //int default_model_selectcol = 0;
+ 
  char                *custScenes = NULL;
  char                *custBkgrds = NULL;
  char                *custLevels = NULL;
***************
*** 1634,1644 ****
          ScriptVariant_ChangeType(&tempvar, VT_PTR);
          tempvar.ptrVal = (VOID *)ent;
          Script_Set_Local_Variant(cs, "self",        &tempvar);
!         ScriptVariant_ChangeType(&tempvar, VT_INTEGER);
          tempvar.lVal = (LONG)plane;
          Script_Set_Local_Variant(cs, "plane",      &tempvar);
          ScriptVariant_ChangeType(&tempvar, VT_PTR);
!         tempvar.ptrVal = (VOID *)other;
          Script_Set_Local_Variant(cs, "obstacle",    &tempvar);
          Script_Execute(cs);
  
--- 1638,1648 ----
          ScriptVariant_ChangeType(&tempvar, VT_PTR);
          tempvar.ptrVal = (VOID *)ent;
          Script_Set_Local_Variant(cs, "self",        &tempvar);
! 		ScriptVariant_ChangeType(&tempvar, VT_INTEGER);
          tempvar.lVal = (LONG)plane;
          Script_Set_Local_Variant(cs, "plane",      &tempvar);
          ScriptVariant_ChangeType(&tempvar, VT_PTR);
! 		tempvar.ptrVal = (VOID *)other;
          Script_Set_Local_Variant(cs, "obstacle",    &tempvar);
          Script_Execute(cs);
  
***************
*** 2409,2414 ****
--- 2413,2419 ----
      savedata.uselog = 1;
      savedata.debuginfo = 0;
      savedata.fullscreen = 0;
+     savedata.vsync = 1;
      savedata.stretch = 0;
  
      savedata.swfilter = 0;
***************
*** 2622,2627 ****
--- 2627,2634 ----
              {
                  bonus += savelevel[i].times_completed;
              }
+             //printf("Bonus: %d \n",bonus);
+             finisheds_games_count = bonus; //TAG_YO Cargamos el n√∫mero de veces que se ha pasado el juego en la variable global finisheds_games_count
      }
  
      fclose(handle);
***************
*** 4693,4698 ****
--- 4700,4741 ----
      return NULL;
  }
  
+ s_model *nextplayermodelcol(s_model *current)
+ {
+ 	 int i;
+     int curindex = -1;
+     int loops;
+     if(current)
+     {
+         // Find index of current player model
+         for(i = 0; i < models_cached; i++)
+         {
+             if(model_cache[i].model == current)
+             {
+                 curindex = i;
+                 break;
+             }
+         }
+     }
+     // Find next player model (first one after current index)
+     for(i = curindex + 1, loops = 0; loops < models_cached; i++, loops++)
+     {
+         if(i >= models_cached)
+         {
+             i = 0;
+         }
+         if(model_cache[i].model && model_cache[i].model->type == TYPE_PLAYER &&
+                 (allow_secret_chars || !model_cache[i].model->secret) &&
+                 model_cache[i].model->clearcount <= bonus && model_cache[i].selectable && model_cache[i].model->selectcol == current->selectcol )
+         {
+             //printf("next %s\n", model_cache[i].model->name);
+             return model_cache[i].model;
+         }
+     }
+     borShutdown(1, "Fatal: can't find any player models!");
+     return NULL;
+ }
+ 
  s_model *nextplayermodeln(s_model *current, int p)
  {
      int i;
***************
*** 4776,4781 ****
--- 4819,4860 ----
      return NULL;
  }
  
+ s_model *prevplayermodelcol(s_model *current)
+ {
+ 	 int i;
+     int curindex = -1;
+     int loops;
+     if(current)
+     {
+         // Find index of current player model
+         for(i = 0; i < models_cached; i++)
+         {
+             if(model_cache[i].model == current)
+             {
+                 curindex = i;
+                 break;
+             }
+         }
+     }
+     // Find next player model (first one after current index)
+     for(i = curindex - 1, loops = 0; loops < models_cached; i--, loops++)
+     {
+         if(i < 0)
+         {
+             i = models_cached - 1;
+         }
+         if(model_cache[i].model && model_cache[i].model->type == TYPE_PLAYER &&
+                 (allow_secret_chars || !model_cache[i].model->secret) &&
+                 model_cache[i].model->clearcount <= bonus && model_cache[i].selectable && model_cache[i].model->selectcol == current->selectcol)
+         {
+             //printf("prev %s\n", model_cache[i].model->name);
+             return model_cache[i].model;
+         }
+     }
+     borShutdown(1, "Fatal: can't find any player models!");
+     return NULL;
+ }
+ 
  s_model *prevplayermodeln(s_model *current, int p)
  {
      int i;
***************
*** 8303,8308 ****
--- 8382,8388 ----
      newchar->edgerange.z        = 0;
      newchar->boomerang_prop.acceleration     = 0;
      newchar->boomerang_prop.hdistance        = 0;
+ 	newchar->selectcol			= 0;
  
      // Default Attack1 in chain must be referenced if not used.
      for(i = 0; i < MAX_ATCHAIN; i++)
***************
*** 9417,9422 ****
--- 9497,9505 ----
              case CMD_MODEL_CREDIT:
                  newchar->credit = GET_INT_ARG(1);
                  break;
+ 			case CMD_MODEL_SELECTCOL:
+                 newchar->selectcol = GET_INT_ARG(1);                    // 30-12-2004 and store for character
+                 break;
              case CMD_MODEL_NOPAIN:
                  newchar->nopain = GET_INT_ARG(1);
                  break;
***************
*** 19231,19236 ****
--- 19314,19320 ----
              new_attack_id = 1;
          }
          e->attack_id_outgoing = current_attack_id = new_attack_id;
+ 	//printf("Attack_id %d \n", new_attack_id); //TAG_YO
      }
  
  
***************
*** 19319,19326 ****
          }
  
          // Attack IDs must be different.
!         if(target->attack_id_incoming == current_attack_id && !attack->ignore_attack_id)
          {
              continue;
          }
  
--- 19403,19411 ----
          }
  
          // Attack IDs must be different.
!         if((target->attack_id_incoming == current_attack_id || target->attack_id_incoming2 == current_attack_id || target->attack_id_incoming3 == current_attack_id || target->attack_id_incoming4 == current_attack_id ) && !attack->ignore_attack_id)
          {
+ 	    //printf("ACA SE INGORA ATAQUE POR TENER EL ID MEMORIZADO: %d - Ignore %d \n",current_attack_id,attack->ignore_attack_id);
              continue;
          }
  
***************
*** 19436,19442 ****
                        inair(self) ||
                        self->frozen ||
                        (self->direction == e->direction && self->modeldata.blockback < 1) ||                       // Can't block an attack that is from behind unless blockback flag is enabled
!                       (!self->idling && self->attacking != ATTACKING_INACTIVE)) &&                                                 // Can't block if busy, attack <0 means the character is preparing to attack, he can block during this time
                      attack->no_block <= self->defense[attack->attack_type].blockpower &&       // If unblockable, will automatically hit
                      (rand32()&self->modeldata.blockodds) == 1 && // Randomly blocks depending on blockodds (1 : blockodds ratio)
                      (!self->modeldata.thold || (self->modeldata.thold > 0 && self->modeldata.thold > force)) &&
--- 19521,19527 ----
                        inair(self) ||
                        self->frozen ||
                        (self->direction == e->direction && self->modeldata.blockback < 1) ||                       // Can't block an attack that is from behind unless blockback flag is enabled
!                       (!self->idling && self->attacking >= 0)) &&                                                 // Can't block if busy, attack <0 means the character is preparing to attack, he can block during this time
                      attack->no_block <= self->defense[attack->attack_type].blockpower &&       // If unblockable, will automatically hit
                      (rand32()&self->modeldata.blockodds) == 1 && // Randomly blocks depending on blockodds (1 : blockodds ratio)
                      (!self->modeldata.thold || (self->modeldata.thold > 0 && self->modeldata.thold > force)) &&
***************
*** 19590,19595 ****
--- 19675,19683 ----
                              self->modeldata.animation[current_follow_id]->attackone = self->animation->attackone;
                          }
                          ent_set_anim(self, current_follow_id, 0);
+ 			self->attack_id_incoming4 = self->attack_id_incoming3;
+ 			self->attack_id_incoming3 = self->attack_id_incoming2;
+ 			self->attack_id_incoming2 = self->attack_id_incoming;
                          self->attack_id_incoming = current_attack_id;
                      }
  
***************
*** 19712,19718 ****
                  }
                  //followed = 1; // quit loop, animation is changed
              }//end of if #055
! 
              self->attack_id_incoming = current_attack_id;
              if(self == def)
              {
--- 19800,19809 ----
                  }
                  //followed = 1; // quit loop, animation is changed
              }//end of if #055
!             
!             self->attack_id_incoming4 = self->attack_id_incoming3;
! 	    self->attack_id_incoming3 = self->attack_id_incoming2;
! 	    self->attack_id_incoming2 = self->attack_id_incoming;
              self->attack_id_incoming = current_attack_id;
              if(self == def)
              {
***************
*** 22253,22259 ****
      {
          type = 0;
      }
! 
      if ( iRiseattack->inbackpain ) riseattack = animbackriseattacks[type];
      else riseattack = animriseattacks[type];
  
--- 22344,22356 ----
      {
          type = 0;
      }
!     if( (!validanim(iRiseattack, animriseattacks[type]) ||
!         (iRiseattack->inbackpain && !validanim(iRiseattack, animbackriseattacks[type]) && !validanim(iRiseattack, animriseattacks[type]))) &&
!        iRiseattack->modeldata.riseattacktype == 3 )
!     {
!         return 0;
!     }
!     
      if ( iRiseattack->inbackpain ) riseattack = animbackriseattacks[type];
      else riseattack = animriseattacks[type];
  
***************
*** 22291,22296 ****
--- 22388,22394 ----
      iRiseattack->rising = 0;
      iRiseattack->riseattacking = 1;
      iRiseattack->drop = 0;
+     iRiseattack->projectile = 0; //TAG_YO, agregado para evitar el bug que cuando el enemigo haga un riseattack siga siendo considerado un proyectil.
      iRiseattack->nograb = iRiseattack->nograb_default; //iRiseattack->nograb = 0;
      iRiseattack->modeldata.jugglepoints.current = iRiseattack->modeldata.jugglepoints.max; //reset jugglepoints
      return 1;
***************
*** 24505,24511 ****
  
      if(target)
      {
!         if(!target->animation->vulnerable[target->animpos] && (target->drop || target->attacking != ATTACKING_INACTIVE))
          {
              return 0;
          }
--- 24603,24609 ----
  
      if(target)
      {
!         if(!target->animation->vulnerable[target->animpos] && (target->drop || target->attacking))
          {
              return 0;
          }
***************
*** 24533,24539 ****
      }
  
      // no passive block, so block by himself :)
!     if(target && target->attacking != ATTACKING_INACTIVE)
      {
          self->takeaction = common_block;
          set_blocking(self);
--- 24631,24637 ----
      }
  
      // no passive block, so block by himself :)
!     if(target && target->attacking)
      {
          self->takeaction = common_block;
          set_blocking(self);
***************
*** 27332,27338 ****
      #define RICHOCHET_VELOCITY_X_FACTOR 0.25    // This value is multiplied by current velocity to get an X velocity value to bounce off wall..
      #define RICHOCHET_VELOCITY_Y        2.5     // Base Y velocity applied when projectile bounces off wall.
      #define RICHOCHET_VELOCITY_Y_RAND   1       // Random seed for Y variance added to base Y velocity when bouncing off wall.
! 
      float richochet_velocity_x;
      s_collision_attack attack;
  
--- 27430,27437 ----
      #define RICHOCHET_VELOCITY_X_FACTOR 0.25    // This value is multiplied by current velocity to get an X velocity value to bounce off wall..
      #define RICHOCHET_VELOCITY_Y        2.5     // Base Y velocity applied when projectile bounces off wall.
      #define RICHOCHET_VELOCITY_Y_RAND   1       // Random seed for Y variance added to base Y velocity when bouncing off wall.
!     //He borrado todo el sistema de rebote para evitar el bug que destruye los misiles cuando se genera una caja de colisi√≥n dentro de una plataforma.
! /*
      float richochet_velocity_x;
      s_collision_attack attack;
  
***************
*** 27372,27378 ****
              return 1;
          }
      }
! 
      // Did not ricochet, so return false.
      return 0;
  
--- 27471,27477 ----
              return 1;
          }
      }
! */
      // Did not ricochet, so return false.
      return 0;
  
***************
*** 27857,27863 ****
              self->animating = 0;
          }
      }
! 
      return 1;
  }
  
--- 27956,27962 ----
              self->animating = 0;
          }
      }
! 	
      return 1;
  }
  
***************
*** 34217,34223 ****
          control_setkey(playercontrolpointers[p], FLAG_JUMP,       savedata.keys[p][SDID_JUMP]);
          control_setkey(playercontrolpointers[p], FLAG_SPECIAL,    savedata.keys[p][SDID_SPECIAL]);
          control_setkey(playercontrolpointers[p], FLAG_START,      savedata.keys[p][SDID_START]);
!         control_setkey(playercontrolpointers[p], FLAG_SCREENSHOT, savedata.keys[p][SDID_SCREENSHOT]);
      }
  }
  
--- 34316,34322 ----
          control_setkey(playercontrolpointers[p], FLAG_JUMP,       savedata.keys[p][SDID_JUMP]);
          control_setkey(playercontrolpointers[p], FLAG_SPECIAL,    savedata.keys[p][SDID_SPECIAL]);
          control_setkey(playercontrolpointers[p], FLAG_START,      savedata.keys[p][SDID_START]);
!         if (p==0){ control_setkey(playercontrolpointers[p], FLAG_SCREENSHOT, savedata.keys[p][SDID_SCREENSHOT]);}
      }
  }
  
***************
*** 35841,35858 ****
                      {
                          sound_play_sample(SAMPLE_BEEP, 0, savedata.effectvol, savedata.effectvol, 100);
                      }
!                     ent_set_model(example[i], ((player[i].newkeys & FLAG_MOVELEFT) ? prevplayermodeln : nextplayermodeln)(example[i]->model, i)->name, 0);
                      strcpy(player[i].name, example[i]->model->name);
                      player[i].colourmap = (colourselect && (set->nosame & 2)) ? nextcolourmapn(example[i]->model, -1, i) : 0;
                      ent_set_colourmap(example[i], player[i].colourmap);
                  }
                  // oooh pretty colors! - selectable color scheme for player characters
!                 else if(player[i].newkeys & (FLAG_MOVEUP | FLAG_MOVEDOWN) && colourselect && example[i])
                  {
!                     player[i].colourmap = ((player[i].newkeys & FLAG_MOVEUP) ? nextcolourmapn : prevcolourmapn)(example[i]->model, player[i].colourmap, i);
                      ent_set_colourmap(example[i], player[i].colourmap);
                  }
!                 else if((player[i].newkeys & FLAG_ANYBUTTON) && example[i])
                  {
                      if(SAMPLE_BEEP2 >= 0)
                      {
--- 35940,35969 ----
                      {
                          sound_play_sample(SAMPLE_BEEP, 0, savedata.effectvol, savedata.effectvol, 100);
                      }
!                     ent_set_model(example[i], ((player[i].newkeys & FLAG_MOVELEFT) ? prevplayermodeln : nextplayermodeln)(example[i]->model,i)->name,0);
                      strcpy(player[i].name, example[i]->model->name);
                      player[i].colourmap = (colourselect && (set->nosame & 2)) ? nextcolourmapn(example[i]->model, -1, i) : 0;
                      ent_set_colourmap(example[i], player[i].colourmap);
                  }
+ 				else if(player[i].newkeys & (FLAG_MOVEUP | FLAG_MOVEDOWN) && example[i])
+ 				{
+ 					if(SAMPLE_BEEP >= 0)
+                     {
+                         sound_play_sample(SAMPLE_BEEP, 0, savedata.effectvol, savedata.effectvol, 100);
+                     }
+                     ent_set_model(example[i], ((player[i].newkeys & FLAG_MOVEUP) ? prevplayermodelcol : nextplayermodelcol)(example[i]->model)->name, 0);
+ 
+                     strcpy(player[i].name, example[i]->model->name);
+                     player[i].colourmap = (colourselect && (set->nosame & 2)) ? nextcolourmapn(example[i]->model, -1, i) : 0;
+                     ent_set_colourmap(example[i], player[i].colourmap);
+ 				}
                  // oooh pretty colors! - selectable color scheme for player characters
!                 else if(player[i].newkeys & (FLAG_JUMP | FLAG_SPECIAL) && colourselect && example[i])
                  {
!                     player[i].colourmap = ((player[i].newkeys & FLAG_JUMP) ? nextcolourmapn : prevcolourmapn)(example[i]->model, player[i].colourmap, i);
                      ent_set_colourmap(example[i], player[i].colourmap);
                  }
!                 else if((player[i].newkeys & FLAG_ATTACK) && example[i])
                  {
                      if(SAMPLE_BEEP2 >= 0)
                      {
***************
*** 36142,36148 ****
  {
      int quit = 0;
      int selector = 0;
!     int maxdisplay = 5;
      int i, j, t;
      //float slider = 0;
      int barx, bary, barw, barh;
--- 36253,36259 ----
  {
      int quit = 0;
      int selector = 0;
!     int maxdisplay = 9; //TAG_YO cambiado el m√°ximo de opciones que se puedes mostrar de forma simultanea en el men√∫ de selecci√≥n de modos
      int i, j, t;
      //float slider = 0;
      int barx, bary, barw, barh;
***************
*** 36162,36168 ****
      {
          if(num_difficulties > 1)
          {
!             _menutextm(2, -2, 0, Tr("Game Mode"));
              t = (selector - (selector == num_difficulties)) / maxdisplay * maxdisplay;
              for(j = 0, i = t; i < maxdisplay + t && i < num_difficulties; j++, i++)
              {
--- 36273,36279 ----
      {
          if(num_difficulties > 1)
          {
!             _menutextm(2, -5, 0, Tr("Game Mode"));
              t = (selector - (selector == num_difficulties)) / maxdisplay * maxdisplay;
              for(j = 0, i = t; i < maxdisplay + t && i < num_difficulties; j++, i++)
              {
***************
*** 36170,36186 ****
                  {
                      if(bonus >= levelsets[i].ifcomplete)
                      {
!                         _menutextm((selector == i), j, 0, "%s", levelsets[i].name);
                      }
                      else
                      {
                          if(levelsets[i].ifcomplete > 1)
                          {
!                             _menutextm((selector == i), j, 0, Tr("%s - Finish Game %i Times To UnLock"), levelsets[i].name, levelsets[i].ifcomplete);
                          }
                          else
                          {
!                             _menutextm((selector == i), j, 0, Tr("%s - Finish Game To UnLock"), levelsets[i].name);
                          }
                      }
                  }
--- 36281,36297 ----
                  {
                      if(bonus >= levelsets[i].ifcomplete)
                      {
!                         _menutextm((selector == i), j-2, 0, "%s", levelsets[i].name);
                      }
                      else
                      {
                          if(levelsets[i].ifcomplete > 1)
                          {
!                             _menutextm((selector == i), j-2, 0, Tr("%s - Finish Game %i Times To UnLock"), levelsets[i].name, levelsets[i].ifcomplete);
                          }
                          else
                          {
!                             _menutextm((selector == i), j-2, 0, Tr("%s - Finish Game To UnLock"), levelsets[i].name);
                          }
                      }
                  }
***************
*** 36189,36195 ****
                      break;
                  }
              }
!             _menutextm((selector == i), 6, 0, Tr("Back"));
  
              //draw the scroll bar
              if(num_difficulties > maxdisplay)
--- 36300,36306 ----
                      break;
                  }
              }
!             _menutextm((selector == i), 8, 0, Tr("Back"));
  
              //draw the scroll bar
              if(num_difficulties > maxdisplay)
***************
*** 36442,36448 ****
  
      while(!quit)
      {
!         _menutextm(2, 1, 0, Tr("Choose Mode"));
          _menutextm((selector == 0), 3, 0, Tr("New Game"));
          _menutextm((selector == 1), 4, 0, Tr("Load Game"));
          _menutextm((selector == 2), 6, 0, Tr("Back"));
--- 36553,36559 ----
  
      while(!quit)
      {
!         _menutextm(2, -5, 0, Tr("Choose Mode"));
          _menutextm((selector == 0), 3, 0, Tr("New Game"));
          _menutextm((selector == 1), 4, 0, Tr("Load Game"));
          _menutextm((selector == 2), 6, 0, Tr("Back"));
***************
*** 36934,36940 ****
      while(!quit)
      {
          voffset = -6;
!         _menutextm(2, -8, 0, Tr("Player %i"), player + 1);
          for(i = 0; i < btnnum; i++)
          {
              if(!disabledkey[i])
--- 37045,37051 ----
      while(!quit)
      {
          voffset = -6;
!         _menutextm(2, -5, 0, Tr("Player %i"), player + 1);
          for(i = 0; i < btnnum; i++)
          {
              if(!disabledkey[i])
***************
*** 37012,37017 ****
--- 37123,37129 ----
              if(selector < 0)
              {
                  selector = OPTIONS_NUM;
+ 				//clear_lastjoy();
              }
              if(selector > OPTIONS_NUM)
              {
***************
*** 37096,37102 ****
  
      while(!quit)
      {
!         _menutextm(2, x_pos-1, 0, Tr("Control Options"));
  
          #if PSP
          if(savedata.usejoy)
--- 37208,37214 ----
  
      while(!quit)
      {
!         _menutextm(2, -5, 0, Tr("Control Options"));
  
          #if PSP
          if(savedata.usejoy)
***************
*** 37537,37543 ****
      while(!quit)
      {
          // Display menu title.
!         _menutextm(2, MENU_POS_Y, 0, Tr("Debug Settings"));
  
          // Menu items.
          // Y position is controlled by a incremented integer.
--- 37649,37655 ----
      while(!quit)
      {
          // Display menu title.
!         _menutextm(2, -5, 0, Tr("Debug Settings"));
  
          // Menu items.
          // Y position is controlled by a incremented integer.
***************
*** 37709,37715 ****
  
      while(!quit)
      {
!         _menutextm(2, SYS_OPT_Y_POS-2, 0, Tr("System Options"));
  
          _menutext(0, col1, SYS_OPT_Y_POS, Tr("Total RAM:"));
          _menutext(0, col2, SYS_OPT_Y_POS, Tr("%s KB"), commaprint(getSystemRam(KBYTES)));
--- 37821,37827 ----
  
      while(!quit)
      {
!         _menutextm(2, -5, 0, Tr("System Options"));
  
          _menutext(0, col1, SYS_OPT_Y_POS, Tr("Total RAM:"));
          _menutext(0, col2, SYS_OPT_Y_POS, Tr("%s KB"), commaprint(getSystemRam(KBYTES)));
***************
*** 37983,38005 ****
  
          _menutext((selector == 7), col1, 4, Tr("Software Filter:"));
          _menutext((selector == 7), col2, 4, ((savedata.hwscale >= 2.0 || savedata.fullscreen) ? Tr(GfxBlitterNames[savedata.swfilter]) : Tr("Disabled")));
  
          if(savedata.fullscreen)
          {
!             _menutext((selector == 8), col1, 5, Tr("Fullscreen Type:"));
!             _menutext((selector == 8), col2, 5, (savedata.stretch ? Tr("Stretch to Screen") : Tr("Preserve Aspect Ratio")));
          }
!         else if(selector == 8)
          {
!             selector = (bothnewkeys & FLAG_MOVEUP) ? 7 : 9;
          }
  
!         _menutextm((selector == 9), 7, 0, Tr("Back"));
          if(selector < 0)
          {
!             selector = 9;
          }
!         if(selector > 9)
          {
              selector = 0;
          }
--- 38095,38120 ----
  
          _menutext((selector == 7), col1, 4, Tr("Software Filter:"));
          _menutext((selector == 7), col2, 4, ((savedata.hwscale >= 2.0 || savedata.fullscreen) ? Tr(GfxBlitterNames[savedata.swfilter]) : Tr("Disabled")));
+         
+         _menutext((selector == 8), col1, 5, Tr("VSync:"));
+         _menutext((selector == 8), col2, 5, savedata.vsync ? "Enabled" : "Disabled");
  
          if(savedata.fullscreen)
          {
!             _menutext((selector == 9), col1, 6, Tr("Fullscreen Type:"));
!             _menutext((selector == 9), col2, 6, (savedata.stretch ? Tr("Stretch to Screen") : Tr("Preserve Aspect Ratio")));
          }
!         else if(selector == 9)
          {
!             selector = (bothnewkeys & FLAG_MOVEUP) ? 8 : 10;
          }
  
!         _menutextm((selector == 10), 8, 0, Tr("Back"));
          if(selector < 0)
          {
!             selector = 10;
          }
!         if(selector > 10)
          {
              selector = 0;
          }
***************
*** 38279,38284 ****
--- 38394,38403 ----
  				video_set_mode(videomodes);
                  break;
              case 8:
+                 savedata.vsync = !savedata.vsync;
+                 video_set_mode(videomodes);
+                 break;
+             case 9:
                  video_stretch((savedata.stretch ^= 1));
                  break;
  #endif
***************
*** 38333,38339 ****
  
      while(!quit)
      {
!         if (!cheats || forcecheatsoff) _menutextm(2, y_offset-1, 0, Tr("Options")); else _menutextm(2, y_offset-1, 0, Tr("Cheat Options"));
  
          _menutextm((selector == VIDEO_OPTION), y_offset+VIDEO_OPTION, 0, Tr("Video Options..."));
          _menutextm((selector == SOUND_OPTION), y_offset+SOUND_OPTION, 0, Tr("Sound Options..."));
--- 38452,38458 ----
  
      while(!quit)
      {
!         if (!cheats || forcecheatsoff) _menutextm(2, -5, 0, Tr("Options")); else _menutextm(2, -5, 0, Tr("Cheat Options"));
  
          _menutextm((selector == VIDEO_OPTION), y_offset+VIDEO_OPTION, 0, Tr("Video Options..."));
          _menutextm((selector == SOUND_OPTION), y_offset+SOUND_OPTION, 0, Tr("Sound Options..."));
***************
*** 38548,38554 ****
      int i;
      int argl;
  
!     printf("OpenBoR %s, Compile Date: " __DATE__ "\n\n", VERSION);
  
      if(argc > 1)
      {
--- 38667,38673 ----
      int i;
      int argl;
  
!     printf("OpenBoR %s Compile Date: " __DATE__ "\n\n", VERSION);
  
      if(argc > 1)
      {
***************
*** 38712,38717 ****
--- 38831,38837 ----
                      for(i = 0; i < MAX_PLAYERS; i++)
                      {
                          players[i] = player[i].newkeys & (FLAG_ANYBUTTON);
+ 			//printf("Valor i=%d, newkeys=%d\n",i,player[i].newkeys); //TAG_YO
                      }
                      relback = choose_mode(players);
                      if(relback)
diff -crB engine/openbor.h "engine mod/openbor.h"
*** engine/openbor.h	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/openbor.h"	2019-10-17 18:02:08.083079700 +0200
***************
*** 1,159 ****
! /*
!  * OpenBOR - http://www.chronocrash.com
!  * -
!  ----------------------------------------------------------------------
!  * All rights reserved, see LICENSE in OpenBOR root for details.
!  *
!  * Copyright (c) 2004 - 2014 OpenBOR Team
!  */
! 
! /////////////////////////////////////////////////////////////////////////////
! //	Beats of Rage                                                          //
! //	Side-scrolling beat-'em-up                                             //
! /////////////////////////////////////////////////////////////////////////////
! 
! #ifndef OPENBOR_H
! #define OPENBOR_H
! 
! 
! /////////////////////////////////////////////////////////////////////////////
! 
! // INCS in makefile
! #include	"types.h"
! #include	"video.h"
! #include	"vga.h"
! #include	"screen.h"
! #include	"transform.h"
! #include	"loadimg.h"
! #include	"bitmap.h"
! #include	"sprite.h"
! #include	"spriteq.h"
! #include	"font.h"
! #include	"timer.h"
! #include	"rand32.h"
! #include	"sblaster.h"
! #include	"soundmix.h"
! #include	"control.h"
! #include	"draw.h"
! #include	"packfile.h"
! #include	"palette.h"
! #include	"anigif.h"
! #include    "config.h"
! #include    "globals.h"
! #include    "ram.h"
! #include    "version.h"
! #include    "savedata.h"
! 
! #ifdef SDL
! #include    "gfx.h"
! #endif
! 
! #ifdef WEBM
! #include    "yuv.h"
! #include    "vidplay.h"
! #endif
! 
! /////////////////////////////////////////////////////////////////////////////
! 
! #define		DEFAULT_SHUTDOWN_MESSAGE \
! 			"OpenBOR " VERSION ", Compile Date: " __DATE__ "\n" \
! 			"Presented by the OpenBOR Team.\n" \
! 			"www.chronocrash.com\n"\
! 			"OpenBOR is the open source continuation of Beats of Rage by Senile Team.\n" \
! 			"\n" \
! 			"Special thanks to SEGA and SNK.\n\n"
! 
! #define		COMPATIBLEVERSION	0x00033748
! #define		CV_SAVED_GAME		0x00033747
! #define		CV_HIGH_SCORE		0x00033747
! #define     GAME_SPEED          200
! #define		THINK_SPEED			2
! #define		COUNTER_SPEED		(GAME_SPEED*2)
! #define		MAX_NAME_LEN		50 //47
! #define		MAX_ENTS			150
! #define		MAX_SPECIALS		8					// Added for customizable freespecials
! #define     MAX_SPECIAL_INPUTS  27                  // max freespecial input steps, MAX_SPECIAL_INPUTS-1 is reserved, MAX_SPECIAL_INPUTS-2 is animation index, MAX_SPECIAL_INPUTS-3 is reserved. OX -4 , -5 , -6 , -7 , -8 , -9 , -10 also for cancels
! #define		MAX_ATCHAIN			12					// max attack chain length
! #define     MAX_IDLES           1                   // Idle animations.
! #define     MAX_WALKS           1                   // Walk animations.
! #define     MAX_BACKWALKS       1                   // Backwalk animations.
! #define     MAX_UPS             1                   // Walk up animations.
! #define     MAX_DOWNS           1                   // Walk down animations.
! #define		MAX_ATTACKS			4					// Total number of attacks players have
! #define     MAX_FOLLOWS         4					// For followup animations
! #define     MAX_COLLISIONS      2                   // Collision boxes.
! #define		MAX_ARG_LEN			512
! #define		MAX_ALLOWSELECT_LEN	1024
! #define		MAX_SELECT_LOADS   	512
! #define		MAX_PAL_SIZE		1024
! #define		MAX_CACHED_BACKGROUNDS 9
! #define     MAX_DOTS            10                  // Max active dot effects.
! #define     MAX_ARG_COUNT       64
! 
! /*
! Note: the min Z coordinate of the player is important
! for several other drawing operations.
! movement restirctions are here!
! */
! 
! #define		FRONTPANEL_Z		(PLAYER_MAX_Z+50)
! #define     HUD_Z               (FRONTPANEL_Z+10000)
! #define		HOLE_Z				(PLAYER_MIN_Z-46)
! #define		NEONPANEL_Z			(PLAYER_MIN_Z-47)
! #define		SHADOW_Z			(PLAYER_MIN_Z-48)
! #define		SCREENPANEL_Z		(PLAYER_MIN_Z-49)
! #define		PANEL_Z				(PLAYER_MIN_Z-50)
! #define		MIRROR_Z			(PLAYER_MIN_Z-5)
! #define		PIT_DEPTH			-250
! #define		P2_STATS_DIST		180
! #define		CONTACT_DIST_H		30					// Distance to make contact
! #define		CONTACT_DIST_V		12
! #define		GRAB_DIST			36					// Grabbing ents will be placed this far apart.
! #define		GRAB_STALL			(GAME_SPEED * 8 / 10)
! #define		T_WALKOFF 			2.0
  #define		T_MIN_BASEMAP 		-1000
! #define     T_MAX_CHECK_ALTITUDE 9999999
! #define		DEFAULT_ATK_DROPV_Y 3.0
! #define		DEFAULT_ATK_DROPV_X 1.2
! #define		DEFAULT_ATK_DROPV_Z 0
! 
! // PLAY/REC INPUT vars
! typedef struct InputKeys
! {
!     u64 keys[MAX_PLAYERS];
!     u64 newkeys[MAX_PLAYERS];
!     u64 releasekeys[MAX_PLAYERS];
!     u64 playkeys[MAX_PLAYERS];
!     u32 time;
!     u32 interval;
!     u32 synctime;
! } RecKeys;
! 
! typedef enum
! {
!     A_REC_STOP,
!     A_REC_REC,
!     A_REC_PLAY,
!     A_REC_FREE,
! } a_recstatus;
! 
! typedef struct PlayRecStatus {
!   char filename[MAX_ARG_LEN];
!   char path[MAX_ARG_LEN];
!   int status; // 0 = stop / 1 = rec / 2 = play
!   int begin;
!   u32 starttime;
!   u32 endtime;
!   u32 synctime; // used to sync rec time with game time
!   u32 totsynctime;
!   u32 cseed;
!   unsigned long seed;
!   unsigned ticks;
!   FILE *handle;
!   RecKeys *buffer;
! } a_playrecstatus;
! 
! extern a_playrecstatus *playrecstatus;
  
  // Caskey, Damon V.
  // 2018-04-23
--- 1,159 ----
! /*
!  * OpenBOR - http://www.chronocrash.com
!  * -
!  ----------------------------------------------------------------------
!  * All rights reserved, see LICENSE in OpenBOR root for details.
!  *
!  * Copyright (c) 2004 - 2014 OpenBOR Team
!  */
! 
! /////////////////////////////////////////////////////////////////////////////
! //	Beats of Rage                                                          //
! //	Side-scrolling beat-'em-up                                             //
! /////////////////////////////////////////////////////////////////////////////
! 
! #ifndef OPENBOR_H
! #define OPENBOR_H
! 
! 
! /////////////////////////////////////////////////////////////////////////////
! 
! // INCS in makefile
! #include	"types.h"
! #include	"video.h"
! #include	"vga.h"
! #include	"screen.h"
! #include	"transform.h"
! #include	"loadimg.h"
! #include	"bitmap.h"
! #include	"sprite.h"
! #include	"spriteq.h"
! #include	"font.h"
! #include	"timer.h"
! #include	"rand32.h"
! #include	"sblaster.h"
! #include	"soundmix.h"
! #include	"control.h"
! #include	"draw.h"
! #include	"packfile.h"
! #include	"palette.h"
! #include	"anigif.h"
! #include    "config.h"
! #include    "globals.h"
! #include    "ram.h"
! #include    "version.h"
! #include    "savedata.h"
! 
! #ifdef SDL
! #include    "gfx.h"
! #endif
! 
! #ifdef WEBM
! #include    "yuv.h"
! #include    "vidplay.h"
! #endif
! 
! /////////////////////////////////////////////////////////////////////////////
! 
! #define		DEFAULT_SHUTDOWN_MESSAGE \
! 			"OpenBOR " VERSION ", Compile Date: " __DATE__ "\n" \
! 			"Presented by the OpenBOR Team.\n" \
! 			"www.chronocrash.com\n"\
! 			"OpenBOR is the open source continuation of Beats of Rage by Senile Team.\n" \
! 			"\n" \
! 			"Special thanks to SEGA and SNK.\n\n"
! 
! #define		COMPATIBLEVERSION	0x00033748
! #define		CV_SAVED_GAME		0x00033747
! #define		CV_HIGH_SCORE		0x00033747
! #define     GAME_SPEED          200
! #define		THINK_SPEED			2
! #define		COUNTER_SPEED		(GAME_SPEED*2)
! #define		MAX_NAME_LEN		50 //47
! #define		MAX_ENTS			150
! #define		MAX_SPECIALS		8					// Added for customizable freespecials
! #define     MAX_SPECIAL_INPUTS  27                  // max freespecial input steps, MAX_SPECIAL_INPUTS-1 is reserved, MAX_SPECIAL_INPUTS-2 is animation index, MAX_SPECIAL_INPUTS-3 is reserved. OX -4 , -5 , -6 , -7 , -8 , -9 , -10 also for cancels
! #define		MAX_ATCHAIN			12					// max attack chain length
! #define     MAX_IDLES           1                   // Idle animations.
! #define     MAX_WALKS           1                   // Walk animations.
! #define     MAX_BACKWALKS       1                   // Backwalk animations.
! #define     MAX_UPS             1                   // Walk up animations.
! #define     MAX_DOWNS           1                   // Walk down animations.
! #define		MAX_ATTACKS			4					// Total number of attacks players have
! #define     MAX_FOLLOWS         4					// For followup animations
! #define     MAX_COLLISIONS      2                   // Collision boxes.
! #define		MAX_ARG_LEN			1024			//MIO cambio del valor original 512, para aumentar el tama√±o m√°ximo del buffer
! #define		MAX_ALLOWSELECT_LEN	1024               
! #define		MAX_SELECT_LOADS   	512 
! #define		MAX_PAL_SIZE		1024
! #define		MAX_CACHED_BACKGROUNDS 9
! #define     MAX_DOTS            10                  // Max active dot effects.
! #define     MAX_ARG_COUNT       128             //MIO cambio del valor original 64, para aumentar el tama√±o m√°ximo de personajes
! 
! /*
! Note: the min Z coordinate of the player is important
! for several other drawing operations.
! movement restirctions are here!
! */
! 
! #define		FRONTPANEL_Z		(PLAYER_MAX_Z+50)
! #define     HUD_Z               (FRONTPANEL_Z+10000)
! #define		HOLE_Z				(PLAYER_MIN_Z-46)
! #define		NEONPANEL_Z			(PLAYER_MIN_Z-47)
! #define		SHADOW_Z			(PLAYER_MIN_Z-48)
! #define		SCREENPANEL_Z		(PLAYER_MIN_Z-49)
! #define		PANEL_Z				(PLAYER_MIN_Z-50)
! #define		MIRROR_Z			(PLAYER_MIN_Z-5)
! #define		PIT_DEPTH			-250
! #define		P2_STATS_DIST		180
! #define		CONTACT_DIST_H		30					// Distance to make contact
! #define		CONTACT_DIST_V		12
! #define		GRAB_DIST			36					// Grabbing ents will be placed this far apart.
! #define		GRAB_STALL			(GAME_SPEED * 8 / 10)
! #define		T_WALKOFF 			2.0
  #define		T_MIN_BASEMAP 		-1000
! #define     T_MAX_CHECK_ALTITUDE 9999999
! #define		DEFAULT_ATK_DROPV_Y 3.0
! #define		DEFAULT_ATK_DROPV_X 1.2
! #define		DEFAULT_ATK_DROPV_Z 0
! 
! // PLAY/REC INPUT vars
! typedef struct InputKeys
! {
!     u64 keys[MAX_PLAYERS];
!     u64 newkeys[MAX_PLAYERS];
!     u64 releasekeys[MAX_PLAYERS];
!     u64 playkeys[MAX_PLAYERS];
!     u32 time;
!     u32 interval;
!     u32 synctime;
! } RecKeys;
! 
! typedef enum
! {
!     A_REC_STOP,
!     A_REC_REC,
!     A_REC_PLAY,
!     A_REC_FREE,
! } a_recstatus;
! 
! typedef struct PlayRecStatus {
!   char filename[MAX_ARG_LEN];
!   char path[MAX_ARG_LEN];
!   int status; // 0 = stop / 1 = rec / 2 = play
!   int begin;
!   u32 starttime;
!   u32 endtime;
!   u32 synctime; // used to sync rec time with game time
!   u32 totsynctime;
!   u32 cseed;
!   unsigned long seed;
!   unsigned ticks;
!   FILE *handle;
!   RecKeys *buffer;
! } a_playrecstatus;
! 
! extern a_playrecstatus *playrecstatus;
  
  // Caskey, Damon V.
  // 2018-04-23
***************
*** 236,258 ****
      PLATFORM_DEPTH,
      PLATFORM_HEIGHT
  } e_platform_props;
! 
! typedef enum
! {
!     PORTING_ANDROID,
!     PORTING_DARWIN,
!     PORTING_DREAMCAST,
!     PORTING_GPX2,
!     PORTING_LINUX,
!     PORTING_OPENDINGUX,
!     PORTING_PSP,
!     PORTING_UNKNOWN,
!     PORTING_WII,
!     PORTING_WINDOWS,
!     PORTING_WIZ,
      PORTING_XBOX,
!     PORTING_VITA
! } e_porting;
  
  typedef enum
  {
--- 236,258 ----
      PLATFORM_DEPTH,
      PLATFORM_HEIGHT
  } e_platform_props;
! 
! typedef enum
! {
!     PORTING_ANDROID,
!     PORTING_DARWIN,
!     PORTING_DREAMCAST,
!     PORTING_GPX2,
!     PORTING_LINUX,
!     PORTING_OPENDINGUX,
!     PORTING_PSP,
!     PORTING_UNKNOWN,
!     PORTING_WII,
!     PORTING_WINDOWS,
!     PORTING_WIZ,
      PORTING_XBOX,
!     PORTING_VITA
! } e_porting;
  
  typedef enum
  {
***************
*** 275,670 ****
      SPAWN_TYPE_STEAM,
      SPAWN_TYPE_WEAPON
  } e_spawn_type;
! 
  typedef enum
  {
      PLANE_X,
      PLANE_Y,
      PLANE_Z
  } e_plane;
! 
! typedef struct
! {
!     int x;
!     int y;
!     int font_index;
! } s_debug_xy_msg;
! 
! typedef enum
! {
!     /*
!     Key def enum.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     FLAG_ESC			= 0x00000001,
!     FLAG_START			= 0x00000002,
!     FLAG_MOVELEFT		= 0x00000004,
!     FLAG_MOVERIGHT		= 0x00000008,
!     FLAG_MOVEUP		    = 0x00000010,
!     FLAG_MOVEDOWN		= 0x00000020,
!     FLAG_ATTACK		    = 0x00000040,
!     FLAG_JUMP			= 0x00000080,
!     FLAG_SPECIAL		= 0x00000100,
!     FLAG_SCREENSHOT	    = 0x00000200,
!     FLAG_ATTACK2		= 0x00000400,
!     FLAG_ATTACK3		= 0x00000800,
!     FLAG_ATTACK4		= 0x00001000,
!     FLAG_ANYBUTTON		= (FLAG_START|FLAG_SPECIAL|FLAG_ATTACK|FLAG_ATTACK2|FLAG_ATTACK3|FLAG_ATTACK4|FLAG_JUMP),
!     FLAG_CONTROLKEYS    = (FLAG_SPECIAL|FLAG_ATTACK|FLAG_ATTACK2|FLAG_ATTACK3|FLAG_ATTACK4|FLAG_JUMP|FLAG_MOVEUP|FLAG_MOVEDOWN|FLAG_MOVELEFT|FLAG_MOVERIGHT),
!     FLAG_FORWARD		= 0x40000000,
!     FLAG_BACKWARD		= 0x80000000
! } e_key_def;
! 
! typedef enum
! {
!     /*
!     Key id enum.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     SDID_MOVEUP,
!     SDID_MOVEDOWN,
!     SDID_MOVELEFT,
!     SDID_MOVERIGHT,
!     SDID_ATTACK,
!     SDID_ATTACK2,
!     SDID_ATTACK3,
!     SDID_ATTACK4,
!     SDID_JUMP,
!     SDID_SPECIAL,
!     SDID_START,
!     SDID_SCREENSHOT,
!     SDID_ESC
! } e_key_id;
! 
! typedef enum
! {
!     /*
!     Entity type enumerator.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     TYPE_NONE,
!     TYPE_PLAYER,
!     TYPE_ENEMY,
!     TYPE_ITEM      = 4,
!     TYPE_OBSTACLE  = 8,
!     TYPE_STEAMER	= 16,
!     TYPE_SHOT		= 32,			// 7-1-2005 type to use for player projectiles
!     TYPE_TRAP		= 64,			// 7-1-2005 lets face it enemies are going to just let you storm in without setting a trap or two!
!     TYPE_TEXTBOX   = 128,			// New textbox type for displaying messages
!     TYPE_ENDLEVEL  = 256,			// New endlevel type that ends the level when touched
!     TYPE_NPC       = 512,          // A character can be an ally or enemy.
!     TYPE_PANEL     = 1024,         // Fake panel, scroll with screen using model speed
!     TYPE_MAX		= TYPE_PANEL,	// For openbor constant check and type hack (i.e., custom hostile and candamage)
!     TYPE_RESERVED  = 0x40000000    // should not use as a type
! } e_entity_type;
! 
! typedef enum
! {
!     /*
!     Entity subtype enumerator.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     SUBTYPE_NONE,
!     SUBTYPE_BIKER,
!     SUBTYPE_NOTGRAB,
!     SUBTYPE_ARROW,		//7-1-2005  subtype for an "enemy" that flies across the screen and dies
!     SUBTYPE_BOOMERANG,
!     SUBTYPE_TOUCH,		// ltb 1-18-05  new Item subtype for a more platformer feel.
!     SUBTYPE_WEAPON,
!     SUBTYPE_NOSKIP,		// Text type that can't be skipped
!     SUBTYPE_FLYDIE,		// Now obstacles can be hit and fly like on Simpsons/TMNT
!     SUBTYPE_BOTH,		// Used with TYPE_ENDLEVEL to force both players to reach the point before ending level
!     SUBTYPE_PROJECTILE, // New weapon projectile type that can be picked up by players/enemies
!     SUBTYPE_FOLLOW,     // Used by NPC character, if set, they will try to follow players
!     SUBTYPE_CHASE       // Used by enemy always chasing you
! } e_entity_type_sub;
  
  typedef enum
  {
      EXCHANGE_CONFERRER,
      EXCHANGE_RECIPIANT
  } e_exchange;
! 
! //------------reserved for A.I. types-------------------------
! typedef enum
! {
!     /*
!     AI move 1 enum: Affects movement path
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     AIMOVE1_NORMAL,                     // Current default style
!     AIMOVE1_CHASE       = 0x00000001,   // alway move towards target, and can run to them if target is farway
!     AIMOVE1_CHASEZ      = 0x00000002,   // only try to get close in z direction
!     AIMOVE1_CHASEX      = 0x00000004,   // only try to get colse in x direction
!     AIMOVE1_AVOID       = 0x00000008,   // try to avoid target
!     AIMOVE1_AVOIDZ      = 0x00000010,   // only try to avoid target in z direction
!     AIMOVE1_AVOIDX      = 0x00000020,   // only try to avoid target in x direction
!     AIMOVE1_WANDER      = 0x00000040,   // ignore the target's position completely, wander everywhere, long idle time
!     AIMOVE1_BIKER       = 0x00000080,   // move like a biker
!     AIMOVE1_ARROW       = 0x00000100,   // fly like an arrow
!     AIMOVE1_STAR        = 0x00000200,   // fly like a star, subject to ground
!     AIMOVE1_BOMB        = 0x00000400,   // fly like a bomb, subject to ground/wall etc
!     AIMOVE1_NOMOVE      = 0x00000800,   // don't move at all
!     AIMOVE1_BOOMERANG   = 0x00001000,   // boomerang
!     MASK_AIMOVE1        = 0x0000FFFF
! } e_aimove_1;
! 
! typedef enum
! {
!     /*
!     A.I move 2 enum: Affect terrain reflect
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     AIMOVE2_NORMAL,                         // Current default style
!     AIMOVE2_IGNOREHOLES     = 0x00010000,   // don't avoid holes
!     AIMOVE2_NOTARGETIDLE    = 0x00020000,   // don't move when there's no target
!     MASK_AIMOVE2            = 0xFFFF0000
! } e_aimove_2;
! 
! typedef enum
! {
!     /*
!     A.I. attack1 enum: Affect attacking style.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     AIATTACK1_NORMAL,                   // Current default style
!     AIATTACK1_LONG      = 0x00000001,   // Long range first, not used
!     AIATTACK1_MELEE     = 0x00000002,   // Melee attack first, not used
!     AIATTACK1_NOATTACK  = 0x00000004,   // dont attack at all
!     AIATTACK1_ALWAYS    = 0x00000008,   // more aggression than default, useful for traps who don't think
!     MASK_AIATTACK1      = 0x0000FFFF
! } e_aiattack_1;
! 
! typedef enum
! {
!     /*
!     A.I. attack1 enum: Affect Defending style.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     AIATTACK2_NORMAL,                   // Current default style, don't dodge at all
!     AIATTACK2_DODGE     = 0x00010000,   // Use dodge animation to avoid attack
!     AIATTACK2_DODGEMOVE = 0x00020000,   // Try to move in z direction if a jump attack is about to hit him and try to step back if a melee attack is about to hit him.
!     MASK_AIATTACK2      = 0xFFFF0000
! } e_aiattack_2;
! 
! typedef enum //Animations
! {
!     /*
!     Animations enum.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     ANI_IDLE,
!     ANI_WALK,
!     ANI_JUMP,
!     ANI_LAND,
!     ANI_PAIN,
!     ANI_FALL,
!     ANI_RISE,
!     ANI_ATTACK,
!     ANI_ATTACK1,
!     ANI_ATTACK2,
!     ANI_ATTACK3,
!     ANI_ATTACK4,			// Very important
!     ANI_UPPER,
!     ANI_BLOCK,				// New block animation
!     ANI_JUMPATTACK,
!     ANI_JUMPATTACK2,
!     ANI_GET,
!     ANI_GRAB,
!     ANI_GRABATTACK,
!     ANI_GRABATTACK2,
!     ANI_THROW,
!     ANI_SPECIAL,
!     ANI_FREESPECIAL,
!     ANI_SPAWN, 				// 26-12-2004 new animation added here ani_spawn
!     ANI_DIE,				// 29-12-2004 new animation added here ani_die
!     ANI_PICK,				// 7-1-2005 used when players select their character at the select screen
!     ANI_FREESPECIAL2,
!     ANI_JUMPATTACK3,
!     ANI_FREESPECIAL3,
!     ANI_UP,					// Mar 2, 2005 - Animation for when going up
!     ANI_DOWN,				// Mar 2, 2005 - Animation for when going down
!     ANI_SHOCK,				// Animation played when knocked down by shock attack
!     ANI_BURN,				// Animation played when knocked down by burn attack
!     ANI_SHOCKPAIN,			// Animation played when not knocked down by shock attack
!     ANI_BURNPAIN,			// Animation played when not knocked down by shock attack
!     ANI_GRABBED,			// Animation played when grabbed
!     ANI_SPECIAL2,			// Animation played for when pressing forward special
!     ANI_RUN,				// Animation played when a player is running
!     ANI_RUNATTACK,			// Animation played when a player is running and presses attack
!     ANI_RUNJUMPATTACK,		// Animation played when a player is running and jumps and presses attack
!     ANI_ATTACKUP,			// u u animation
!     ANI_ATTACKDOWN,			// d d animation
!     ANI_ATTACKFORWARD,		// f f animation
!     ANI_ATTACKBACKWARD,		// Used for attacking backwards
!     ANI_FREESPECIAL4,		// More freespecials added
!     ANI_FREESPECIAL5,		// More freespecials added
!     ANI_FREESPECIAL6,		// More freespecials added
!     ANI_FREESPECIAL7,		// More freespecials added
!     ANI_FREESPECIAL8,		// More freespecials added
!     ANI_RISEATTACK,			// Attack used for enemies when players are crowding around after knocking them down
!     ANI_DODGE,				// Used for up up / down down SOR3 dodge moves for players
!     ANI_ATTACKBOTH,			// Used for when a player holds down attack and presses jump
!     ANI_GRABFORWARD,		// New grab attack for when a player holds down forward/attack
!     ANI_GRABFORWARD2,		// New second grab attack for when a player holds down forward/attack
!     ANI_JUMPFORWARD,		// Attack when a player is moving and jumps
!     ANI_GRABDOWN,			// Attack when a player has grabbed an opponent and presses down/attack
!     ANI_GRABDOWN2,			// Attack when a player has grabbed an opponent and presses down/attack
!     ANI_GRABUP,				// Attack when a player has grabbed an opponent and presses up/attack
!     ANI_GRABUP2,			// Attack when a player has grabbed an opponent and presses up/attack
!     ANI_SELECT,				// Animation that is displayed at the select screen
!     ANI_DUCK,				// Animation that is played when pressing down in "platform" type levels
!     ANI_FAINT,  			// Faint animations for players/enemys by tails
!     ANI_CANT,  				// Can't animation for players(animation when mp is less than mpcost) by tails.
!     ANI_THROWATTACK,		// Added for subtype projectile
!     ANI_CHARGEATTACK,       // Plays when player releases attack1 after holding >= chargetime.
!     ANI_JUMPCANT,
!     ANI_JUMPSPECIAL,
!     ANI_BURNDIE,
!     ANI_SHOCKDIE,
!     ANI_PAIN2,
!     ANI_PAIN3,
!     ANI_PAIN4,
!     ANI_FALL2,
!     ANI_FALL3,
!     ANI_FALL4,
!     ANI_DIE2,
!     ANI_DIE3,
!     ANI_DIE4,
!     ANI_CHARGE,
!     ANI_BACKWALK,
!     ANI_SLEEP,
!     ANI_FOLLOW1,
!     ANI_FOLLOW2,
!     ANI_FOLLOW3,
!     ANI_FOLLOW4,
!     ANI_PAIN5,
!     ANI_PAIN6,
!     ANI_PAIN7,
!     ANI_PAIN8,
!     ANI_PAIN9,
!     ANI_PAIN10,
!     ANI_FALL5,
!     ANI_FALL6,
!     ANI_FALL7,
!     ANI_FALL8,
!     ANI_FALL9,
!     ANI_FALL10,
!     ANI_DIE5,
!     ANI_DIE6,
!     ANI_DIE7,
!     ANI_DIE8,
!     ANI_DIE9,
!     ANI_DIE10,
!     ANI_TURN,               // turn back/flip
!     ANI_RESPAWN,            //now spawn works for players
!     ANI_FORWARDJUMP,
!     ANI_RUNJUMP,
!     ANI_JUMPLAND,
!     ANI_JUMPDELAY,
!     ANI_HITOBSTACLE,
!     ANI_HITPLATFORM,
!     ANI_HITWALL,
!     ANI_GRABBACKWARD,
!     ANI_GRABBACKWARD2,
!     ANI_GRABWALK,
!     ANI_GRABBEDWALK,
!     ANI_GRABWALKUP,
!     ANI_GRABBEDWALKUP,
!     ANI_GRABWALKDOWN,
!     ANI_GRABBEDWALKDOWN,
!     ANI_GRABTURN,
!     ANI_GRABBEDTURN,
!     ANI_GRABBACKWALK,
!     ANI_GRABBEDBACKWALK,
!     ANI_SLIDE,              //Down + Jump animation.
!     ANI_RUNSLIDE,           //Down + Jump while running.
!     ANI_BLOCKPAIN,          //If entity has this, it will play in place of "pain" when it's blokcpain is 1 and incomming attack is blocked.
!     ANI_DUCKATTACK,
!     ANI_RISE2,
!     ANI_RISE3,
!     ANI_RISE4,
!     ANI_RISE5,
!     ANI_RISE6,
!     ANI_RISE7,
!     ANI_RISE8,
!     ANI_RISE9,
!     ANI_RISE10,
!     ANI_RISEB,
!     ANI_RISES,
!     ANI_BLOCKPAIN2,
!     ANI_BLOCKPAIN3,
!     ANI_BLOCKPAIN4,
!     ANI_BLOCKPAIN5,
!     ANI_BLOCKPAIN6,
!     ANI_BLOCKPAIN7,
!     ANI_BLOCKPAIN8,
!     ANI_BLOCKPAIN9,
!     ANI_BLOCKPAIN10,
!     ANI_BLOCKPAINB,
!     ANI_BLOCKPAINS,
!     ANI_CHIPDEATH,
!     ANI_GUARDBREAK,
!     ANI_RISEATTACK2,
!     ANI_RISEATTACK3,
!     ANI_RISEATTACK4,
!     ANI_RISEATTACK5,
!     ANI_RISEATTACK6,
!     ANI_RISEATTACK7,
!     ANI_RISEATTACK8,
!     ANI_RISEATTACK9,
!     ANI_RISEATTACK10,
!     ANI_RISEATTACKB,
!     ANI_RISEATTACKS,
!     ANI_WALKOFF,
!     ANI_BACKPAIN,
!     ANI_BACKPAIN2,
!     ANI_BACKPAIN3,
!     ANI_BACKPAIN4,
!     ANI_BACKPAIN5,
!     ANI_BACKPAIN6,
!     ANI_BACKPAIN7,
!     ANI_BACKPAIN8,
!     ANI_BACKPAIN9,
!     ANI_BACKPAIN10,
!     ANI_BACKFALL,
!     ANI_BACKFALL2,
!     ANI_BACKFALL3,
!     ANI_BACKFALL4,
!     ANI_BACKFALL5,
!     ANI_BACKFALL6,
!     ANI_BACKFALL7,
!     ANI_BACKFALL8,
!     ANI_BACKFALL9,
!     ANI_BACKFALL10,
!     ANI_BACKDIE,
!     ANI_BACKDIE2,
!     ANI_BACKDIE3,
!     ANI_BACKDIE4,
!     ANI_BACKDIE5,
!     ANI_BACKDIE6,
!     ANI_BACKDIE7,
!     ANI_BACKDIE8,
!     ANI_BACKDIE9,
!     ANI_BACKDIE10,
      ANI_BACKRUN,
      ANI_BACKBURNPAIN,
      ANI_BACKSHOCKPAIN,
--- 275,670 ----
      SPAWN_TYPE_STEAM,
      SPAWN_TYPE_WEAPON
  } e_spawn_type;
! 
  typedef enum
  {
      PLANE_X,
      PLANE_Y,
      PLANE_Z
  } e_plane;
! 
! typedef struct
! {
!     int x;
!     int y;
!     int font_index;
! } s_debug_xy_msg;
! 
! typedef enum
! {
!     /*
!     Key def enum.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     FLAG_ESC			= 0x00000001,
!     FLAG_START			= 0x00000002,
!     FLAG_MOVELEFT		= 0x00000004,
!     FLAG_MOVERIGHT		= 0x00000008,
!     FLAG_MOVEUP		    = 0x00000010,
!     FLAG_MOVEDOWN		= 0x00000020,
!     FLAG_ATTACK		    = 0x00000040,
!     FLAG_JUMP			= 0x00000080,
!     FLAG_SPECIAL		= 0x00000100,
!     FLAG_SCREENSHOT	    = 0x00000200,
!     FLAG_ATTACK2		= 0x00000400,
!     FLAG_ATTACK3		= 0x00000800,
!     FLAG_ATTACK4		= 0x00001000,
!     FLAG_ANYBUTTON		= (FLAG_START|FLAG_SPECIAL|FLAG_ATTACK|FLAG_JUMP),
!     FLAG_CONTROLKEYS    = (FLAG_SPECIAL|FLAG_ATTACK|FLAG_JUMP|FLAG_MOVEUP|FLAG_MOVEDOWN|FLAG_MOVELEFT|FLAG_MOVERIGHT),
!     FLAG_FORWARD		= 0x40000000,
!     FLAG_BACKWARD		= 0x80000000
! } e_key_def;
! 
! typedef enum
! {
!     /*
!     Key id enum.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     SDID_MOVEUP,
!     SDID_MOVEDOWN,
!     SDID_MOVELEFT,
!     SDID_MOVERIGHT,
!     SDID_ATTACK,
!     SDID_ATTACK2,
!     SDID_ATTACK3,
!     SDID_ATTACK4,
!     SDID_JUMP,
!     SDID_SPECIAL,
!     SDID_START,
!     SDID_SCREENSHOT,
!     SDID_ESC
! } e_key_id;
! 
! typedef enum
! {
!     /*
!     Entity type enumerator.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     TYPE_NONE,
!     TYPE_PLAYER,
!     TYPE_ENEMY,
!     TYPE_ITEM      = 4,
!     TYPE_OBSTACLE  = 8,
!     TYPE_STEAMER	= 16,
!     TYPE_SHOT		= 32,			// 7-1-2005 type to use for player projectiles
!     TYPE_TRAP		= 64,			// 7-1-2005 lets face it enemies are going to just let you storm in without setting a trap or two!
!     TYPE_TEXTBOX   = 128,			// New textbox type for displaying messages
!     TYPE_ENDLEVEL  = 256,			// New endlevel type that ends the level when touched
!     TYPE_NPC       = 512,          // A character can be an ally or enemy.
!     TYPE_PANEL     = 1024,         // Fake panel, scroll with screen using model speed
!     TYPE_MAX		= TYPE_PANEL,	// For openbor constant check and type hack (i.e., custom hostile and candamage)
!     TYPE_RESERVED  = 0x40000000    // should not use as a type
! } e_entity_type;
! 
! typedef enum
! {
!     /*
!     Entity subtype enumerator.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     SUBTYPE_NONE,
!     SUBTYPE_BIKER,
!     SUBTYPE_NOTGRAB,
!     SUBTYPE_ARROW,		//7-1-2005  subtype for an "enemy" that flies across the screen and dies
!     SUBTYPE_BOOMERANG,
!     SUBTYPE_TOUCH,		// ltb 1-18-05  new Item subtype for a more platformer feel.
!     SUBTYPE_WEAPON,
!     SUBTYPE_NOSKIP,		// Text type that can't be skipped
!     SUBTYPE_FLYDIE,		// Now obstacles can be hit and fly like on Simpsons/TMNT
!     SUBTYPE_BOTH,		// Used with TYPE_ENDLEVEL to force both players to reach the point before ending level
!     SUBTYPE_PROJECTILE, // New weapon projectile type that can be picked up by players/enemies
!     SUBTYPE_FOLLOW,     // Used by NPC character, if set, they will try to follow players
!     SUBTYPE_CHASE       // Used by enemy always chasing you
! } e_entity_type_sub;
  
  typedef enum
  {
      EXCHANGE_CONFERRER,
      EXCHANGE_RECIPIANT
  } e_exchange;
! 
! //------------reserved for A.I. types-------------------------
! typedef enum
! {
!     /*
!     AI move 1 enum: Affects movement path
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     AIMOVE1_NORMAL,                     // Current default style
!     AIMOVE1_CHASE       = 0x00000001,   // alway move towards target, and can run to them if target is farway
!     AIMOVE1_CHASEZ      = 0x00000002,   // only try to get close in z direction
!     AIMOVE1_CHASEX      = 0x00000004,   // only try to get colse in x direction
!     AIMOVE1_AVOID       = 0x00000008,   // try to avoid target
!     AIMOVE1_AVOIDZ      = 0x00000010,   // only try to avoid target in z direction
!     AIMOVE1_AVOIDX      = 0x00000020,   // only try to avoid target in x direction
!     AIMOVE1_WANDER      = 0x00000040,   // ignore the target's position completely, wander everywhere, long idle time
!     AIMOVE1_BIKER       = 0x00000080,   // move like a biker
!     AIMOVE1_ARROW       = 0x00000100,   // fly like an arrow
!     AIMOVE1_STAR        = 0x00000200,   // fly like a star, subject to ground
!     AIMOVE1_BOMB        = 0x00000400,   // fly like a bomb, subject to ground/wall etc
!     AIMOVE1_NOMOVE      = 0x00000800,   // don't move at all
!     AIMOVE1_BOOMERANG   = 0x00001000,   // boomerang
!     MASK_AIMOVE1        = 0x0000FFFF
! } e_aimove_1;
! 
! typedef enum
! {
!     /*
!     A.I move 2 enum: Affect terrain reflect
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     AIMOVE2_NORMAL,                         // Current default style
!     AIMOVE2_IGNOREHOLES     = 0x00010000,   // don't avoid holes
!     AIMOVE2_NOTARGETIDLE    = 0x00020000,   // don't move when there's no target
!     MASK_AIMOVE2            = 0xFFFF0000
! } e_aimove_2;
! 
! typedef enum
! {
!     /*
!     A.I. attack1 enum: Affect attacking style.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     AIATTACK1_NORMAL,                   // Current default style
!     AIATTACK1_LONG      = 0x00000001,   // Long range first, not used
!     AIATTACK1_MELEE     = 0x00000002,   // Melee attack first, not used
!     AIATTACK1_NOATTACK  = 0x00000004,   // dont attack at all
!     AIATTACK1_ALWAYS    = 0x00000008,   // more aggression than default, useful for traps who don't think
!     MASK_AIATTACK1      = 0x0000FFFF
! } e_aiattack_1;
! 
! typedef enum
! {
!     /*
!     A.I. attack1 enum: Affect Defending style.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     AIATTACK2_NORMAL,                   // Current default style, don't dodge at all
!     AIATTACK2_DODGE     = 0x00010000,   // Use dodge animation to avoid attack
!     AIATTACK2_DODGEMOVE = 0x00020000,   // Try to move in z direction if a jump attack is about to hit him and try to step back if a melee attack is about to hit him.
!     MASK_AIATTACK2      = 0xFFFF0000
! } e_aiattack_2;
! 
! typedef enum //Animations
! {
!     /*
!     Animations enum.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     ANI_IDLE,
!     ANI_WALK,
!     ANI_JUMP,
!     ANI_LAND,
!     ANI_PAIN,
!     ANI_FALL,
!     ANI_RISE,
!     ANI_ATTACK,
!     ANI_ATTACK1,
!     ANI_ATTACK2,
!     ANI_ATTACK3,
!     ANI_ATTACK4,			// Very important
!     ANI_UPPER,
!     ANI_BLOCK,				// New block animation
!     ANI_JUMPATTACK,
!     ANI_JUMPATTACK2,
!     ANI_GET,
!     ANI_GRAB,
!     ANI_GRABATTACK,
!     ANI_GRABATTACK2,
!     ANI_THROW,
!     ANI_SPECIAL,
!     ANI_FREESPECIAL,
!     ANI_SPAWN, 				// 26-12-2004 new animation added here ani_spawn
!     ANI_DIE,				// 29-12-2004 new animation added here ani_die
!     ANI_PICK,				// 7-1-2005 used when players select their character at the select screen
!     ANI_FREESPECIAL2,
!     ANI_JUMPATTACK3,
!     ANI_FREESPECIAL3,
!     ANI_UP,					// Mar 2, 2005 - Animation for when going up
!     ANI_DOWN,				// Mar 2, 2005 - Animation for when going down
!     ANI_SHOCK,				// Animation played when knocked down by shock attack
!     ANI_BURN,				// Animation played when knocked down by burn attack
!     ANI_SHOCKPAIN,			// Animation played when not knocked down by shock attack
!     ANI_BURNPAIN,			// Animation played when not knocked down by shock attack
!     ANI_GRABBED,			// Animation played when grabbed
!     ANI_SPECIAL2,			// Animation played for when pressing forward special
!     ANI_RUN,				// Animation played when a player is running
!     ANI_RUNATTACK,			// Animation played when a player is running and presses attack
!     ANI_RUNJUMPATTACK,		// Animation played when a player is running and jumps and presses attack
!     ANI_ATTACKUP,			// u u animation
!     ANI_ATTACKDOWN,			// d d animation
!     ANI_ATTACKFORWARD,		// f f animation
!     ANI_ATTACKBACKWARD,		// Used for attacking backwards
!     ANI_FREESPECIAL4,		// More freespecials added
!     ANI_FREESPECIAL5,		// More freespecials added
!     ANI_FREESPECIAL6,		// More freespecials added
!     ANI_FREESPECIAL7,		// More freespecials added
!     ANI_FREESPECIAL8,		// More freespecials added
!     ANI_RISEATTACK,			// Attack used for enemies when players are crowding around after knocking them down
!     ANI_DODGE,				// Used for up up / down down SOR3 dodge moves for players
!     ANI_ATTACKBOTH,			// Used for when a player holds down attack and presses jump
!     ANI_GRABFORWARD,		// New grab attack for when a player holds down forward/attack
!     ANI_GRABFORWARD2,		// New second grab attack for when a player holds down forward/attack
!     ANI_JUMPFORWARD,		// Attack when a player is moving and jumps
!     ANI_GRABDOWN,			// Attack when a player has grabbed an opponent and presses down/attack
!     ANI_GRABDOWN2,			// Attack when a player has grabbed an opponent and presses down/attack
!     ANI_GRABUP,				// Attack when a player has grabbed an opponent and presses up/attack
!     ANI_GRABUP2,			// Attack when a player has grabbed an opponent and presses up/attack
!     ANI_SELECT,				// Animation that is displayed at the select screen
!     ANI_DUCK,				// Animation that is played when pressing down in "platform" type levels
!     ANI_FAINT,  			// Faint animations for players/enemys by tails
!     ANI_CANT,  				// Can't animation for players(animation when mp is less than mpcost) by tails.
!     ANI_THROWATTACK,		// Added for subtype projectile
!     ANI_CHARGEATTACK,       // Plays when player releases attack1 after holding >= chargetime.
!     ANI_JUMPCANT,
!     ANI_JUMPSPECIAL,
!     ANI_BURNDIE,
!     ANI_SHOCKDIE,
!     ANI_PAIN2,
!     ANI_PAIN3,
!     ANI_PAIN4,
!     ANI_FALL2,
!     ANI_FALL3,
!     ANI_FALL4,
!     ANI_DIE2,
!     ANI_DIE3,
!     ANI_DIE4,
!     ANI_CHARGE,
!     ANI_BACKWALK,
!     ANI_SLEEP,
!     ANI_FOLLOW1,
!     ANI_FOLLOW2,
!     ANI_FOLLOW3,
!     ANI_FOLLOW4,
!     ANI_PAIN5,
!     ANI_PAIN6,
!     ANI_PAIN7,
!     ANI_PAIN8,
!     ANI_PAIN9,
!     ANI_PAIN10,
!     ANI_FALL5,
!     ANI_FALL6,
!     ANI_FALL7,
!     ANI_FALL8,
!     ANI_FALL9,
!     ANI_FALL10,
!     ANI_DIE5,
!     ANI_DIE6,
!     ANI_DIE7,
!     ANI_DIE8,
!     ANI_DIE9,
!     ANI_DIE10,
!     ANI_TURN,               // turn back/flip
!     ANI_RESPAWN,            //now spawn works for players
!     ANI_FORWARDJUMP,
!     ANI_RUNJUMP,
!     ANI_JUMPLAND,
!     ANI_JUMPDELAY,
!     ANI_HITOBSTACLE,
!     ANI_HITPLATFORM,
!     ANI_HITWALL,
!     ANI_GRABBACKWARD,
!     ANI_GRABBACKWARD2,
!     ANI_GRABWALK,
!     ANI_GRABBEDWALK,
!     ANI_GRABWALKUP,
!     ANI_GRABBEDWALKUP,
!     ANI_GRABWALKDOWN,
!     ANI_GRABBEDWALKDOWN,
!     ANI_GRABTURN,
!     ANI_GRABBEDTURN,
!     ANI_GRABBACKWALK,
!     ANI_GRABBEDBACKWALK,
!     ANI_SLIDE,              //Down + Jump animation.
!     ANI_RUNSLIDE,           //Down + Jump while running.
!     ANI_BLOCKPAIN,          //If entity has this, it will play in place of "pain" when it's blokcpain is 1 and incomming attack is blocked.
!     ANI_DUCKATTACK,
!     ANI_RISE2,
!     ANI_RISE3,
!     ANI_RISE4,
!     ANI_RISE5,
!     ANI_RISE6,
!     ANI_RISE7,
!     ANI_RISE8,
!     ANI_RISE9,
!     ANI_RISE10,
!     ANI_RISEB,
!     ANI_RISES,
!     ANI_BLOCKPAIN2,
!     ANI_BLOCKPAIN3,
!     ANI_BLOCKPAIN4,
!     ANI_BLOCKPAIN5,
!     ANI_BLOCKPAIN6,
!     ANI_BLOCKPAIN7,
!     ANI_BLOCKPAIN8,
!     ANI_BLOCKPAIN9,
!     ANI_BLOCKPAIN10,
!     ANI_BLOCKPAINB,
!     ANI_BLOCKPAINS,
!     ANI_CHIPDEATH,
!     ANI_GUARDBREAK,
!     ANI_RISEATTACK2,
!     ANI_RISEATTACK3,
!     ANI_RISEATTACK4,
!     ANI_RISEATTACK5,
!     ANI_RISEATTACK6,
!     ANI_RISEATTACK7,
!     ANI_RISEATTACK8,
!     ANI_RISEATTACK9,
!     ANI_RISEATTACK10,
!     ANI_RISEATTACKB,
!     ANI_RISEATTACKS,
!     ANI_WALKOFF,
!     ANI_BACKPAIN,
!     ANI_BACKPAIN2,
!     ANI_BACKPAIN3,
!     ANI_BACKPAIN4,
!     ANI_BACKPAIN5,
!     ANI_BACKPAIN6,
!     ANI_BACKPAIN7,
!     ANI_BACKPAIN8,
!     ANI_BACKPAIN9,
!     ANI_BACKPAIN10,
!     ANI_BACKFALL,
!     ANI_BACKFALL2,
!     ANI_BACKFALL3,
!     ANI_BACKFALL4,
!     ANI_BACKFALL5,
!     ANI_BACKFALL6,
!     ANI_BACKFALL7,
!     ANI_BACKFALL8,
!     ANI_BACKFALL9,
!     ANI_BACKFALL10,
!     ANI_BACKDIE,
!     ANI_BACKDIE2,
!     ANI_BACKDIE3,
!     ANI_BACKDIE4,
!     ANI_BACKDIE5,
!     ANI_BACKDIE6,
!     ANI_BACKDIE7,
!     ANI_BACKDIE8,
!     ANI_BACKDIE9,
!     ANI_BACKDIE10,
      ANI_BACKRUN,
      ANI_BACKBURNPAIN,
      ANI_BACKSHOCKPAIN,
***************
*** 674,714 ****
      ANI_BACKSHOCKDIE,
      ANI_BACKRISEB,
      ANI_BACKRISES,
!     ANI_BACKRISE,
!     ANI_BACKRISE2,
!     ANI_BACKRISE3,
!     ANI_BACKRISE4,
!     ANI_BACKRISE5,
!     ANI_BACKRISE6,
!     ANI_BACKRISE7,
!     ANI_BACKRISE8,
!     ANI_BACKRISE9,
      ANI_BACKRISE10,
      ANI_BACKRISEATTACKB,
      ANI_BACKRISEATTACKS,
!     ANI_BACKRISEATTACK,
!     ANI_BACKRISEATTACK2,
!     ANI_BACKRISEATTACK3,
!     ANI_BACKRISEATTACK4,
!     ANI_BACKRISEATTACK5,
!     ANI_BACKRISEATTACK6,
!     ANI_BACKRISEATTACK7,
!     ANI_BACKRISEATTACK8,
!     ANI_BACKRISEATTACK9,
      ANI_BACKRISEATTACK10,
      ANI_BACKBLOCKPAINB,
      ANI_BACKBLOCKPAINS,
!     ANI_BACKBLOCKPAIN,
!     ANI_BACKBLOCKPAIN2,
!     ANI_BACKBLOCKPAIN3,
!     ANI_BACKBLOCKPAIN4,
!     ANI_BACKBLOCKPAIN5,
!     ANI_BACKBLOCKPAIN6,
!     ANI_BACKBLOCKPAIN7,
!     ANI_BACKBLOCKPAIN8,
!     ANI_BACKBLOCKPAIN9,
!     ANI_BACKBLOCKPAIN10,
!     ANI_GETBOOMERANG,
      ANI_GETBOOMERANGINAIR,
      ANI_EDGE,
      ANI_BACKEDGE,
--- 674,714 ----
      ANI_BACKSHOCKDIE,
      ANI_BACKRISEB,
      ANI_BACKRISES,
!     ANI_BACKRISE,
!     ANI_BACKRISE2,
!     ANI_BACKRISE3,
!     ANI_BACKRISE4,
!     ANI_BACKRISE5,
!     ANI_BACKRISE6,
!     ANI_BACKRISE7,
!     ANI_BACKRISE8,
!     ANI_BACKRISE9,
      ANI_BACKRISE10,
      ANI_BACKRISEATTACKB,
      ANI_BACKRISEATTACKS,
!     ANI_BACKRISEATTACK,
!     ANI_BACKRISEATTACK2,
!     ANI_BACKRISEATTACK3,
!     ANI_BACKRISEATTACK4,
!     ANI_BACKRISEATTACK5,
!     ANI_BACKRISEATTACK6,
!     ANI_BACKRISEATTACK7,
!     ANI_BACKRISEATTACK8,
!     ANI_BACKRISEATTACK9,
      ANI_BACKRISEATTACK10,
      ANI_BACKBLOCKPAINB,
      ANI_BACKBLOCKPAINS,
!     ANI_BACKBLOCKPAIN,
!     ANI_BACKBLOCKPAIN2,
!     ANI_BACKBLOCKPAIN3,
!     ANI_BACKBLOCKPAIN4,
!     ANI_BACKBLOCKPAIN5,
!     ANI_BACKBLOCKPAIN6,
!     ANI_BACKBLOCKPAIN7,
!     ANI_BACKBLOCKPAIN8,
!     ANI_BACKBLOCKPAIN9,
!     ANI_BACKBLOCKPAIN10,
!     ANI_GETBOOMERANG,
      ANI_GETBOOMERANGINAIR,
      ANI_EDGE,
      ANI_BACKEDGE,
***************
*** 716,1463 ****
      ANI_DUCKRISE,
      ANI_VICTORY,
      ANI_FALLLOSE,
!     ANI_LOSE,
!     MAX_ANIS                // Maximum # of animations. This must always be last.
! } e_animations;
! 
! typedef enum
! {
!     ANI_PROP_ANIMHITS,     // Does the attack need to hit before cancel is allowed?
!     ANI_PROP_ANTIGRAV,     // UT: make dive a similar property as antigravity.
!     ANI_PROP_ATTACK,
!     ANI_PROP_COLLISIONONE,    // stick on the only one victim
!     ANI_PROP_BODY_COLLISION,
!     ANI_PROP_BOUNCE,       //FLOAT -tossv/bounce = new tossv
!     ANI_PROP_CANCEL,       // Cancel anims with freespecial
!     ANI_PROP_CHARGETIME,   //INT charge time for an animation
!     ANI_PROP_COUNTERRANGE, //SUB Auto counter attack. 2011_04_01, DC: Moved to struct.
!     ANI_PROP_DELAY,
!     ANI_PROP_DRAWMETHODS,
!     ANI_PROP_DROPFRAME,    // SUB if tossv < 0, this frame will be set
!     ANI_PROP_DROPV,    // SUB if tossv < 0, this frame will be set
!     ANI_PROP_ENERGYCOST,   //SUB. 1-10-05 to adjust the amount of energy used for specials. 2011_03_31, DC: Moved to struct.
!     ANI_PROP_FLIPFRAME,    // Turns entities around on the desired frame
!     ANI_PROP_FOLLOWUP,     // use which FOLLOW anim?
!     ANI_PROP_IDLE,
!     ANI_PROP_IGNOREATTACKID,
!     ANI_PROP_INDEX,        //unique id
!     ANI_PROP_JUMPFRAME,    //SUB
!     ANI_PROP_LANDFRAME,    // SUB Landing behavior. 2011_04_01, DC: Moved to struct.
!     ANI_PROP_LOOP,         // Animation looping. 2011_03_31, DC: Moved to struct.
!     ANI_PROP_MODEL_INDEX,
!     ANI_PROP_MOVE,
!     ANI_PROP_NUMFRAMES,    //Framecount.
!     ANI_PROP_OFFSET,
!     ANI_PROP_PLATFORM,
!     ANI_PROP_PROJECTILE,
!     ANI_PROP_QUAKEFRAME,   // SUB Screen shake effect. 2011_04_01, DC; Moved to struct.
!     ANI_PROP_RANGE,        //SUB Verify distance to target, jump landings, etc.. 2011_04_01, DC: Moved to struct.
!     ANI_PROP_SHADOW,
!     ANI_PROP_SIZE,         // SUB entity's size (height) during animation
!     ANI_PROP_SOUNDTOPLAY,
!     ANI_PROP_SPAWNFRAME,   // SUB Spawn the subentity as its default type. {frame} {x} {z} {a} {relative?}
!     ANI_PROP_SPRITE,
!     ANI_PROP_SPRITEA,
!     ANI_PROP_SUBENTITY,    // Store the sub-entity's name for further use
!     ANI_PROP_SUMMONFRAME,  // SUB Summon the subentity as an ally, only one though {frame} {x} {z} {a} {relative?}
!     ANI_PROP_SYNC,         // sychronize frame to previous animation if they matches
!     ANI_PROP_UNSUMMONFRAME,// SUB Un-summon the entity
!     ANI_PROP_VULNERABLE,
!     ANI_PROP_WEAPONFRAME    // SUB Specify with a frame when to switch to a weapon model
! } e_animation_properties;
! 
! typedef enum
! {
!     BOSS_SLOW_OFF,
!     BOSS_SLOW_ON
! } e_boss_slow_flag;
! 
! typedef enum
! {
!     DAMAGE_FROM_ENEMY_OFF,
!     DAMAGE_FROM_ENEMY_ON
! } e_damage_from_enemy_flag;
! 
! typedef enum
! {
!     DAMAGE_FROM_PLAYER_OFF,
!     DAMAGE_FROM_PLAYER_ON
! } e_damage_from_player_flag;
! 
! typedef enum
! {
!     LEVEL_PROP_AUTO_SCROLL_DIRECTION,           // int bgdir;
!     LEVEL_PROP_AUTO_SCROLL_X,                   // float bgspeed;
!     LEVEL_PROP_AUTO_SCROLL_Y,                   // float vbgspeed;
!     LEVEL_PROP_BASEMAP_COLLECTION,              // s_basemap *basemaps;
!     LEVEL_PROP_BASEMAP_COUNT,                   // int numbasemaps;
!     LEVEL_PROP_BOSS_COUNT,                      // int bossescount;
!     LEVEL_PROP_BOSS_MUSIC_NAME,                 // char bossmusic[256];
!     LEVEL_PROP_BOSS_MUSIC_OFFSET,               // unsigned bossmusic_offset;
!     LEVEL_PROP_BOSS_SLOW,                       // int boss_slow;
!     LEVEL_PROP_CAMERA_OFFSET_X,                 // int cameraxoffset;
!     LEVEL_PROP_CAMERA_OFFSET_Z,                 // int camerazoffset;
      LEVEL_PROP_COMPLETE_FORCE,                  // int force_finishlevel;
!     LEVEL_PROP_GAMEOVER,                        // int force_gameover;
!     LEVEL_PROP_DAMAGE_FROM_ENEMY,               // int nohurt;
!     LEVEL_PROP_DAMAGE_FROM_PLAYER,              // int nohit;
!     LEVEL_PROP_FACING,                          // e_facing_adjust facing;
!     LEVEL_PROP_GRAVITY,                         // float gravity;
!     LEVEL_PROP_HOLE_COLLECTION,                 // s_terrain *holes;
!     LEVEL_PROP_HOLE_COUNT,                      // int numholes;
!     LEVEL_PROP_LAYER_BACKGROUND_DEFAULT_HANDLE, // s_layer *background;
!     LEVEL_PROP_LAYER_BACKGROUND_COLLECTION,     // s_layer **bglayers;
!     LEVEL_PROP_LAYER_BACKGROUND_COUNT,          // int numbglayers;
!     LEVEL_PROP_LAYER_COLLECTION,                // s_layer *layers;
!     LEVEL_PROP_LAYER_COUNT,                     // int numlayers;
!     LEVEL_PROP_LAYER_FOREGROUND_COLLECTION,     // s_layer **fglayers;
!     LEVEL_PROP_LAYER_FOREGROUND_COUNT,          // int numfglayers;
!     LEVEL_PROP_LAYER_FRONTPANEL_COLLECTION,     // s_layer **frontpanels;
!     LEVEL_PROP_LAYER_FRONTPANEL_COUNT,          // int numfrontpanels;
!     LEVEL_PROP_LAYER_GENERIC_COLLECTION,        // s_layer **genericlayers;
!     LEVEL_PROP_LAYER_GENERIC_COUNT,             // int numgenericlayers;
!     LEVEL_PROP_LAYER_PANEL_COLLECTION,          // s_layer *(*panels)[3]; //normal neon screen
!     LEVEL_PROP_LAYER_PANEL_COUNT,               // int numpanels;
!     LEVEL_PROP_LAYER_REF_COLLECTION,            // s_layer *layersref;
!     LEVEL_PROP_LAYER_REF_COUNT,                 // int numlayersref;
!     LEVEL_PROP_LAYER_WATER_COLLECTION,          // s_layer **waters;
!     LEVEL_PROP_LAYER_WATER_COUNT,               // int numwaters;
!     LEVEL_PROP_MAX_FALL_VELOCITY,               // float maxfallspeed;
!     LEVEL_PROP_MAX_TOSS_VELOCITY,               // float maxtossspeed;
!     LEVEL_PROP_MIRROR,                          // int mirror;
      LEVEL_PROP_NAME,                            // char *name;
!     LEVEL_PROP_NUM_BOSSES,                      // int numbosses;
!     LEVEL_PROP_PALETTE_BLENDING_COLLECTION,     // unsigned char *(*blendings)[MAX_BLENDINGS];
!     LEVEL_PROP_PALETTE_COLLECTION,              // unsigned char (*palettes)[1024];
!     LEVEL_PROP_PALETTE_COUNT,                   // int numpalettes;
!     LEVEL_PROP_POSITION_X,                      // int pos;
!     LEVEL_PROP_QUAKE,                           // int quake;
!     LEVEL_PROP_QUAKE_TIME,                      // u32 quaketime;
!     LEVEL_PROP_ROCKING,                         // int rocking;
!     LEVEL_PROP_SCRIPT_LEVEL_END,                // Script endlevel_script;
!     LEVEL_PROP_SCRIPT_LEVEL_START,              // Script level_script;
!     LEVEL_PROP_SCRIPT_KEY,                      // Script key_script;
!     LEVEL_PROP_SCRIPT_UPDATE,                   // Script update_script;
!     LEVEL_PROP_SCRIPT_UPDATED,                  // Script updated_script;
!     LEVEL_PROP_SCROLL_DIRECTION,                // int scrolldir;
!     LEVEL_PROP_SCROLL_VELOCITY,                 // float scrollspeed;
!     LEVEL_PROP_SIZE_X,                          // int width;
!     LEVEL_PROP_SPAWN_COLLECTION,                // s_spawn_entry *spawnpoints;
!     LEVEL_PROP_SPAWN_COUNT,                     // int numspawns;
!     LEVEL_PROP_SPAWN_PLAYER_COLLECTION,         // s_axis_principal_float spawn[MAX_PLAYERS];
!     LEVEL_PROP_SPECIAL_DISABLE,                 // int nospecial;
!     LEVEL_PROP_TEXT_OBJECT_COLLECTION,          // s_textobj *textobjs;
!     LEVEL_PROP_TEXT_OBJECT_COUNT,               // int numtextobjs;
!     LEVEL_PROP_TIME_ADVANCE,                    // u32 advancetime;
!     LEVEL_PROP_TIME_DISPLAY,                    // int notime;
!     LEVEL_PROP_TIME_RESET,                      // int noreset;
!     LEVEL_PROP_TIME_SET,                        // int settime;
!     LEVEL_PROP_TYPE,                            // int type;
!     LEVEL_PROP_WAITING,                         // int waiting;
!     LEVEL_PROP_WALL_COLLECTION,                 // s_terrain *walls;
!     LEVEL_PROP_WALL_COUNT,                      // int numwalls;
!     LEVEL_PROP_WEAPON                           // int setweap;
! } e_level_properties;
! 
! typedef enum
! {
!     SET_PROP_COMPLETE_FLAG,         // int ifcomplete;
!     SET_PROP_COMPLETE_SKIP,         // int noshowcomplete;
!     SET_PROP_CONTINUE_SCORE_TYPE,   // int continuescore;
!     SET_PROP_CREDITS,               // int credits;
!     SET_PROP_GAME_OVER_SKIP,        // int noshowgameover;
!     SET_PROP_HOF_DISABLE,           // int noshowhof;
!     SET_PROP_LEVELSET_COLLECTION,   // s_level_entry *levelorder;
!     SET_PROP_LEVELSET_COUNT,        // int numlevels;
!     SET_PROP_LIVES,                 // int lives;
!     SET_PROP_MP_RECOVER_TYPE,       // int typemp;
!     SET_PROP_MUSIC_FADE_TIME,       // int custfade;
!     SET_PROP_MUSIC_OVERLAP,         // int musicoverlap;
!     SET_PROP_NAME,                  // char *name;
!     SET_PROP_PLAYER_MAX,            // int maxplayers;
!     SET_PROP_SAVE_TYPE,             // int saveflag;
!     SET_PROP_SELECT_DISABLE,        // int noselect;
!     SET_PROP_SELECT_NO_SAME         // int nosame;
! } e_set_properties;
! 
! typedef enum
! {
!     /*
!     Argument type enum.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     ARG_FLOAT,
!     ARG_STRING,
!     ARG_INT
! } e_arg_types;
! 
! typedef enum
! {
!     /*
!     Attack type enum
!     Damon V. Caskey
!     2013-12-27
!     */
!     ATK_NONE            = -1,   // When we want no attack at all, such as damage_on_landing's default.
!     ATK_NORMAL,
!     ATK_NORMAL1			= ATK_NORMAL,
!     ATK_NORMAL2,
!     ATK_NORMAL3,
!     ATK_NORMAL4,
!     ATK_BLAST,
!     ATK_BURN,
!     ATK_FREEZE,
!     ATK_SHOCK,
!     ATK_STEAL,
!     ATK_NORMAL5,
!     ATK_NORMAL6,
!     ATK_NORMAL7,
!     ATK_NORMAL8,
!     ATK_NORMAL9,
!     ATK_NORMAL10,
!     ATK_ITEM,
!     ATK_LAND,
!     ATK_PIT,
      ATK_LIFESPAN,
!     ATK_LOSE,
!     ATK_TIMEOVER,
!     MAX_ATKS,                       //Default max attack types (must be below all attack types in enum to get correct value)
!     STA_ATKS        = (MAX_ATKS-10)
! } e_attack_types;
! 
! // Attack box properties.
! // Caskey, Damon V.
! // 2016-10-26
! typedef enum
! {
!     ATTACK_PROP_BLOCK_COST,
!     ATTACK_PROP_BLOCK_PENETRATE,
!     ATTACK_PROP_COORDINATES,
!     ATTACK_PROP_COUNTER,
!     ATTACK_PROP_DAMAGE_FORCE,
!     ATTACK_PROP_DAMAGE_LAND_FORCE,
!     ATTACK_PROP_DAMAGE_LAND_MODE,
!     ATTACK_PROP_DAMAGE_LETHAL_DISABLE,
!     ATTACK_PROP_DAMAGE_RECURSIVE_FORCE,
!     ATTACK_PROP_DAMAGE_RECURSIVE_INDEX,
!     ATTACK_PROP_DAMAGE_RECURSIVE_MODE,
!     ATTACK_PROP_DAMAGE_RECURSIVE_TIME_RATE,
!     ATTACK_PROP_DAMAGE_RECURSIVE_TIME_EXPIRE,
!     ATTACK_PROP_DAMAGE_STEAL,
!     ATTACK_PROP_DAMAGE_TYPE,
!     ATTACK_PROP_EFFECT_BLOCK_FLASH,
!     ATTACK_PROP_EFFECT_BLOCK_SOUND,
!     ATTACK_PROP_EFFECT_HIT_FLASH,
!     ATTACK_PROP_EFFECT_HIT_FLASH_DISABLE,
!     ATTACK_PROP_EFFECT_HIT_SOUND,
!     ATTACK_PROP_INDEX,
!     ATTACK_PROP_GROUND,
!     ATTACK_PROP_MAP_INDEX,
!     ATTACK_PROP_MAP_TIME,
!     ATTACK_PROP_REACTION_FALL_FORCE,
!     ATTACK_PROP_REACTION_FALL_VELOCITY,
!     ATTACK_PROP_REACTION_FREEZE_MODE,
!     ATTACK_PROP_REACTION_FREEZE_TIME,
!     ATTACK_PROP_REACTION_INVINCIBLE_TIME,
!     ATTACK_PROP_REACTION_REPOSITION_DIRECTION,
!     ATTACK_PROP_REACTION_REPOSITION_DISTANCE,
!     ATTACK_PROP_REACTION_REPOSITION_MODE,
!     ATTACK_PROP_REACTION_PAIN_SKIP,
!     ATTACK_PROP_REACTION_PAUSE_TIME,
!     ATTACK_PROP_SEAL_COST,
!     ATTACK_PROP_SEAL_TIME,
!     ATTACK_PROP_STAYDOWN_RISE,
!     ATTACK_PROP_STAYDOWN_RISEATTACK,
!     ATTACK_PROP_TAG
! } e_attack_properties;
! 
! // Body collision (bbox) properties.
! // Caskey, Damon V.
! // 2016-10-31
! typedef enum
! {
!     BODY_COLLISION_PROP_COORDINATES,
!     BODY_COLLISION_PROP_DEFENSE,
!     BODY_COLLISION_PROP_TAG
! } e_body_collision_properties;
! 
! // Caskey, Damon V.
! // 2018-01-04
! //
! // Coordinate structure, mainly for accessing
! // collision box position and dimensions.
! typedef enum
! {
!     COLLISION_COORDINATES_PROP_DEPTH_BACKGROUND,
!     COLLISION_COORDINATES_PROP_DEPTH_FOREGROUND,
!     COLLISION_COORDINATES_PROP_HEIGHT,
!     COLLISION_COORDINATES_PROP_WIDTH,
!     COLLISION_COORDINATES_PROP_X,
!     COLLISION_COORDINATES_PROP_Y
! } e_collision_coordinates;
! 
! typedef enum
! {
!     /*
!     Status bar direction enum.
!     Damon V. Caskey
!     2013-12-29
!     */
! 
!     BARSTATUS_DIR_NORMAL,  //Left to Right or Up to Down.
!     BARSTATUS_DIR_INVERT   //Right to Left or Down to Up.
! } e_bar_dir;
! 
! typedef enum
! {
!     HORIZONTALBAR,
!     VERTICALBAR
! } e_barorient;
! 
! typedef enum
! {
!     VALUEBAR,
!     PERCENTAGEBAR
! } e_bartype;
! 
! typedef enum
! {
!     BGT_BGLAYER,
!     BGT_FGLAYER,
!     BGT_PANEL,
!     BGT_FRONTPANEL,
!     BGT_WATER,
!     BGT_BACKGROUND,
!     BGT_GENERIC
! } e_bgloldtype;
! 
! typedef enum
! {
!     /*
!     Blocktype enum. Type of resource drained (if any) when attack is blocked.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     BLOCK_TYPE_HP         = -1,   //HP only.
!     BLOCK_TYPE_MP_FIRST   = 1,    //MP until MP is exhuasted, then HP.
!     BLOCK_TYPE_BOTH,              //Both MP and HP.
!     BLOCK_TYPE_MP_ONLY            //Only MP, even if MP is 0.
! } e_blocktype;
! 
! typedef enum
! {
!     /*
!     Energy check type enum.
!     Damon V. Caskey
!     2013-12-29
!     */
! 
!     COST_CHECK_HP,
!     COST_CHECK_MP
! } e_cost_check;
! 
! typedef enum
! {
!     /*
!     Energycost type enum.
!     Damon V. Caskey
!     2013-12-29
!     */
! 
!     COST_TYPE_MP_THEN_HP,
!     COST_TYPE_MP_ONLY,
!     COST_TYPE_HP_ONLY
! } e_cost_type;
! 
! typedef enum
! {
!     /*
!     Energycost value enum.
!     */
! 
!     ENERGYCOST_NOCOST = 0,
!     ENERGYCOST_DEFAULT_COST = 6,
! } e_cost_value;
! 
! typedef enum
! {
!     /*
!     Counter action conditionals.
!     2012-12-16
!     Damon V. Caskey
!     */
! 
!     COUNTERACTION_CONDITION_NONE,                  //No counter.
!     COUNTERACTION_CONDITION_ALWAYS,                //Always perform coutner action.
!     COUNTERACTION_CONDITION_HOSTILE,               //Only if attacker is hostile entity.
!     COUNTERACTION_CONDITION_HOSTILE_FRONT_NOFREEZE, //Attacker is hostile, strikes from front, and uses non-freeze attack.
!     COUNTERACTION_CONDITION_ALWAYS_RAGE,           //Always perform coutner action and if health - attack_damage <= 0, set health to 1
! } e_counteraction_condition;
! 
! typedef enum
! {
!     /*
!     Counteraction damage taking modes.
!     2012-12-16
!     Damon V. Caskey
!     */
! 
!     COUNTERACTION_DAMAGE_NONE,  //No damage.
!     COUNTERACTION_DAMAGE_NORMAL //Normal damage.
! } e_counteraction_damage;
! 
! typedef enum
! {
!     /*
!     Direction (facing) enum.
!     Damon V. Caskey
!     2013-12-16
!     */
! 
!     DIRECTION_LEFT,
!     DIRECTION_RIGHT
! } e_direction;
! 
! typedef enum
! {
!     /*
!     Direction adjustment enum. Used for binding and changing direction of defender when hit.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     DIRECTION_ADJUST_NONE,             //Leave as is.
!     DIRECTION_ADJUST_SAME,             //Same as attacker/bind/etc.
!     DIRECTION_ADJUST_OPPOSITE  = -1,   //Opposite attacker/bind/etc.
!     DIRECTION_ADJUST_RIGHT     = 2,    //Always right.
!     DIRECTION_ADJUST_LEFT      = -2    //Always left.
! } e_direction_adjust;
! 
! typedef enum
! {
!     /*
!     Run adjust_grabposition check on dograb or not.
!     Damon V. Caskey
!     2013-12-30
!     */
! 
!     DOGRAB_ADJUSTCHECK_TRUE,
!     DOGRAB_ADJUSTCHECK_FALSE
! } e_dograb_adjustcheck;
! 
! typedef enum
! {
!     /*
!     Damage over time mode enum.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     DOT_MODE_OFF,              //Disable.
!     DOT_MODE_HP,               //Drain HP.
!     DOT_MODE_HP_MP,            //Drain HP and MP.
!     DOT_MODE_MP,               //Drain mp.
!     DOT_MODE_NON_LETHAL_HP,    //Drain HP, but do not kill entity.
!     DOT_MODE_NON_LETHAL_HP_MP  //Drain HP and MP, but do not kill entity.
! } e_dot_mode;
! 
! typedef enum
! {
!     /*
!     Edelay factor modes.
!     2013-12-16
!     Damon V. Caskey
!     */
!     EDELAY_MODE_ADD,       //Factor is added directly to edelay.
!     EDELAY_MODE_MULTIPLY   //Orginal delay value is multiplied by factor.
! } e_edelay_mode;
! 
! typedef enum
! {
!     /*
!     Facing adjustment enum.
!     Damon V. Caskey
!     2013-12-29
!     */
! 
!     FACING_ADJUST_NONE,    //No facing adjustment.
!     FACING_ADJUST_RIGHT,   //Always face right.
!     FACING_ADJUST_LEFT,    //Always face left.
!     FACING_ADJUST_LEVEL    //Face according to level scroll direction.
! } e_facing_adjust;
! 
! typedef enum
! {
!     /*
!     Follow up conditional enumerator.
!     Damon V. Caskey
!     2014-01-04
!     */
! 
!     FOLLOW_CONDITION_DISABLED,                     //No followup (default).
!     FOLLOW_CONDITION_ALWAYS,                       //Always perform.
!     FOLLOW_CONDITION_HOSTILE,                      //Perform if target is hostile.
!     FOLLOW_CONDITION_HOSTILE_NOKILL_NOBLOCK,       //Perform if target is hostile, will not be killed and didn't block.
!     FOLLOW_CONDITION_HOSTILE_NOKILL_NOBLOCK_NOGRAB, //Perform if target is hostile, will not be killed, didn't block, and cannot be grabbed.
!     FOLLOW_CONDITION_HOSTILE_NOKILL_BLOCK,         //Perform if target is hostile, will not be killed and block.
! } e_follow_condition;
! 
! typedef enum
! {
!     /*
!     Komap application enum. When to apply KO map to entity.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     KOMAP_TYPE_IMMEDIATELY,    //Apply instantly.
!     KOMAP_TYPE_LAST_FALL_FRAME //Apply on last frame of fall.
! } e_komap_type;
! 
! typedef enum
! {
!     LE_TYPE_NORMAL,
!     LE_TYPE_CUT_SCENE,
!     LE_TYPE_SELECT_SCREEN,
!     LE_TYPE_SKIP_SELECT
! } e_le_type;
! 
! typedef enum
! {
!     LS_TYPE_NONE,        //No loading screen.
!     LS_TYPE_BOTH,        //Background and status bar.
!     LS_TYPE_BACKGROUND,  //Background only.
!     LS_TYPE_BAR,         //Status bar only.
! } e_loadingScreenType;
! 
! typedef enum
! {
!     /*
!     Model copy flag enum.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     MODEL_NO_COPY           = 0x00000001,   //dont copy anything from original model
!     MODEL_NO_WEAPON_COPY    = 0x00000002,   //dont copy weapon list from original model
!     MODEL_NO_SCRIPT_COPY    = 0x00000004    //don't copy scripts
! } e_model_copy;
! 
! typedef enum
! {
!     MF_NONE,
!     MF_ANIMLIST,
!     MF_COLOURMAP,
!     MF_PALETTE              = 4,
!     MF_WEAPONS              = 8,
!     MF_BRANCH               = 16,
!     MF_ANIMATION            = 32,
!     MF_DEFENSE              = 64,
!     MF_OFF_FACTORS          = 128,
!     MF_SPECIAL              = 256,
!     MF_SMARTBOMB            = 512,
!     MF_SCRIPTS              = 1024,
!     MF_ALL                  = 0x7ff
! } e_ModelFreetype;
! 
! typedef enum
! {
!     /*
!     Over thr ground enum. Controls ability to hit downed targets.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!    OTG_NONE,       //Cannot hit grounded targets.
!    OTG_BOTH,       //Can hit grounded targets.
!    OTG_GROUND_ONLY //Can ONLY hit grounded targets.
! } e_otg;
! 
! typedef enum
! {
!     /*
!     Scroll enum.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     SCROLL_RIGHT        = 2,
!     SCROLL_DOWN			= 4,
!     SCROLL_LEFT			= 8,
!     SCROLL_UP			= 16,
!     SCROLL_BACK			= 1,
!     SCROLL_BOTH			= (SCROLL_BACK|SCROLL_RIGHT),
!     SCROLL_RIGHTLEFT    = SCROLL_BOTH,
!     SCROLL_LEFTRIGHT    = (SCROLL_LEFT|SCROLL_BACK),
!     SCROLL_INWARD       = 32,
!     SCROLL_OUTWARD      = 64,
!     SCROLL_OUTIN		= (SCROLL_OUTWARD|SCROLL_BACK),
!     SCROLL_INOUT		= (SCROLL_INWARD|SCROLL_BACK),
!     SCROLL_UPWARD       = 128,
!     SCROLL_DOWNWARD     = 256
! } e_scroll;
! 
! typedef enum
! {
!     /*
!     Slow motion switch enum.
!     Damon V. Caskey
!     2014-01-21
!     */
! 
!     SLOW_MOTION_OFF,
!     SLOW_MOTION_ON
! } e_slow_motion_enable;
! 
! typedef enum
! {
!     /*
!     Weapon loss type enum.
!     Damon V. Caskey
!     2013-12-29
!     */
! 
!     WEAPLOSS_TYPE_ANY,         //Weapon lost taking any hit.
!     WEAPLOSS_TYPE_KNOCKDOWN,   //Weapon lost on knockdown.
!     WEAPLOSS_TYPE_DEATH,       //Weapon lost on death.
!     WEAPLOSS_TYPE_CHANGE       //weapon is lost only when level ends or character is changed during continue. This depends on the level settings and whether players had weapons on start or not.
! } e_weaploss_type;
! 
! //macros for drawing menu text, fits different font size
! #define _strmidx(f,s, args...) ((videomodes.hRes-font_string_width((f), s, ##args))/2)
! #define _colx(f,c) ((int)(videomodes.hRes/2+(c)*(fontmonowidth((f))+1)))
! #define _liney(f,l) ((int)(videomodes.vRes/2+(l)*(fontheight((f))+1)))
! #define _menutextm(f, l, shift, s, args...) font_printf(_strmidx(f,s, ##args)+(int)((shift)*(fontmonowidth((f))+1)), _liney(f,l), (f), 0, s, ##args)
! #define _menutextmshift(f, l, shift, shiftx, shifty, s, args...) font_printf(_strmidx(f,s, ##args)+(int)((shift)*(fontmonowidth((f))+1))+shiftx, _liney(f,l)+shifty, (f), 0, s, ##args)
! #define _menutext(f, c, l, s, args...) font_printf(_colx(f,c), _liney(f,l), (f), 0, s, ##args)
! #define _menutextshift(f, c, l, shiftx, shifty, s, args...) font_printf(_colx(f,c)+shiftx, _liney(f,l)+shifty, (f), 0, s, ##args)
! 
! //string starts with constant, for animation# series
! #define strclen(s) (sizeof(s)-1)
! #define starts_with(a, b) (strnicmp(a, b, strclen(b))==0)
! #define starts_with_num(a, b) (starts_with(a, b) && (!a[strclen(b)] || (a[strclen(b)] >= '1' && a[strclen(b)] <= '9')))
! #define get_tail_number(n, a, b) \
! n = atoi(a+strclen(b)); \
! if(n<1) n = 1;
! 
! #define lut_mul ((level && current_palette)?(level->blendings[current_palette-1][BLEND_MULTIPLY]):(blendings[BLEND_MULTIPLY]))
! #define lut_screen ((level && current_palette)?(level->blendings[current_palette-1][BLEND_SCREEN]):(blendings[BLEND_SCREEN]))
! #define lut_overlay ((level && current_palette)?(level->blendings[current_palette-1][BLEND_OVERLAY]):(blendings[BLEND_OVERLAY]))
! #define lut_hl ((level && current_palette)?(level->blendings[current_palette-1][BLEND_HARDLIGHT]):(blendings[BLEND_HARDLIGHT]))
! #define lut_dodge ((level && current_palette)?(level->blendings[current_palette-1][BLEND_DODGE]):(blendings[BLEND_DODGE]))
! #define lut_half ((level && current_palette)?(level->blendings[current_palette-1][BLEND_HALF]):(blendings[BLEND_HALF]))
! #define lut ((level && current_palette)?(level->blendings[current_palette-1]):(blendings))
! 
! #define ABS(x) ((x)>0?(x):(-(x)))
! 
! #define set_attacking(e) e->attacking = ATTACKING_PREPARED;\
! 						 e->idling = IDLING_INACTIVE;
! 
! #define set_jumping(e)   e->jumping = 1;\
  						 e->idling = IDLING_INACTIVE; \
! 						 e->ducking = DUCK_INACTIVE;
! 
! #define set_charging(e)  e->charging = 1;\
  						 e->idling = IDLING_INACTIVE; \
! 						 e->ducking = DUCK_INACTIVE;
! 
! #define set_getting(e)   e->getting = 1;\
  						 e->idling = IDLING_INACTIVE; \
! 						 e->ducking = DUCK_INACTIVE;
! 
! #define set_blocking(e)  e->blocking = 1;\
! 						 e->idling = IDLING_INACTIVE;
! 
! #define set_turning(e)  e->turning = 1;\
  						e->idling = IDLING_INACTIVE; \
! 						 e->ducking = DUCK_INACTIVE;
! 
! #define expand_time(e)   if(e->stalltime>0) e->stalltime++;\
! 						 if(e->releasetime>0)e->releasetime++;\
! 						 if(e->nextanim>0)e->nextanim++;\
! 						 if(e->nextthink>0)e->nextthink++;\
! 						 if(e->nextmove>0)e->nextmove++;\
! 						 if(e->magictime>0)e->magictime++;\
! 						 if(e->guardtime>0)e->guardtime++;\
! 						 if(e->toss_time>0)e->toss_time++;\
! 						 if(e->freezetime>0 && (textbox || smartbomber))e->freezetime++;\
! 						 if(e->mpchargetime>0)e->mpchargetime++;\
! 						 if(e->invinctime>0) e->invinctime++;\
! 						 if(e->turntime>0) e->turntime++;\
! 						 if(e->sealtime>0) e->sealtime++;
! /*                       if(e->dot_time>0) e->dot_time++;\
! 						 if(e->dot_cnt>0) e->dot_cnt++;
! */
! 
! #define freezeall        (smartbomber || textbox)
! 
! #define is_projectile(e) (e->modeldata.type == TYPE_SHOT || e->model->subtype == SUBTYPE_ARROW || e->model->subtype == SUBTYPE_BOOMERANG || e->owner)
! 
! #define screeny (level?((level->scrolldir == SCROLL_UP || level->scrolldir == SCROLL_DOWN )? 0:advancey ):0)
! #define screenx (level?advancex:0)
! 
! #define tobounce(e) (e->animation->bounce && diff(0, e->velocity.y) > 1.5 && \
! 					 !((autoland == 1 && e->damage_on_landing.attack_force == -1) || e->damage_on_landing.attack_force == -2))
! 
! #define getpal ((current_palette&&level)?(level->palettes[current_palette-1]):pal)
! 
! #define canbegrabbed(self, other) \
! 		(other->animation->vulnerable[other->animpos] && \
! 		 (!self->animation->move || self->animation->move[self->animpos]->axis.x == 0) && \
! 		 (!self->animation->move || self->animation->move[self->animpos]->axis.z == 0 ) && \
! 		 !(other->nograb || other->invincible || other->link || \
! 		   other->model->animal || inair(other) || \
! 		  (self->modeldata.type == TYPE_PLAYER && other->modeldata.type == TYPE_PLAYER && savedata.mode)))
! 
! #define cangrab(self, other) \
! 		((other->modeldata.antigrab - self->modeldata.grabforce + \
! 		  (other->modeldata.paingrab?(other->modeldata.paingrab-other->inpain):0)<=0) &&\
! 		 canbegrabbed(self, other) && \
! 		 !inair_range(self) && \
! 		 diff(other->position.y, self->position.y) <= T_WALKOFF)
! 		 //diff(other->position.y, self->position.y) <= 0.1)
! 
! #define validanim(e, a) ((e)->modeldata.animation[a]&&(e)->modeldata.animation[a]->numframes)
! 
! #define inScreen ( selectScreen || titleScreen || hallOfFame || gameOver || showComplete || currentScene || enginecreditsScreen || menuScreen || startgameMenu || \
!                   newgameMenu || loadgameMenu || optionsMenu || controloptionsMenu || soundoptionsMenu || videooptionsMenu || systemoptionsMenu )
! 
! //#define     MAX_MOVES             16
! //#define     MAX_MOVE_STEPS        16
! 
! #pragma pack(4)
  
! // Caskey, Damon V.
  // 2014-01-20
! //
! // Axis - Horizontal and lateral only (float).
! typedef struct
! {
!     float x;    // Horizontal axis.
!     float z;    // Lateral axis.
  } s_axis_plane_lateral_float;
  
! // Caskey, Damon V.
  // 2014-01-20
! //
! // Axis - Horizontal and lateral only (int).
! typedef struct
! {
!     int x;    // Horizontal axis.
!     int z;    // Lateral axis.
! } s_axis_plane_lateral_int;
  
! // Caskey, Damon V.
  // 2014-01-20
! //
! // Axis - Horizontal and vertical only (int).
! typedef struct
! {
!     int x;      // Horizontal axis.
!     int y;      // Altitude/Vertical axis.
  } s_axis_plane_vertical_int;
  
  // Caskey, Damon V.
--- 716,1463 ----
      ANI_DUCKRISE,
      ANI_VICTORY,
      ANI_FALLLOSE,
!     ANI_LOSE,
!     MAX_ANIS                // Maximum # of animations. This must always be last.
! } e_animations;
! 
! typedef enum
! {
!     ANI_PROP_ANIMHITS,     // Does the attack need to hit before cancel is allowed?
!     ANI_PROP_ANTIGRAV,     // UT: make dive a similar property as antigravity.
!     ANI_PROP_ATTACK,
!     ANI_PROP_COLLISIONONE,    // stick on the only one victim
!     ANI_PROP_BODY_COLLISION,
!     ANI_PROP_BOUNCE,       //FLOAT -tossv/bounce = new tossv
!     ANI_PROP_CANCEL,       // Cancel anims with freespecial
!     ANI_PROP_CHARGETIME,   //INT charge time for an animation
!     ANI_PROP_COUNTERRANGE, //SUB Auto counter attack. 2011_04_01, DC: Moved to struct.
!     ANI_PROP_DELAY,
!     ANI_PROP_DRAWMETHODS,
!     ANI_PROP_DROPFRAME,    // SUB if tossv < 0, this frame will be set
!     ANI_PROP_DROPV,    // SUB if tossv < 0, this frame will be set
!     ANI_PROP_ENERGYCOST,   //SUB. 1-10-05 to adjust the amount of energy used for specials. 2011_03_31, DC: Moved to struct.
!     ANI_PROP_FLIPFRAME,    // Turns entities around on the desired frame
!     ANI_PROP_FOLLOWUP,     // use which FOLLOW anim?
!     ANI_PROP_IDLE,
!     ANI_PROP_IGNOREATTACKID,
!     ANI_PROP_INDEX,        //unique id
!     ANI_PROP_JUMPFRAME,    //SUB
!     ANI_PROP_LANDFRAME,    // SUB Landing behavior. 2011_04_01, DC: Moved to struct.
!     ANI_PROP_LOOP,         // Animation looping. 2011_03_31, DC: Moved to struct.
!     ANI_PROP_MODEL_INDEX,
!     ANI_PROP_MOVE,
!     ANI_PROP_NUMFRAMES,    //Framecount.
!     ANI_PROP_OFFSET,
!     ANI_PROP_PLATFORM,
!     ANI_PROP_PROJECTILE,
!     ANI_PROP_QUAKEFRAME,   // SUB Screen shake effect. 2011_04_01, DC; Moved to struct.
!     ANI_PROP_RANGE,        //SUB Verify distance to target, jump landings, etc.. 2011_04_01, DC: Moved to struct.
!     ANI_PROP_SHADOW,
!     ANI_PROP_SIZE,         // SUB entity's size (height) during animation
!     ANI_PROP_SOUNDTOPLAY,
!     ANI_PROP_SPAWNFRAME,   // SUB Spawn the subentity as its default type. {frame} {x} {z} {a} {relative?}
!     ANI_PROP_SPRITE,
!     ANI_PROP_SPRITEA,
!     ANI_PROP_SUBENTITY,    // Store the sub-entity's name for further use
!     ANI_PROP_SUMMONFRAME,  // SUB Summon the subentity as an ally, only one though {frame} {x} {z} {a} {relative?}
!     ANI_PROP_SYNC,         // sychronize frame to previous animation if they matches
!     ANI_PROP_UNSUMMONFRAME,// SUB Un-summon the entity
!     ANI_PROP_VULNERABLE,
!     ANI_PROP_WEAPONFRAME    // SUB Specify with a frame when to switch to a weapon model
! } e_animation_properties;
! 
! typedef enum
! {
!     BOSS_SLOW_OFF,
!     BOSS_SLOW_ON
! } e_boss_slow_flag;
! 
! typedef enum
! {
!     DAMAGE_FROM_ENEMY_OFF,
!     DAMAGE_FROM_ENEMY_ON
! } e_damage_from_enemy_flag;
! 
! typedef enum
! {
!     DAMAGE_FROM_PLAYER_OFF,
!     DAMAGE_FROM_PLAYER_ON
! } e_damage_from_player_flag;
! 
! typedef enum
! {
!     LEVEL_PROP_AUTO_SCROLL_DIRECTION,           // int bgdir;
!     LEVEL_PROP_AUTO_SCROLL_X,                   // float bgspeed;
!     LEVEL_PROP_AUTO_SCROLL_Y,                   // float vbgspeed;
!     LEVEL_PROP_BASEMAP_COLLECTION,              // s_basemap *basemaps;
!     LEVEL_PROP_BASEMAP_COUNT,                   // int numbasemaps;
!     LEVEL_PROP_BOSS_COUNT,                      // int bossescount;
!     LEVEL_PROP_BOSS_MUSIC_NAME,                 // char bossmusic[256];
!     LEVEL_PROP_BOSS_MUSIC_OFFSET,               // unsigned bossmusic_offset;
!     LEVEL_PROP_BOSS_SLOW,                       // int boss_slow;
!     LEVEL_PROP_CAMERA_OFFSET_X,                 // int cameraxoffset;
!     LEVEL_PROP_CAMERA_OFFSET_Z,                 // int camerazoffset;
      LEVEL_PROP_COMPLETE_FORCE,                  // int force_finishlevel;
!     LEVEL_PROP_GAMEOVER,                        // int force_gameover;
!     LEVEL_PROP_DAMAGE_FROM_ENEMY,               // int nohurt;
!     LEVEL_PROP_DAMAGE_FROM_PLAYER,              // int nohit;
!     LEVEL_PROP_FACING,                          // e_facing_adjust facing;
!     LEVEL_PROP_GRAVITY,                         // float gravity;
!     LEVEL_PROP_HOLE_COLLECTION,                 // s_terrain *holes;
!     LEVEL_PROP_HOLE_COUNT,                      // int numholes;
!     LEVEL_PROP_LAYER_BACKGROUND_DEFAULT_HANDLE, // s_layer *background;
!     LEVEL_PROP_LAYER_BACKGROUND_COLLECTION,     // s_layer **bglayers;
!     LEVEL_PROP_LAYER_BACKGROUND_COUNT,          // int numbglayers;
!     LEVEL_PROP_LAYER_COLLECTION,                // s_layer *layers;
!     LEVEL_PROP_LAYER_COUNT,                     // int numlayers;
!     LEVEL_PROP_LAYER_FOREGROUND_COLLECTION,     // s_layer **fglayers;
!     LEVEL_PROP_LAYER_FOREGROUND_COUNT,          // int numfglayers;
!     LEVEL_PROP_LAYER_FRONTPANEL_COLLECTION,     // s_layer **frontpanels;
!     LEVEL_PROP_LAYER_FRONTPANEL_COUNT,          // int numfrontpanels;
!     LEVEL_PROP_LAYER_GENERIC_COLLECTION,        // s_layer **genericlayers;
!     LEVEL_PROP_LAYER_GENERIC_COUNT,             // int numgenericlayers;
!     LEVEL_PROP_LAYER_PANEL_COLLECTION,          // s_layer *(*panels)[3]; //normal neon screen
!     LEVEL_PROP_LAYER_PANEL_COUNT,               // int numpanels;
!     LEVEL_PROP_LAYER_REF_COLLECTION,            // s_layer *layersref;
!     LEVEL_PROP_LAYER_REF_COUNT,                 // int numlayersref;
!     LEVEL_PROP_LAYER_WATER_COLLECTION,          // s_layer **waters;
!     LEVEL_PROP_LAYER_WATER_COUNT,               // int numwaters;
!     LEVEL_PROP_MAX_FALL_VELOCITY,               // float maxfallspeed;
!     LEVEL_PROP_MAX_TOSS_VELOCITY,               // float maxtossspeed;
!     LEVEL_PROP_MIRROR,                          // int mirror;
      LEVEL_PROP_NAME,                            // char *name;
!     LEVEL_PROP_NUM_BOSSES,                      // int numbosses;
!     LEVEL_PROP_PALETTE_BLENDING_COLLECTION,     // unsigned char *(*blendings)[MAX_BLENDINGS];
!     LEVEL_PROP_PALETTE_COLLECTION,              // unsigned char (*palettes)[1024];
!     LEVEL_PROP_PALETTE_COUNT,                   // int numpalettes;
!     LEVEL_PROP_POSITION_X,                      // int pos;
!     LEVEL_PROP_QUAKE,                           // int quake;
!     LEVEL_PROP_QUAKE_TIME,                      // u32 quaketime;
!     LEVEL_PROP_ROCKING,                         // int rocking;
!     LEVEL_PROP_SCRIPT_LEVEL_END,                // Script endlevel_script;
!     LEVEL_PROP_SCRIPT_LEVEL_START,              // Script level_script;
!     LEVEL_PROP_SCRIPT_KEY,                      // Script key_script;
!     LEVEL_PROP_SCRIPT_UPDATE,                   // Script update_script;
!     LEVEL_PROP_SCRIPT_UPDATED,                  // Script updated_script;
!     LEVEL_PROP_SCROLL_DIRECTION,                // int scrolldir;
!     LEVEL_PROP_SCROLL_VELOCITY,                 // float scrollspeed;
!     LEVEL_PROP_SIZE_X,                          // int width;
!     LEVEL_PROP_SPAWN_COLLECTION,                // s_spawn_entry *spawnpoints;
!     LEVEL_PROP_SPAWN_COUNT,                     // int numspawns;
!     LEVEL_PROP_SPAWN_PLAYER_COLLECTION,         // s_axis_principal_float spawn[MAX_PLAYERS];
!     LEVEL_PROP_SPECIAL_DISABLE,                 // int nospecial;
!     LEVEL_PROP_TEXT_OBJECT_COLLECTION,          // s_textobj *textobjs;
!     LEVEL_PROP_TEXT_OBJECT_COUNT,               // int numtextobjs;
!     LEVEL_PROP_TIME_ADVANCE,                    // u32 advancetime;
!     LEVEL_PROP_TIME_DISPLAY,                    // int notime;
!     LEVEL_PROP_TIME_RESET,                      // int noreset;
!     LEVEL_PROP_TIME_SET,                        // int settime;
!     LEVEL_PROP_TYPE,                            // int type;
!     LEVEL_PROP_WAITING,                         // int waiting;
!     LEVEL_PROP_WALL_COLLECTION,                 // s_terrain *walls;
!     LEVEL_PROP_WALL_COUNT,                      // int numwalls;
!     LEVEL_PROP_WEAPON                           // int setweap;
! } e_level_properties;
! 
! typedef enum
! {
!     SET_PROP_COMPLETE_FLAG,         // int ifcomplete;
!     SET_PROP_COMPLETE_SKIP,         // int noshowcomplete;
!     SET_PROP_CONTINUE_SCORE_TYPE,   // int continuescore;
!     SET_PROP_CREDITS,               // int credits;
!     SET_PROP_GAME_OVER_SKIP,        // int noshowgameover;
!     SET_PROP_HOF_DISABLE,           // int noshowhof;
!     SET_PROP_LEVELSET_COLLECTION,   // s_level_entry *levelorder;
!     SET_PROP_LEVELSET_COUNT,        // int numlevels;
!     SET_PROP_LIVES,                 // int lives;
!     SET_PROP_MP_RECOVER_TYPE,       // int typemp;
!     SET_PROP_MUSIC_FADE_TIME,       // int custfade;
!     SET_PROP_MUSIC_OVERLAP,         // int musicoverlap;
!     SET_PROP_NAME,                  // char *name;
!     SET_PROP_PLAYER_MAX,            // int maxplayers;
!     SET_PROP_SAVE_TYPE,             // int saveflag;
!     SET_PROP_SELECT_DISABLE,        // int noselect;
!     SET_PROP_SELECT_NO_SAME         // int nosame;
! } e_set_properties;
! 
! typedef enum
! {
!     /*
!     Argument type enum.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     ARG_FLOAT,
!     ARG_STRING,
!     ARG_INT
! } e_arg_types;
! 
! typedef enum
! {
!     /*
!     Attack type enum
!     Damon V. Caskey
!     2013-12-27
!     */
!     ATK_NONE            = -1,   // When we want no attack at all, such as damage_on_landing's default.
!     ATK_NORMAL,
!     ATK_NORMAL1			= ATK_NORMAL,
!     ATK_NORMAL2,
!     ATK_NORMAL3,
!     ATK_NORMAL4,
!     ATK_BLAST,
!     ATK_BURN,
!     ATK_FREEZE,
!     ATK_SHOCK,
!     ATK_STEAL,
!     ATK_NORMAL5,
!     ATK_NORMAL6,
!     ATK_NORMAL7,
!     ATK_NORMAL8,
!     ATK_NORMAL9,
!     ATK_NORMAL10,
!     ATK_ITEM,
!     ATK_LAND,
!     ATK_PIT,
      ATK_LIFESPAN,
!     ATK_LOSE,
!     ATK_TIMEOVER,
!     MAX_ATKS,                       //Default max attack types (must be below all attack types in enum to get correct value)
!     STA_ATKS        = (MAX_ATKS-10)
! } e_attack_types;
! 
! // Attack box properties.
! // Caskey, Damon V.
! // 2016-10-26
! typedef enum
! {
!     ATTACK_PROP_BLOCK_COST,
!     ATTACK_PROP_BLOCK_PENETRATE,
!     ATTACK_PROP_COORDINATES,
!     ATTACK_PROP_COUNTER,
!     ATTACK_PROP_DAMAGE_FORCE,
!     ATTACK_PROP_DAMAGE_LAND_FORCE,
!     ATTACK_PROP_DAMAGE_LAND_MODE,
!     ATTACK_PROP_DAMAGE_LETHAL_DISABLE,
!     ATTACK_PROP_DAMAGE_RECURSIVE_FORCE,
!     ATTACK_PROP_DAMAGE_RECURSIVE_INDEX,
!     ATTACK_PROP_DAMAGE_RECURSIVE_MODE,
!     ATTACK_PROP_DAMAGE_RECURSIVE_TIME_RATE,
!     ATTACK_PROP_DAMAGE_RECURSIVE_TIME_EXPIRE,
!     ATTACK_PROP_DAMAGE_STEAL,
!     ATTACK_PROP_DAMAGE_TYPE,
!     ATTACK_PROP_EFFECT_BLOCK_FLASH,
!     ATTACK_PROP_EFFECT_BLOCK_SOUND,
!     ATTACK_PROP_EFFECT_HIT_FLASH,
!     ATTACK_PROP_EFFECT_HIT_FLASH_DISABLE,
!     ATTACK_PROP_EFFECT_HIT_SOUND,
!     ATTACK_PROP_INDEX,
!     ATTACK_PROP_GROUND,
!     ATTACK_PROP_MAP_INDEX,
!     ATTACK_PROP_MAP_TIME,
!     ATTACK_PROP_REACTION_FALL_FORCE,
!     ATTACK_PROP_REACTION_FALL_VELOCITY,
!     ATTACK_PROP_REACTION_FREEZE_MODE,
!     ATTACK_PROP_REACTION_FREEZE_TIME,
!     ATTACK_PROP_REACTION_INVINCIBLE_TIME,
!     ATTACK_PROP_REACTION_REPOSITION_DIRECTION,
!     ATTACK_PROP_REACTION_REPOSITION_DISTANCE,
!     ATTACK_PROP_REACTION_REPOSITION_MODE,
!     ATTACK_PROP_REACTION_PAIN_SKIP,
!     ATTACK_PROP_REACTION_PAUSE_TIME,
!     ATTACK_PROP_SEAL_COST,
!     ATTACK_PROP_SEAL_TIME,
!     ATTACK_PROP_STAYDOWN_RISE,
!     ATTACK_PROP_STAYDOWN_RISEATTACK,
!     ATTACK_PROP_TAG
! } e_attack_properties;
! 
! // Body collision (bbox) properties.
! // Caskey, Damon V.
! // 2016-10-31
! typedef enum
! {
!     BODY_COLLISION_PROP_COORDINATES,
!     BODY_COLLISION_PROP_DEFENSE,
!     BODY_COLLISION_PROP_TAG
! } e_body_collision_properties;
! 
! // Caskey, Damon V.
! // 2018-01-04
! //
! // Coordinate structure, mainly for accessing
! // collision box position and dimensions.
! typedef enum
! {
!     COLLISION_COORDINATES_PROP_DEPTH_BACKGROUND,
!     COLLISION_COORDINATES_PROP_DEPTH_FOREGROUND,
!     COLLISION_COORDINATES_PROP_HEIGHT,
!     COLLISION_COORDINATES_PROP_WIDTH,
!     COLLISION_COORDINATES_PROP_X,
!     COLLISION_COORDINATES_PROP_Y
! } e_collision_coordinates;
! 
! typedef enum
! {
!     /*
!     Status bar direction enum.
!     Damon V. Caskey
!     2013-12-29
!     */
! 
!     BARSTATUS_DIR_NORMAL,  //Left to Right or Up to Down.
!     BARSTATUS_DIR_INVERT   //Right to Left or Down to Up.
! } e_bar_dir;
! 
! typedef enum
! {
!     HORIZONTALBAR,
!     VERTICALBAR
! } e_barorient;
! 
! typedef enum
! {
!     VALUEBAR,
!     PERCENTAGEBAR
! } e_bartype;
! 
! typedef enum
! {
!     BGT_BGLAYER,
!     BGT_FGLAYER,
!     BGT_PANEL,
!     BGT_FRONTPANEL,
!     BGT_WATER,
!     BGT_BACKGROUND,
!     BGT_GENERIC
! } e_bgloldtype;
! 
! typedef enum
! {
!     /*
!     Blocktype enum. Type of resource drained (if any) when attack is blocked.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     BLOCK_TYPE_HP         = -1,   //HP only.
!     BLOCK_TYPE_MP_FIRST   = 1,    //MP until MP is exhuasted, then HP.
!     BLOCK_TYPE_BOTH,              //Both MP and HP.
!     BLOCK_TYPE_MP_ONLY            //Only MP, even if MP is 0.
! } e_blocktype;
! 
! typedef enum
! {
!     /*
!     Energy check type enum.
!     Damon V. Caskey
!     2013-12-29
!     */
! 
!     COST_CHECK_HP,
!     COST_CHECK_MP
! } e_cost_check;
! 
! typedef enum
! {
!     /*
!     Energycost type enum.
!     Damon V. Caskey
!     2013-12-29
!     */
! 
!     COST_TYPE_MP_THEN_HP,
!     COST_TYPE_MP_ONLY,
!     COST_TYPE_HP_ONLY
! } e_cost_type;
! 
! typedef enum
! {
!     /*
!     Energycost value enum.
!     */
! 
!     ENERGYCOST_NOCOST = 0,
!     ENERGYCOST_DEFAULT_COST = 6,
! } e_cost_value;
! 
! typedef enum
! {
!     /*
!     Counter action conditionals.
!     2012-12-16
!     Damon V. Caskey
!     */
! 
!     COUNTERACTION_CONDITION_NONE,                  //No counter.
!     COUNTERACTION_CONDITION_ALWAYS,                //Always perform coutner action.
!     COUNTERACTION_CONDITION_HOSTILE,               //Only if attacker is hostile entity.
!     COUNTERACTION_CONDITION_HOSTILE_FRONT_NOFREEZE, //Attacker is hostile, strikes from front, and uses non-freeze attack.
!     COUNTERACTION_CONDITION_ALWAYS_RAGE,           //Always perform coutner action and if health - attack_damage <= 0, set health to 1
! } e_counteraction_condition;
! 
! typedef enum
! {
!     /*
!     Counteraction damage taking modes.
!     2012-12-16
!     Damon V. Caskey
!     */
! 
!     COUNTERACTION_DAMAGE_NONE,  //No damage.
!     COUNTERACTION_DAMAGE_NORMAL //Normal damage.
! } e_counteraction_damage;
! 
! typedef enum
! {
!     /*
!     Direction (facing) enum.
!     Damon V. Caskey
!     2013-12-16
!     */
! 
!     DIRECTION_LEFT,
!     DIRECTION_RIGHT
! } e_direction;
! 
! typedef enum
! {
!     /*
!     Direction adjustment enum. Used for binding and changing direction of defender when hit.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     DIRECTION_ADJUST_NONE,             //Leave as is.
!     DIRECTION_ADJUST_SAME,             //Same as attacker/bind/etc.
!     DIRECTION_ADJUST_OPPOSITE  = -1,   //Opposite attacker/bind/etc.
!     DIRECTION_ADJUST_RIGHT     = 2,    //Always right.
!     DIRECTION_ADJUST_LEFT      = -2    //Always left.
! } e_direction_adjust;
! 
! typedef enum
! {
!     /*
!     Run adjust_grabposition check on dograb or not.
!     Damon V. Caskey
!     2013-12-30
!     */
! 
!     DOGRAB_ADJUSTCHECK_TRUE,
!     DOGRAB_ADJUSTCHECK_FALSE
! } e_dograb_adjustcheck;
! 
! typedef enum
! {
!     /*
!     Damage over time mode enum.
!     Damon V. Caskey
!     2013-12-27
!     */
! 
!     DOT_MODE_OFF,              //Disable.
!     DOT_MODE_HP,               //Drain HP.
!     DOT_MODE_HP_MP,            //Drain HP and MP.
!     DOT_MODE_MP,               //Drain mp.
!     DOT_MODE_NON_LETHAL_HP,    //Drain HP, but do not kill entity.
!     DOT_MODE_NON_LETHAL_HP_MP  //Drain HP and MP, but do not kill entity.
! } e_dot_mode;
! 
! typedef enum
! {
!     /*
!     Edelay factor modes.
!     2013-12-16
!     Damon V. Caskey
!     */
!     EDELAY_MODE_ADD,       //Factor is added directly to edelay.
!     EDELAY_MODE_MULTIPLY   //Orginal delay value is multiplied by factor.
! } e_edelay_mode;
! 
! typedef enum
! {
!     /*
!     Facing adjustment enum.
!     Damon V. Caskey
!     2013-12-29
!     */
! 
!     FACING_ADJUST_NONE,    //No facing adjustment.
!     FACING_ADJUST_RIGHT,   //Always face right.
!     FACING_ADJUST_LEFT,    //Always face left.
!     FACING_ADJUST_LEVEL    //Face according to level scroll direction.
! } e_facing_adjust;
! 
! typedef enum
! {
!     /*
!     Follow up conditional enumerator.
!     Damon V. Caskey
!     2014-01-04
!     */
! 
!     FOLLOW_CONDITION_DISABLED,                     //No followup (default).
!     FOLLOW_CONDITION_ALWAYS,                       //Always perform.
!     FOLLOW_CONDITION_HOSTILE,                      //Perform if target is hostile.
!     FOLLOW_CONDITION_HOSTILE_NOKILL_NOBLOCK,       //Perform if target is hostile, will not be killed and didn't block.
!     FOLLOW_CONDITION_HOSTILE_NOKILL_NOBLOCK_NOGRAB, //Perform if target is hostile, will not be killed, didn't block, and cannot be grabbed.
!     FOLLOW_CONDITION_HOSTILE_NOKILL_BLOCK,         //Perform if target is hostile, will not be killed and block.
! } e_follow_condition;
! 
! typedef enum
! {
!     /*
!     Komap application enum. When to apply KO map to entity.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     KOMAP_TYPE_IMMEDIATELY,    //Apply instantly.
!     KOMAP_TYPE_LAST_FALL_FRAME //Apply on last frame of fall.
! } e_komap_type;
! 
! typedef enum
! {
!     LE_TYPE_NORMAL,
!     LE_TYPE_CUT_SCENE,
!     LE_TYPE_SELECT_SCREEN,
!     LE_TYPE_SKIP_SELECT
! } e_le_type;
! 
! typedef enum
! {
!     LS_TYPE_NONE,        //No loading screen.
!     LS_TYPE_BOTH,        //Background and status bar.
!     LS_TYPE_BACKGROUND,  //Background only.
!     LS_TYPE_BAR,         //Status bar only.
! } e_loadingScreenType;
! 
! typedef enum
! {
!     /*
!     Model copy flag enum.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     MODEL_NO_COPY           = 0x00000001,   //dont copy anything from original model
!     MODEL_NO_WEAPON_COPY    = 0x00000002,   //dont copy weapon list from original model
!     MODEL_NO_SCRIPT_COPY    = 0x00000004    //don't copy scripts
! } e_model_copy;
! 
! typedef enum
! {
!     MF_NONE,
!     MF_ANIMLIST,
!     MF_COLOURMAP,
!     MF_PALETTE              = 4,
!     MF_WEAPONS              = 8,
!     MF_BRANCH               = 16,
!     MF_ANIMATION            = 32,
!     MF_DEFENSE              = 64,
!     MF_OFF_FACTORS          = 128,
!     MF_SPECIAL              = 256,
!     MF_SMARTBOMB            = 512,
!     MF_SCRIPTS              = 1024,
!     MF_ALL                  = 0x7ff
! } e_ModelFreetype;
! 
! typedef enum
! {
!     /*
!     Over thr ground enum. Controls ability to hit downed targets.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!    OTG_NONE,       //Cannot hit grounded targets.
!    OTG_BOTH,       //Can hit grounded targets.
!    OTG_GROUND_ONLY //Can ONLY hit grounded targets.
! } e_otg;
! 
! typedef enum
! {
!     /*
!     Scroll enum.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     SCROLL_RIGHT        = 2,
!     SCROLL_DOWN			= 4,
!     SCROLL_LEFT			= 8,
!     SCROLL_UP			= 16,
!     SCROLL_BACK			= 1,
!     SCROLL_BOTH			= (SCROLL_BACK|SCROLL_RIGHT),
!     SCROLL_RIGHTLEFT    = SCROLL_BOTH,
!     SCROLL_LEFTRIGHT    = (SCROLL_LEFT|SCROLL_BACK),
!     SCROLL_INWARD       = 32,
!     SCROLL_OUTWARD      = 64,
!     SCROLL_OUTIN		= (SCROLL_OUTWARD|SCROLL_BACK),
!     SCROLL_INOUT		= (SCROLL_INWARD|SCROLL_BACK),
!     SCROLL_UPWARD       = 128,
!     SCROLL_DOWNWARD     = 256
! } e_scroll;
! 
! typedef enum
! {
!     /*
!     Slow motion switch enum.
!     Damon V. Caskey
!     2014-01-21
!     */
! 
!     SLOW_MOTION_OFF,
!     SLOW_MOTION_ON
! } e_slow_motion_enable;
! 
! typedef enum
! {
!     /*
!     Weapon loss type enum.
!     Damon V. Caskey
!     2013-12-29
!     */
! 
!     WEAPLOSS_TYPE_ANY,         //Weapon lost taking any hit.
!     WEAPLOSS_TYPE_KNOCKDOWN,   //Weapon lost on knockdown.
!     WEAPLOSS_TYPE_DEATH,       //Weapon lost on death.
!     WEAPLOSS_TYPE_CHANGE       //weapon is lost only when level ends or character is changed during continue. This depends on the level settings and whether players had weapons on start or not.
! } e_weaploss_type;
! 
! //macros for drawing menu text, fits different font size
! #define _strmidx(f,s, args...) ((videomodes.hRes-font_string_width((f), s, ##args))/2)
! #define _colx(f,c) ((int)(videomodes.hRes/2+(c)*(fontmonowidth((f))+1)))
! #define _liney(f,l) ((int)(videomodes.vRes/2+(l)*(fontheight((f))+1)))
! #define _menutextm(f, l, shift, s, args...) font_printf(_strmidx(f,s, ##args)+(int)((shift)*(fontmonowidth((f))+1)), _liney(f,l), (f), 0, s, ##args)
! #define _menutextmshift(f, l, shift, shiftx, shifty, s, args...) font_printf(_strmidx(f,s, ##args)+(int)((shift)*(fontmonowidth((f))+1))+shiftx, _liney(f,l)+shifty, (f), 0, s, ##args)
! #define _menutext(f, c, l, s, args...) font_printf(_colx(f,c), _liney(f,l), (f), 0, s, ##args)
! #define _menutextshift(f, c, l, shiftx, shifty, s, args...) font_printf(_colx(f,c)+shiftx, _liney(f,l)+shifty, (f), 0, s, ##args)
! 
! //string starts with constant, for animation# series
! #define strclen(s) (sizeof(s)-1)
! #define starts_with(a, b) (strnicmp(a, b, strclen(b))==0)
! #define starts_with_num(a, b) (starts_with(a, b) && (!a[strclen(b)] || (a[strclen(b)] >= '1' && a[strclen(b)] <= '9')))
! #define get_tail_number(n, a, b) \
! n = atoi(a+strclen(b)); \
! if(n<1) n = 1;
! 
! #define lut_mul ((level && current_palette)?(level->blendings[current_palette-1][BLEND_MULTIPLY]):(blendings[BLEND_MULTIPLY]))
! #define lut_screen ((level && current_palette)?(level->blendings[current_palette-1][BLEND_SCREEN]):(blendings[BLEND_SCREEN]))
! #define lut_overlay ((level && current_palette)?(level->blendings[current_palette-1][BLEND_OVERLAY]):(blendings[BLEND_OVERLAY]))
! #define lut_hl ((level && current_palette)?(level->blendings[current_palette-1][BLEND_HARDLIGHT]):(blendings[BLEND_HARDLIGHT]))
! #define lut_dodge ((level && current_palette)?(level->blendings[current_palette-1][BLEND_DODGE]):(blendings[BLEND_DODGE]))
! #define lut_half ((level && current_palette)?(level->blendings[current_palette-1][BLEND_HALF]):(blendings[BLEND_HALF]))
! #define lut ((level && current_palette)?(level->blendings[current_palette-1]):(blendings))
! 
! #define ABS(x) ((x)>0?(x):(-(x)))
! 
! #define set_attacking(e) e->attacking = ATTACKING_PREPARED;\
! 						 e->idling = IDLING_INACTIVE;
! 
! #define set_jumping(e)   e->jumping = 1;\
  						 e->idling = IDLING_INACTIVE; \
! 						 e->ducking = DUCK_INACTIVE;
! 
! #define set_charging(e)  e->charging = 1;\
  						 e->idling = IDLING_INACTIVE; \
! 						 e->ducking = DUCK_INACTIVE;
! 
! #define set_getting(e)   e->getting = 1;\
  						 e->idling = IDLING_INACTIVE; \
! 						 e->ducking = DUCK_INACTIVE;
! 
! #define set_blocking(e)  e->blocking = 1;\
! 						 e->idling = IDLING_INACTIVE;
! 
! #define set_turning(e)  e->turning = 1;\
  						e->idling = IDLING_INACTIVE; \
! 						 e->ducking = DUCK_INACTIVE;
! 
! #define expand_time(e)   if(e->stalltime>0) e->stalltime++;\
! 						 if(e->releasetime>0)e->releasetime++;\
! 						 if(e->nextanim>0)e->nextanim++;\
! 						 if(e->nextthink>0)e->nextthink++;\
! 						 if(e->nextmove>0)e->nextmove++;\
! 						 if(e->magictime>0)e->magictime++;\
! 						 if(e->guardtime>0)e->guardtime++;\
! 						 if(e->toss_time>0)e->toss_time++;\
! 						 if(e->freezetime>0 && (textbox || smartbomber))e->freezetime++;\
! 						 if(e->mpchargetime>0)e->mpchargetime++;\
! 						 if(e->invinctime>0) e->invinctime++;\
! 						 if(e->turntime>0) e->turntime++;\
! 						 if(e->sealtime>0) e->sealtime++;
! /*                       if(e->dot_time>0) e->dot_time++;\
! 						 if(e->dot_cnt>0) e->dot_cnt++;
! */
! 
! #define freezeall        (smartbomber || textbox)
! 
! #define is_projectile(e) (e->modeldata.type == TYPE_SHOT || e->model->subtype == SUBTYPE_ARROW || e->model->subtype == SUBTYPE_BOOMERANG || e->owner)
! 
! #define screeny (level?((level->scrolldir == SCROLL_UP || level->scrolldir == SCROLL_DOWN )? 0:advancey ):0)
! #define screenx (level?advancex:0)
! 
! #define tobounce(e) (e->animation->bounce && diff(0, e->velocity.y) > 1.5 && \
! 					 !((autoland == 1 && e->damage_on_landing.attack_force == -1) || e->damage_on_landing.attack_force == -2))
! 
! #define getpal ((current_palette&&level)?(level->palettes[current_palette-1]):pal)
! 
! #define canbegrabbed(self, other) \
! 		(other->animation->vulnerable[other->animpos] && \
! 		 (!self->animation->move || self->animation->move[self->animpos]->axis.x == 0) && \
! 		 (!self->animation->move || self->animation->move[self->animpos]->axis.z == 0 ) && \
! 		 !(other->nograb || other->invincible || other->link || \
! 		   other->model->animal || inair(other) || \
! 		  (self->modeldata.type == TYPE_PLAYER && other->modeldata.type == TYPE_PLAYER && savedata.mode)))
! 
! #define cangrab(self, other) \
! 		((other->modeldata.antigrab - self->modeldata.grabforce + \
! 		  (other->modeldata.paingrab?(other->modeldata.paingrab-other->inpain):0)<=0) &&\
! 		 canbegrabbed(self, other) && \
! 		 !inair_range(self) && \
! 		 diff(other->position.y, self->position.y) <= T_WALKOFF)
! 		 //diff(other->position.y, self->position.y) <= 0.1)
! 
! #define validanim(e, a) ((e)->modeldata.animation[a]&&(e)->modeldata.animation[a]->numframes)
! 
! #define inScreen ( selectScreen || titleScreen || hallOfFame || gameOver || showComplete || currentScene || enginecreditsScreen || menuScreen || startgameMenu || \
!                   newgameMenu || loadgameMenu || optionsMenu || controloptionsMenu || soundoptionsMenu || videooptionsMenu || systemoptionsMenu )
! 
! //#define     MAX_MOVES             16
! //#define     MAX_MOVE_STEPS        16
  
! #pragma pack(4)
! 
! // Caskey, Damon V.
  // 2014-01-20
! //
! // Axis - Horizontal and lateral only (float).
! typedef struct
! {
!     float x;    // Horizontal axis.
!     float z;    // Lateral axis.
  } s_axis_plane_lateral_float;
  
! // Caskey, Damon V.
  // 2014-01-20
! //
! // Axis - Horizontal and lateral only (int).
! typedef struct
! {
!     int x;    // Horizontal axis.
!     int z;    // Lateral axis.
! } s_axis_plane_lateral_int;
  
! // Caskey, Damon V.
  // 2014-01-20
! //
! // Axis - Horizontal and vertical only (int).
! typedef struct
! {
!     int x;      // Horizontal axis.
!     int y;      // Altitude/Vertical axis.
  } s_axis_plane_vertical_int;
  
  // Caskey, Damon V.
***************
*** 1501,1626 ****
      float x;
      float z;
  } s_edge_range;
! 
! typedef struct
! {
!     /*
!     Min/max cap for integer measurements.
!     2013-12-10
!     Damon Caskey
!     */
! 
!     int max;    //max value.
!     int min;    //min value.
! } s_metric_range;
! 
! typedef struct
! {
!     /*
!     Min/current/max cap for integer measurements.
!     2014-01-20
!     Damon Caskey
!     */
! 
!     int current;    //Current.
!     int max;    //max value.
!     int min;    //min value.
! } s_metric_range_current;
! 
! typedef struct
! {
!     unsigned compatibleversion;
!     char dName[MAX_NAME_LEN]; // Difficulty Name
!     unsigned level; // Level Number
!     unsigned stage; // Stage
!     unsigned pLives[MAX_PLAYERS]; // Player Lives Left
!     unsigned pCredits[MAX_PLAYERS]; // Player Credits Left
!     unsigned pScores[MAX_PLAYERS]; // Player Scores
!     unsigned credits; // Number Of Credits
!     unsigned times_completed;
!     unsigned which_set;
!     //-------------------new strict save features-----------------------
!     int flag; // 0 useless slot 1 only load level number 2 load player info and level
!     char pName[MAX_PLAYERS][MAX_NAME_LEN];   // player names
!     int pSpawnhealth[MAX_PLAYERS];              // hit points left
!     int pSpawnmp[MAX_PLAYERS];                  // magic points left
!     int pWeapnum[MAX_PLAYERS];                  // weapon
!     int pColourmap[MAX_PLAYERS];                // colour map
! 
!     int selectFlag;                             // saved a select.txt infos
!     char allowSelectArgs[MAX_ALLOWSELECT_LEN];      // allowselect arguments
!     char selectMusic[MAX_ARG_LEN];          // select music arguments
!     char selectBackground[MAX_ARG_LEN];     // select background arguments
!     char selectLoad[MAX_SELECT_LOADS][MAX_ARG_LEN];           // select load arguments
!     int selectLoadCount;
!     char selectSkipSelect[MAX_ARG_LEN];     // skipselect arguments
! } s_savelevel;
! 
! typedef struct
! {
!     unsigned compatibleversion;
!     unsigned highsc[10];
!     char hscoren[10][MAX_NAME_LEN];
! } s_savescore;
! 
! typedef struct
! {
!     /*
!     Slow motion struct
!     Damon V. Caskey
!     2014-01-21
!     */
! 
!     int duration;
!     int counter;
!     int toggle;
! } s_slow_motion;
! 
! // Caskey, Damon V.
! // 2011-04-08
! //
! // Delay modifiers before rise or
! // riseattack can take place.
! typedef struct
! {
!     unsigned int rise;               // Time modifier before rise.
!     unsigned int riseattack;         // Time modifier before riseattack.
!     unsigned int riseattack_stall;   // Total stalltime before riseattack.
! } s_staydown;
! 
! // Caskey, Damon V.
! // 2016-10-31
! //
! // Recursive damage structure
! // for attack boxes only.
! typedef struct
! {
!     int             force;  // Damage force per tick.
!     int             index;  // Index.
!     e_dot_mode      mode;   // Mode.
!     int             rate;   // Tick delay.
!     unsigned int    time;   // Time to expire.
! } s_damage_recursive;
! 
! typedef struct
! {
! 	int x;
! 	int y;
! 	int width;
! 	int height;
! 	int z1;
! 	int z2;
! } s_hitbox;
! 
! typedef struct
! {
!     float       blockpower;     // If > unblockable, this attack type is blocked.
!     float       blockthreshold; // Strongest attack from this attack type that can be blocked.
!     float       blockratio;     // % of damage still taken from this attack type when blocked.
!     e_blocktype blocktype;      // Resource drained when attack is blocked.
!     float       factor;         // basic defense factors: damage = damage*defense
!     float       knockdown;      // Knockdowncount (like knockdowncount) for attack type.
!     float       pain;           // Pain factor (like nopain) for defense type.
  } s_defense;
  
  // Caskey, Damon V.
--- 1501,1626 ----
      float x;
      float z;
  } s_edge_range;
! 
! typedef struct
! {
!     /*
!     Min/max cap for integer measurements.
!     2013-12-10
!     Damon Caskey
!     */
! 
!     int max;    //max value.
!     int min;    //min value.
! } s_metric_range;
! 
! typedef struct
! {
!     /*
!     Min/current/max cap for integer measurements.
!     2014-01-20
!     Damon Caskey
!     */
! 
!     int current;    //Current.
!     int max;    //max value.
!     int min;    //min value.
! } s_metric_range_current;
! 
! typedef struct
! {
!     unsigned compatibleversion;
!     char dName[MAX_NAME_LEN]; // Difficulty Name
!     unsigned level; // Level Number
!     unsigned stage; // Stage
!     unsigned pLives[MAX_PLAYERS]; // Player Lives Left
!     unsigned pCredits[MAX_PLAYERS]; // Player Credits Left
!     unsigned pScores[MAX_PLAYERS]; // Player Scores
!     unsigned credits; // Number Of Credits
!     unsigned times_completed;
!     unsigned which_set;
!     //-------------------new strict save features-----------------------
!     int flag; // 0 useless slot 1 only load level number 2 load player info and level
!     char pName[MAX_PLAYERS][MAX_NAME_LEN];   // player names
!     int pSpawnhealth[MAX_PLAYERS];              // hit points left
!     int pSpawnmp[MAX_PLAYERS];                  // magic points left
!     int pWeapnum[MAX_PLAYERS];                  // weapon
!     int pColourmap[MAX_PLAYERS];                // colour map
! 
!     int selectFlag;                             // saved a select.txt infos
!     char allowSelectArgs[MAX_ALLOWSELECT_LEN];      // allowselect arguments
!     char selectMusic[MAX_ARG_LEN];          // select music arguments
!     char selectBackground[MAX_ARG_LEN];     // select background arguments
!     char selectLoad[MAX_SELECT_LOADS][MAX_ARG_LEN];           // select load arguments
!     int selectLoadCount;
!     char selectSkipSelect[MAX_ARG_LEN];     // skipselect arguments
! } s_savelevel;
! 
! typedef struct
! {
!     unsigned compatibleversion;
!     unsigned highsc[10];
!     char hscoren[10][MAX_NAME_LEN];
! } s_savescore;
! 
! typedef struct
! {
!     /*
!     Slow motion struct
!     Damon V. Caskey
!     2014-01-21
!     */
! 
!     int duration;
!     int counter;
!     int toggle;
! } s_slow_motion;
! 
! // Caskey, Damon V.
! // 2011-04-08
! //
! // Delay modifiers before rise or
! // riseattack can take place.
! typedef struct
! {
!     unsigned int rise;               // Time modifier before rise.
!     unsigned int riseattack;         // Time modifier before riseattack.
!     unsigned int riseattack_stall;   // Total stalltime before riseattack.
! } s_staydown;
! 
! // Caskey, Damon V.
! // 2016-10-31
! //
! // Recursive damage structure
! // for attack boxes only.
! typedef struct
! {
!     int             force;  // Damage force per tick.
!     int             index;  // Index.
!     e_dot_mode      mode;   // Mode.
!     int             rate;   // Tick delay.
!     unsigned int    time;   // Time to expire.
! } s_damage_recursive;
! 
! typedef struct
! {
! 	int x;
! 	int y;
! 	int width;
! 	int height;
! 	int z1;
! 	int z2;
! } s_hitbox;
! 
! typedef struct
! {
!     float       blockpower;     // If > unblockable, this attack type is blocked.
!     float       blockthreshold; // Strongest attack from this attack type that can be blocked.
!     float       blockratio;     // % of damage still taken from this attack type when blocked.
!     e_blocktype blocktype;      // Resource drained when attack is blocked.
!     float       factor;         // basic defense factors: damage = damage*defense
!     float       knockdown;      // Knockdowncount (like knockdowncount) for attack type.
!     float       pain;           // Pain factor (like nopain) for defense type.
  } s_defense;
  
  // Caskey, Damon V.
***************
*** 1632,1671 ****
  {
      int attack_force;
      e_attack_types attack_type;
! } s_damage_on_landing;
! 
! // Caskey, Damon V.
! // 2016-10~
! //
! // Collision box for detecting
! // attack boxes.
! typedef struct
! {
!     s_hitbox    *coords;        // Collision box dimensions.
!     s_defense   *defense;       // Defense properties for this collision box only.
!     int         index;          // To enable user tracking of this box's index when multiple instances are in use.
!     int         tag;            // User defined tag for scripts. No hard coded purpose.
! } s_collision_body;
! 
! // Caskey, Damon V.
! // 2016-10~
! //
! // List of collision body boxes
! // per animation frame.
! typedef struct
! {
!     s_collision_body **instance;
! } s_collision_body_list;
! 
! // Collision box for active
! // attacks.
! typedef struct
  {
      bool                blast;              // Attack box active on hit opponent's fall animation.
      bool                steal;              // Add damage to owner's hp.
      bool                ignore_attack_id;   // Ignore attack ID to attack in every frame
!     bool                no_flash;           // Flag to determine if an attack spawns a flash or not
!     bool                no_kill;            // this attack won't kill target (leave 1 HP)
      bool                no_pain;            // No animation reaction on hit.
      int                 attack_drop;        // now be a knock-down factor, how many this attack will knock victim down
      int                 attack_type;        // Reaction animation, death, etc.
--- 1632,1671 ----
  {
      int attack_force;
      e_attack_types attack_type;
! } s_damage_on_landing;
! 
! // Caskey, Damon V.
! // 2016-10~
! //
! // Collision box for detecting
! // attack boxes.
! typedef struct
! {
!     s_hitbox    *coords;        // Collision box dimensions.
!     s_defense   *defense;       // Defense properties for this collision box only.
!     int         index;          // To enable user tracking of this box's index when multiple instances are in use.
!     int         tag;            // User defined tag for scripts. No hard coded purpose.
! } s_collision_body;
! 
! // Caskey, Damon V.
! // 2016-10~
! //
! // List of collision body boxes
! // per animation frame.
! typedef struct
! {
!     s_collision_body **instance;
! } s_collision_body_list;
! 
! // Collision box for active
! // attacks.
! typedef struct
  {
      bool                blast;              // Attack box active on hit opponent's fall animation.
      bool                steal;              // Add damage to owner's hp.
      bool                ignore_attack_id;   // Ignore attack ID to attack in every frame
!     bool                no_flash;           // Flag to determine if an attack spawns a flash or not
!     bool                no_kill;            // this attack won't kill target (leave 1 HP)
      bool                no_pain;            // No animation reaction on hit.
      int                 attack_drop;        // now be a knock-down factor, how many this attack will knock victim down
      int                 attack_type;        // Reaction animation, death, etc.
***************
*** 1677,2244 ****
      int                 seal;               // Disable target's animations with energycost > seal.
      e_otg               otg;                // Over The Ground. Gives ground projectiles the ability to hit lying ents.
      e_direction_adjust  force_direction;    // Adjust target's direction on hit.
!     int                 attack_force;       // Hit point damage attack inflicts.
!     int                 blockflash;         // Custom bflash for each animation, model id
!     int                 blocksound;         // Custom sound for when an attack is blocked
!     int                 forcemap;           // Set target's palette on hit.
!     unsigned int        freezetime;         // Time for target to remain frozen.
!     int                 grab;               // Not a grab as in grapple - behavior on hit for setting target's position
!     int                 guardcost;          // cost for blocking an attack
!     int                 hitflash;           // Custom flash for each animation, model id
!     int                 hitsound;           // Sound effect to be played when attack hits opponent
!     int                 index;              // Possible future support of multiple boxes - it's doubt even if support is added this property will be needed.
!     unsigned int        maptime;            // Time for forcemap to remain in effect.
!     unsigned int        pain_time;          // pain invincible time
!     unsigned int        sealtime;           // Time for seal to remain in effect.
      int                 tag;                // User defined tag for scripts. No hard coded purpose.
      int                 grab_distance;      // Distance used by "grab".
      s_axis_principal_float            dropv;              // Velocity of target if knocked down.
      s_damage_on_landing damage_on_landing;  // Cause damage when target entity lands from fall.
      s_staydown          staydown;           // Modify victum's stayodwn properties.
!     s_damage_recursive  *recursive;         // Set up recursive damage (dot) on hit.
!     s_hitbox            *coords;            // Collision detection coordinates.
! } s_collision_attack;
! 
! // Caskey, Damon V.
! // 2016-10~
! //
! // List of collision attack boxes
! // per animation frame.
! typedef struct
! {
!     s_collision_attack **instance;
! } s_collision_attack_list;
! 
! // Caskey, Damon V.
! // 2013-12-15
! //
! // Last hit structure. Populated each time a collision is detected.
! typedef struct
! {
!     int                 confirm;    // Will engine's default hit handling be used?
      s_axis_principal_float            position;   // X,Y,Z of last hit.
!     s_collision_attack  *attack;    // Collision attacking box.
!     s_collision_body    *body;      // Collision detect box.
! } s_lasthit;
! 
! typedef struct
! {
!     /*
!     Counter action when taking hit.
!     Damon V. Caskey
!     2011-04-01
!     */
! 
!     e_counteraction_condition condition; //Counter conditions.
!     e_counteraction_damage damaged;      //Receive damage from attack.
!     s_metric_range frame;   //Frame range.
! } s_counterrange;
! 
! typedef struct
! {
!     /*
!     HP and/or MP cost to perform special/freespecials.
!     Damon V. Caskey
!     2011-04-01
!     */
! 
!     int cost;           //Amount of energy cost.
!     int disable;        //Disable flag. See check_energy function.
!     e_cost_type mponly; //MPonly type. 0 = MP while available, then HP. 1 = MP only. 2 = HP only.
! } s_energycost;
  
  // Caskey, Damon V.
  // 2011-04-01
  //
  // On frame movement (slide, jump, dive, etc.).
! typedef struct
! {
      unsigned int  frame;      // Frame to perform action.
!     int                 ent;        // Index of entity to spawn.
!     s_axis_principal_float            velocity;   // x,a,z velocity.
! } s_onframe_move;
  
  // Caskey, Damon V.
  // 2018-04-20
  //
  // On frame action, where no movement is needed. (Landing, starting to fall...).
! typedef struct
! {
      unsigned int  frame;  // Frame to perform action.
!     int         ent;        // Index of entity to spawn.
  } s_onframe_set;
! 
! typedef struct
! {
!     /*
!     Animation looping.
!     Damon V. Caskey
!     2011-04-01
!     */
! 
!     s_metric_range frame;   // max = Frame animation reaches before looping, min = Frame animation loops back to.
!     int mode;           // 0 = No loop, 1 = Loop. Redundant after frame additions, but needed for backward compatibility.
! } s_loop;
! 
! typedef struct //2011_04_01, DC: Frame based screen shake functionality.
! {
!     int cnt;        //Repetition count.
!     int framestart; //Frame to start quake.
!     int repeat;     //Repetitons.
!     int v;          //Vertical distance of screen movement (in pixels).
! } s_quakeframe;
  
  // Caskey, Damon V.
  //
  // Distance to target verification for AI running, jumping,
  // following parent, and combo chains for all entity types.
! typedef struct
  {
      s_metric_range base;
      s_metric_range x;
      s_metric_range y;
!     s_metric_range z;
  } s_range;
! 
! typedef struct
! {
!     /*
!     Model/entity level delay modifier.
!     Damon V. Caskey
!     (unknown date) revised 2013-12-16.
!     */
!     s_metric_range cap;
!     float factor;
!     e_edelay_mode mode;
!     s_metric_range range;
! } s_edelay;
! 
! typedef struct
! {
!     /*
!     Follow up animation struct.
!     Damon V. caskey
!     2014-01-04
!     */
  
      unsigned int animation;   // Follow animation to perform.
!     e_follow_condition condition;   // Condition in which follow up will be performed.
  } s_follow;
  
  // Caskey, Damon V.
  // 2014-01-18
  //
! // Projectile spawning.
! typedef struct
  {
!     unsigned int      shootframe;
!     unsigned int      throwframe;
!     unsigned int      tossframe;  // Frame to toss bomb/grenade
!     int                     bomb;       // custbomb;
!     int                     flash;      // custpshotno;
!     int                     knife;      // custknife;
!     s_axis_principal_int  position;   // Location at which projectiles are spawned
      int                     star;       // custstar;
!     int                     boomerang;       // custboomerang;
  } s_projectile;
! 
! typedef struct
! {
      bool                    antigrav;               // This animation ignores gravity.
!     int                     animhits;               // How many consecutive hits have been made? Used for canceling.
!     unsigned int            chargetime;             // charge time for an animation
!     int                     flipframe;              // Turns entities around on the desired frame
      int                     numframes;              // Count of frames in the animation.
      int                     unsummonframe;          // Un-summon the entity
      bool                    attackone;              // Attack hits only one target.
      int                     cancel;                 // Cancel anims with freespecial
!     int                     index;                  // unique id
!     int                     model_index;
      int                     subentity;              // Store the sub-entity's name for further use
      int                     sync;                   // Synchronize frame to previous animation if they matches
      float                   bounce;                 // -tossv/bounce = new tossv
      s_follow                followup;               // Subsequent animation on hit.
      s_loop                  loop;                   // Animation looping. 2011_03_31, DC: Moved to struct.
!     s_projectile            projectile;             // Subentity spawn for knives, stars, bombs, hadoken, etc.
!     s_quakeframe            quakeframe;             // Screen shake effect. 2011_04_01, DC; Moved to struct.
      s_range                 range;                  // Verify distance to target, jump landings, etc.. 2011_04_01, DC: Moved to struct.
      s_axis_principal_int                size;                   // Dimensions (height, width).
      unsigned                *idle;                  // Allow free move
!     int                     *delay;
!     float                   (*platform)[8];         // Now entities can have others land on them
!     int                     *shadow;
!     int                     (*shadow_coords)[2];    // x, z offset of shadow
!     int                     *soundtoplay;           // each frame can have a sound
!     float                   *spawnframe;            // Spawn the subentity as its default type. {frame} {x} {z} {a} {relative?}
!     float                   *starvelocity;          // 3 velocities for the start projectile
!     int                     *sprite;                // sprite[set][framenumber]
!     float                   *summonframe;           // Summon the subentity as an ally, only one though {frame} {x} {z} {a} {relative?}
!     int                     *vulnerable;
!     int                     *weaponframe;           // Specify with a frame when to switch to a weapon model
!     s_collision_attack_list **collision_attack;
!     s_collision_body_list   **collision_body;
      s_counterrange          *counterrange;           // Auto counter attack. 2011_04_01, DC: Moved to struct.
!     s_drawmethod            **drawmethods;
!     s_onframe_set           *dropframe;             // if tossv < 0, this frame will be set
      s_onframe_move          *jumpframe;              // Jumpframe action. 2011_04_01, DC: moved to struct.
      s_onframe_set           *landframe;             // Landing behavior.
      s_energycost            *energycost;            // 1-10-05 to adjust the amount of energy used for specials. 2011_03_31, DC: Moved to struct.
!     s_move                  **move;                 // base = seta, x = move, y = movea, z = movez
      s_axis_plane_vertical_int   **offset;               // original sprite offsets
! } s_anim;
! 
! struct animlist
! {
!     s_anim *anim;
!     struct animlist *next;
! };
! typedef struct animlist s_anim_list;
! s_anim_list *anim_list;
! 
! typedef struct
! {
!     s_axis_plane_vertical_int offset;
!     s_axis_plane_vertical_int size;
!     e_bartype type;
!     e_barorient orientation;
!     int noborder;
!     e_bar_dir direction;
!     int barlayer;
!     int backlayer;
!     int borderlayer;
!     int shadowlayer;
!     int (*colourtable)[11]; //0 default backfill 1-10 foreground colours
! } s_barstatus;
! 
! typedef struct
! {
!     e_loadingScreenType set;    //Loading bar mode.
!     int tf;                     //Font number for "LOADING" text (last element in command, moved here because of alignment)
!     s_axis_plane_vertical_int bar_position;   //Loading bar position.
!     s_axis_plane_vertical_int text_position;  //Loading text position.
!     int bsize;                  // length of bar in pixels
!     int refreshMs;              // modder defined number of milliseconds in which the screen is updated while loading
! } s_loadingbar;
! 
! typedef struct
! {
!     Script         *animation_script;               //system generated script
!     Script         *update_script;                  //execute when update_ents
!     Script         *think_script;                   //execute when entity thinks.
!     Script         *takedamage_script;              //execute when taking damage.
!     Script         *ondeath_script;                 //execute when killed in game.
!     Script         *onkill_script;                  //execute when removed from play.
!     Script         *onpain_script;                  //Execute when put in pain animation.
!     Script         *onfall_script;                  //execute when falling.
!     Script         *inhole_script;                  //execute when yoy're in a hole
!     Script         *onblocks_script;                //execute when blocked by screen.
!     Script         *onblockw_script;                //execute when blocked by wall.
!     Script         *onblockp_script;                //execute when blocked by platform.
!     Script         *onblocko_script;                //execute when blocked by obstacle.
!     Script         *onblockz_script;                //execute when blocked by Z.
!     Script         *onblocka_script;                //execute when "hit head".
!     Script         *onmovex_script;                 //execute when moving along X axis.
!     Script         *onmovez_script;                 //execute when moving along Z axis.
!     Script         *onmovea_script;                 //execute when moving along A axis.
!     Script         *didhit_script;                  //execute when attack hits another.
!     Script         *onspawn_script;                 //execute when spawned.
!     Script         *key_script;                     //execute when entity's player presses a key
!     Script         *didblock_script;                //execute when blocking attack.
!     Script         *ondoattack_script;              //execute when attack passes do_attack checks.
!     Script			*onmodelcopy_script;				//execute when set_model_ex is done
!     Script			*ondraw_script;					//when update_ents is called
! } s_scripts;
! 
! typedef struct
! {
!     /*
!     In game icons added 2005_01_20.
!     2011-04-05
!     Damon V. Caskey
!     */
! 
!     int def; //Default icon.
!     int die; //Health depleted.
!     int get; //Retrieving item.
!     int mphigh; //MP bar icon; at 66% or more (default if other mp icons not used).
!     int mplow; //MP bar icon; at or between 0% and 32%.
!     int mpmed; //MP bar icon; at or between 33% and 65%.
!     int pain; //Taking damage.
!     int usemap;
!     int weapon; //Weapon model.
!     s_axis_plane_vertical_int position;
! } s_icon;
! 
! typedef struct
! {
!     /*
!     Pre defined color map selections and behavior.
!     Damon V. Caskey
!     2011_04_07
!     */
! 
!     int frozen;             //Frozen.
!     int hide_end;           //End range for maps hidden during character selection.
!     int hide_start;         //Start range for maps hidden during character selection.
!     int ko;                 //Health depleted.
!     e_komap_type kotype;   //KO map application.
! } s_maps;
! 
! typedef struct
! {
!     /*
!     Perception distance (range from self AI can detect other entities).
!     Damon V. Caskey
!     2013-12-16
!     */
! 
!     s_axis_principal_int max;   //Maximum.
!     s_axis_principal_int min;   //Minimum.
! } s_sight;
! 
! typedef struct
! {
!     signed char     detect;                         //Invisbility penetration. If self's detect >= target's hide, self can "see" target.
!     signed char     hide;                           //Invisibility to AI.
! } s_stealth;                                        //2011_04_05, DC: Invisibility to AI feature added by DC.
! 
! 
! // WIP
! typedef struct
! {
!     int input[MAX_SPECIAL_INPUTS];
!     int	steps;
!     int numkeys; // num keys pressed
!     int anim;
!     int	cancel;		//should be fine to have 0 if idle is not a valid choice
!     s_metric_range frame;
!     int hits;
!     int valid;		// should not be global unless nosame is set, but anyway...
!     //int (*function)(); //reserved
! } s_com;
! 
! //UT: new bit flags for noquake property
! #define NO_QUAKE 1  //do not make screen quake
! #define NO_QUAKEN 2  //do not quake with screen
! 
! typedef struct
! {
!     /*
!     Dust struct. "Dust" effect entity spawned during certain actions.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     int fall_land;  //Knockdown landing.
!     int jump_land;  //Jump landing.
!     int jump_start; //Jump lift off.
! } s_dust;
! 
! typedef struct
! {
!     int index;
!     char *name;
!     char *path; // Path, so scripts can dynamically get files, sprites, sounds, etc.
!     unsigned score;
!     int health;
!     float scroll; // Autoscroll like panel entity.
!     unsigned offscreenkill;                  // for biker, arrow, etc
!     float offscreen_noatk_factor;
!     int	priority;
!     //unsigned offscreenkillz;
!     //unsigned offscreeenkila;
!     int mp; // mp's variable for mpbar by tails
!     int counter; // counter of weapons by tails
!     unsigned shootnum; // counter of shots by tails
!     unsigned reload; // reload max shots by tails
!     int deduct_ammo; // Used for setting the "a" at which weapons are spawned
!     int typeshot; // see if weapon is a gun or knife by tails
!     int animal; // see is the weapon is a animal by tails
!     int nolife; // Feb 25, 2005 - Variable flag to show life 0 = no, else yes
!     int makeinv; // Option to spawn player invincible >0 blink <0 noblink
!     int riseinv; // how many seconds will the character become invincible after rise >0 blink, <0 noblink
!     int dofreeze; // Flag to freeze all enemies/players while special is executed
!     int noquake; // Flag to make the screen shake when entity lands 1 = no, else yes
!     int ground; // Flag to determine if enemy projectiles only hit the enemy when hitting the ground
!     int multiple; // So you can control how many points are given for hitting opponents
!     int bounce; // Flag to determine if bounce/quake is to be used.
!     e_entity_type type;
!     e_entity_type_sub subtype;
!     s_icon icon; //In game icons added 2005_01_20. 2011_04_05, DC: Moved to struct.
!     int parrow[MAX_PLAYERS][3]; // Image to be displayed when player spawns invincible
!     int setlayer; // Used for forcing enities to be displayed behind
!     int thold; // The entities threshold for block
!     s_maps maps; //2011_04_07, DC: Pre defined color map selections and behavior.
!     int alpha; // New alpha variable to determine if the entity uses alpha transparency
!     int toflip; // Flag to determine if flashes flip or not
!     int shadow;
!     int gfxshadow; // use current frame to create a shadow
!     int shadowbase;
!     int aironly; // Used to determine if shadows will be shown when jumping only
!     int nomove; // Flag for static enemies
!     int noflip; // Flag to determine if static enemies flip or stay facing the same direction
!     int nodrop; // Flag to determine if enemies can be knocked down
!     int nodieblink; // Flag to determine if blinking while playing die animation
!     int holdblock; // Continue the block animation as long as the player holds the button down
!     int nopassiveblock; // Don't auto block randomly
!     int blockback; // Able to block attacks from behind
!     int blockodds; // Odds that an enemy will block an attack (1 : blockodds)
!     s_edelay edelay; // Entity level delay adjustment.
!     float runspeed; // The speed the character runs at
!     float runjumpheight; // The height the character jumps when running
!     float runjumpdist; // The distance the character jumps when running
!     int noatflash; // Flag to determine if attacking characters attack spawns a flash
!     int runupdown; // Flag to determine if a player will continue to run while pressing up or down
!     int runhold; // Flag to determine if a player will continue to run if holding down forward when landing
!     int remove; // Flag to remove a projectile on contact or not
!     float throwheight; // The height at which an opponent can now be adjusted
!     float throwdist; // The distance an opponent can now be adjusted
!     int throwframewait; // The frame victim is thrown during ANIM_THROW, added by kbandressen 10/20/06
!     s_com *special; // Stores freespecials
!     int specials_loaded; // Stores how many specials have been loaded
!     int diesound;
!     int weapnum;
!     int secret;
!     int clearcount;
!     int weaploss[2]; // Determines possibility of losing weapon.
!     int ownweapons; // is the weapon list own or share with others
!     int *weapon; // weapon model list
!     int numweapons;
! 
!     // these are model id of various stuff
!     int project;
!     int rider; // 7-1-2005 now every "biker" can have a new driver!
!     int knife; // 7-1-2005 now every enemy can have their own "knife" projectile
!     int pshotno; // 7-1-2005 now every enemy can have their own "knife" projectile
!     int star; // 7-1-2005 now every enemy can have their own "ninja star" projectiles
      int bomb; // New projectile type for exploding bombs/grenades/dynamite
      int boomerang;
!     s_boomerang_props boomerang_prop;
!     int flash; // Now each entity can have their own flash
!     int bflash; // Flash that plays when an attack is blocked
!     s_dust dust; //Spawn entity during certain actions.
!     s_axis_plane_vertical_int size; // Used to set height of player in pixels
!     float speed;
!     float grabdistance; // 30-12-2004	grabdistance varirable adder per character
!     float pathfindstep; // UT: how long each step if the entity is trying to find a way
!     int grabflip; // Flip target or not, bit0: grabber, bit1: opponent
!     float jumpspeed; // normal jump foward speed, default to max(1, speed)
!     float jumpheight; // 28-12-2004	Jump height variable added per character
!     int jumpmovex; // low byte: 0 default 1 flip in air, 2 move in air, 3 flip and move
!     int jumpmovez; // 2nd byte: 0 default 1 zjump with flip(not implemented yet) 2 z jump move in air, 3 1+2
!     int walkoffmovex; // low byte: 0 default 1 flip in air, 2 move in air, 3 flip and move
!     int walkoffmovez; // 2nd byte: 0 default 1 zjump with flip(not implemented yet) 2 z jump move in air, 3 1+2
!     int grabfinish; // wait for grab animation to finish before do other actoins
!     int antigrab; // anti-grab factor
!     int grabforce; // grab factor, antigrab - grabforce <= 0 means can grab
!     e_facing_adjust facing;
!     int grabback; // Flag to determine if entities grab images display behind opponenets
!     int grabturn;
!     int paingrab; // Can only be grabbed when in pain
!     float grabwalkspeed;
!     int throwdamage; // 1-14-05  adjust throw damage
!     unsigned char  *palette; // original palette for 32/16bit mode
!     unsigned char	**colourmap;
!     int maps_loaded; // Used for player colourmap selecting
!     int unload; // Unload model after level completed?
!     int falldie; // Play die animation?
!     int globalmap; // use global palette for its colour map in 24bit mode
!     int nopain;
!     int summonkill; // kill it's summoned entity when died;  0. dont kill 1. kill summoned only 2. kill all spawned entity
!     int combostyle;
!     int blockpain;
!     int atchain[MAX_ATCHAIN];
!     int chainlength;
!     s_anim **animation;
!     int credit;
!     int escapehits; // Escape spammers!
!     int chargerate; // For the charge animation
!     int guardrate; // Rate for guardpoints recover.
!     int mprate; // For time-based mp recovery.
!     int mpdroprate; // Time based MP loss.
!     int mpstable; // MP stable type.
!     int mpstableval; // MP Stable target.
!     int aggression; // For enemy A.I.
!     s_staydown risetime;
!     unsigned sleepwait;
!     int riseattacktype;
!     s_metric_range_current jugglepoints; // Juggle points feature by OX. 2011_04_05, DC: Moved to struct.
!     s_metric_range_current guardpoints; // Guard points feature by OX. 2011_04_05, DC: Moved to struct.
!     int mpswitch; // switch between reduce or gain mp for mpstabletype 4
!     int turndelay; // turn delay
!     int lifespan; // lifespan count down
!     float knockdowncount; // the knock down count for this entity
!     float attackthrottle; // how often the enemy refuse to attack
!     float attackthrottletime; // how long does the throttle status last
      s_stealth stealth; // Invisibility to AI feature added by DC. 2011_04_05, DC: Moved to struct.
!     s_edge_range edgerange; // Edge range
! 
!     //---------------new A.I. switches-----------
!     int hostile; // specify hostile types
!     int candamage; // specify types that can be damaged by this entity
!     int projectilehit; // specify types that can be hit by this entity if it is thrown
!     unsigned aimove; // move style
!     s_sight sight; // Sight range. 2011_04_05, DC: Moved to struct.
!     unsigned aiattack; // attack/defend style
! 
!     //----------------physical system-------------------
!     float antigravity;                    //antigravity : gravity * (1- antigravity)
! 
!     //--------------new property for endlevel item--------
!     char *branch; //level branch name
!     int model_flag; //used to judge some copy method when setting new model to an entity
! 
!     s_defense *defense; //defense related, make a struct to aid copying
!     float *offense_factors; //basic offense factors: damage = damage*offense
!     s_collision_attack *smartbomb;
! 
!     // e.g., boss
!     s_barstatus hpbarstatus;
!     int hpx;
!     int hpy;
!     int namex;
!     int namey;
! 
!     // movement flags
!     int subject_to_basemap;
!     int subject_to_wall;
!     int subject_to_platform;
!     int subject_to_obstacle;
!     int subject_to_hole;
!     int subject_to_gravity;
!     int subject_to_screen;
!     int subject_to_minz;
!     int subject_to_maxz;
!     int no_adjust_base; // dont change base to 0 automatically
!     int instantitemdeath; // no delay before item suicides
!     int	hasPlatforms;
!     int isSubclassed;
!     int backpain;
!     int nohithead; // used to hit or not a platform with head also when you set a height
!     int hitwalltype; // wall type to toggle hitwall animations
!     e_ModelFreetype freetypes;
!     s_scripts *scripts;
! } s_model;
! 
! typedef struct
! {
!     char *name;
!     char *path;
!     s_model *model;
!     int loadflag;
!     int selectable;
! } s_modelcache;
! s_modelcache *model_cache;
  
  // Caskey, Damon V.
  // 2013-12-08
  //
! // Jumping action setup.
! typedef struct
! {
!     e_animations    animation_id;   // Jumping Animation.
!     s_axis_principal_float        velocity;       // x,a,z velocity setting.
! } s_jump;
  
  
  // Caskey, Damon V.
--- 1677,2246 ----
      int                 seal;               // Disable target's animations with energycost > seal.
      e_otg               otg;                // Over The Ground. Gives ground projectiles the ability to hit lying ents.
      e_direction_adjust  force_direction;    // Adjust target's direction on hit.
!     int                 attack_force;       // Hit point damage attack inflicts.
!     int                 blockflash;         // Custom bflash for each animation, model id
!     int                 blocksound;         // Custom sound for when an attack is blocked
!     int                 forcemap;           // Set target's palette on hit.
!     unsigned int        freezetime;         // Time for target to remain frozen.
!     int                 grab;               // Not a grab as in grapple - behavior on hit for setting target's position
!     int                 guardcost;          // cost for blocking an attack
!     int                 hitflash;           // Custom flash for each animation, model id
!     int                 hitsound;           // Sound effect to be played when attack hits opponent
!     int                 index;              // Possible future support of multiple boxes - it's doubt even if support is added this property will be needed.
!     unsigned int        maptime;            // Time for forcemap to remain in effect.
!     unsigned int        pain_time;          // pain invincible time
!     unsigned int        sealtime;           // Time for seal to remain in effect.
      int                 tag;                // User defined tag for scripts. No hard coded purpose.
      int                 grab_distance;      // Distance used by "grab".
      s_axis_principal_float            dropv;              // Velocity of target if knocked down.
      s_damage_on_landing damage_on_landing;  // Cause damage when target entity lands from fall.
      s_staydown          staydown;           // Modify victum's stayodwn properties.
!     s_damage_recursive  *recursive;         // Set up recursive damage (dot) on hit.
!     s_hitbox            *coords;            // Collision detection coordinates.
! } s_collision_attack;
! 
! // Caskey, Damon V.
! // 2016-10~
! //
! // List of collision attack boxes
! // per animation frame.
! typedef struct
! {
!     s_collision_attack **instance;
! } s_collision_attack_list;
! 
! // Caskey, Damon V.
! // 2013-12-15
! //
! // Last hit structure. Populated each time a collision is detected.
! typedef struct
! {
!     int                 confirm;    // Will engine's default hit handling be used?
      s_axis_principal_float            position;   // X,Y,Z of last hit.
!     s_collision_attack  *attack;    // Collision attacking box.
!     s_collision_body    *body;      // Collision detect box.
! } s_lasthit;
! 
! typedef struct
! {
!     /*
!     Counter action when taking hit.
!     Damon V. Caskey
!     2011-04-01
!     */
! 
!     e_counteraction_condition condition; //Counter conditions.
!     e_counteraction_damage damaged;      //Receive damage from attack.
!     s_metric_range frame;   //Frame range.
! } s_counterrange;
! 
! typedef struct
! {
!     /*
!     HP and/or MP cost to perform special/freespecials.
!     Damon V. Caskey
!     2011-04-01
!     */
! 
!     int cost;           //Amount of energy cost.
!     int disable;        //Disable flag. See check_energy function.
!     e_cost_type mponly; //MPonly type. 0 = MP while available, then HP. 1 = MP only. 2 = HP only.
! } s_energycost;
  
  // Caskey, Damon V.
  // 2011-04-01
  //
  // On frame movement (slide, jump, dive, etc.).
! typedef struct
! {
      unsigned int  frame;      // Frame to perform action.
!     int                 ent;        // Index of entity to spawn.
!     s_axis_principal_float            velocity;   // x,a,z velocity.
! } s_onframe_move;
  
  // Caskey, Damon V.
  // 2018-04-20
  //
  // On frame action, where no movement is needed. (Landing, starting to fall...).
! typedef struct
! {
      unsigned int  frame;  // Frame to perform action.
!     int         ent;        // Index of entity to spawn.
  } s_onframe_set;
! 
! typedef struct
! {
!     /*
!     Animation looping.
!     Damon V. Caskey
!     2011-04-01
!     */
! 
!     s_metric_range frame;   // max = Frame animation reaches before looping, min = Frame animation loops back to.
!     int mode;           // 0 = No loop, 1 = Loop. Redundant after frame additions, but needed for backward compatibility.
! } s_loop;
! 
! typedef struct //2011_04_01, DC: Frame based screen shake functionality.
! {
!     int cnt;        //Repetition count.
!     int framestart; //Frame to start quake.
!     int repeat;     //Repetitons.
!     int v;          //Vertical distance of screen movement (in pixels).
! } s_quakeframe;
  
  // Caskey, Damon V.
  //
  // Distance to target verification for AI running, jumping,
  // following parent, and combo chains for all entity types.
! typedef struct
  {
      s_metric_range base;
      s_metric_range x;
      s_metric_range y;
!     s_metric_range z;
  } s_range;
! 
! typedef struct
! {
!     /*
!     Model/entity level delay modifier.
!     Damon V. Caskey
!     (unknown date) revised 2013-12-16.
!     */
!     s_metric_range cap;
!     float factor;
!     e_edelay_mode mode;
!     s_metric_range range;
! } s_edelay;
! 
! typedef struct
! {
!     /*
!     Follow up animation struct.
!     Damon V. caskey
!     2014-01-04
!     */
  
      unsigned int animation;   // Follow animation to perform.
!     e_follow_condition condition;   // Condition in which follow up will be performed.
  } s_follow;
  
  // Caskey, Damon V.
  // 2014-01-18
  //
! // Projectile spawning.
! typedef struct
  {
!     unsigned int      shootframe;
!     unsigned int      throwframe;
!     unsigned int      tossframe;  // Frame to toss bomb/grenade
!     int                     bomb;       // custbomb;
!     int                     flash;      // custpshotno;
!     int                     knife;      // custknife;
!     s_axis_principal_int  position;   // Location at which projectiles are spawned
      int                     star;       // custstar;
!     int                     boomerang;       // custboomerang;
  } s_projectile;
! 
! typedef struct
! {
      bool                    antigrav;               // This animation ignores gravity.
!     int                     animhits;               // How many consecutive hits have been made? Used for canceling.
!     unsigned int            chargetime;             // charge time for an animation
!     int                     flipframe;              // Turns entities around on the desired frame
      int                     numframes;              // Count of frames in the animation.
      int                     unsummonframe;          // Un-summon the entity
      bool                    attackone;              // Attack hits only one target.
      int                     cancel;                 // Cancel anims with freespecial
!     int                     index;                  // unique id
!     int                     model_index;
      int                     subentity;              // Store the sub-entity's name for further use
      int                     sync;                   // Synchronize frame to previous animation if they matches
      float                   bounce;                 // -tossv/bounce = new tossv
      s_follow                followup;               // Subsequent animation on hit.
      s_loop                  loop;                   // Animation looping. 2011_03_31, DC: Moved to struct.
!     s_projectile            projectile;             // Subentity spawn for knives, stars, bombs, hadoken, etc.
!     s_quakeframe            quakeframe;             // Screen shake effect. 2011_04_01, DC; Moved to struct.
      s_range                 range;                  // Verify distance to target, jump landings, etc.. 2011_04_01, DC: Moved to struct.
      s_axis_principal_int                size;                   // Dimensions (height, width).
      unsigned                *idle;                  // Allow free move
!     int                     *delay;
!     float                   (*platform)[8];         // Now entities can have others land on them
!     int                     *shadow;
!     int                     (*shadow_coords)[2];    // x, z offset of shadow
!     int                     *soundtoplay;           // each frame can have a sound
!     float                   *spawnframe;            // Spawn the subentity as its default type. {frame} {x} {z} {a} {relative?}
!     float                   *starvelocity;          // 3 velocities for the start projectile
!     int                     *sprite;                // sprite[set][framenumber]
!     float                   *summonframe;           // Summon the subentity as an ally, only one though {frame} {x} {z} {a} {relative?}
!     int                     *vulnerable;
!     int                     *weaponframe;           // Specify with a frame when to switch to a weapon model
!     s_collision_attack_list **collision_attack;
!     s_collision_body_list   **collision_body;
      s_counterrange          *counterrange;           // Auto counter attack. 2011_04_01, DC: Moved to struct.
!     s_drawmethod            **drawmethods;
!     s_onframe_set           *dropframe;             // if tossv < 0, this frame will be set
      s_onframe_move          *jumpframe;              // Jumpframe action. 2011_04_01, DC: moved to struct.
      s_onframe_set           *landframe;             // Landing behavior.
      s_energycost            *energycost;            // 1-10-05 to adjust the amount of energy used for specials. 2011_03_31, DC: Moved to struct.
!     s_move                  **move;                 // base = seta, x = move, y = movea, z = movez
      s_axis_plane_vertical_int   **offset;               // original sprite offsets
! } s_anim;
! 
! struct animlist
! {
!     s_anim *anim;
!     struct animlist *next;
! };
! typedef struct animlist s_anim_list;
! s_anim_list *anim_list;
! 
! typedef struct
! {
!     s_axis_plane_vertical_int offset;
!     s_axis_plane_vertical_int size;
!     e_bartype type;
!     e_barorient orientation;
!     int noborder;
!     e_bar_dir direction;
!     int barlayer;
!     int backlayer;
!     int borderlayer;
!     int shadowlayer;
!     int (*colourtable)[11]; //0 default backfill 1-10 foreground colours
! } s_barstatus;
! 
! typedef struct
! {
!     e_loadingScreenType set;    //Loading bar mode.
!     int tf;                     //Font number for "LOADING" text (last element in command, moved here because of alignment)
!     s_axis_plane_vertical_int bar_position;   //Loading bar position.
!     s_axis_plane_vertical_int text_position;  //Loading text position.
!     int bsize;                  // length of bar in pixels
!     int refreshMs;              // modder defined number of milliseconds in which the screen is updated while loading
! } s_loadingbar;
! 
! typedef struct
! {
!     Script         *animation_script;               //system generated script
!     Script         *update_script;                  //execute when update_ents
!     Script         *think_script;                   //execute when entity thinks.
!     Script         *takedamage_script;              //execute when taking damage.
!     Script         *ondeath_script;                 //execute when killed in game.
!     Script         *onkill_script;                  //execute when removed from play.
!     Script         *onpain_script;                  //Execute when put in pain animation.
!     Script         *onfall_script;                  //execute when falling.
!     Script         *inhole_script;                  //execute when yoy're in a hole
!     Script         *onblocks_script;                //execute when blocked by screen.
!     Script         *onblockw_script;                //execute when blocked by wall.
!     Script         *onblockp_script;                //execute when blocked by platform.
!     Script         *onblocko_script;                //execute when blocked by obstacle.
!     Script         *onblockz_script;                //execute when blocked by Z.
!     Script         *onblocka_script;                //execute when "hit head".
!     Script         *onmovex_script;                 //execute when moving along X axis.
!     Script         *onmovez_script;                 //execute when moving along Z axis.
!     Script         *onmovea_script;                 //execute when moving along A axis.
!     Script         *didhit_script;                  //execute when attack hits another.
!     Script         *onspawn_script;                 //execute when spawned.
!     Script         *key_script;                     //execute when entity's player presses a key
!     Script         *didblock_script;                //execute when blocking attack.
!     Script         *ondoattack_script;              //execute when attack passes do_attack checks.
!     Script			*onmodelcopy_script;				//execute when set_model_ex is done
!     Script			*ondraw_script;					//when update_ents is called
! } s_scripts;
! 
! typedef struct
! {
!     /*
!     In game icons added 2005_01_20.
!     2011-04-05
!     Damon V. Caskey
!     */
! 
!     int def; //Default icon.
!     int die; //Health depleted.
!     int get; //Retrieving item.
!     int mphigh; //MP bar icon; at 66% or more (default if other mp icons not used).
!     int mplow; //MP bar icon; at or between 0% and 32%.
!     int mpmed; //MP bar icon; at or between 33% and 65%.
!     int pain; //Taking damage.
!     int usemap;
!     int weapon; //Weapon model.
!     s_axis_plane_vertical_int position;
! } s_icon;
! 
! typedef struct
! {
!     /*
!     Pre defined color map selections and behavior.
!     Damon V. Caskey
!     2011_04_07
!     */
! 
!     int frozen;             //Frozen.
!     int hide_end;           //End range for maps hidden during character selection.
!     int hide_start;         //Start range for maps hidden during character selection.
!     int ko;                 //Health depleted.
!     e_komap_type kotype;   //KO map application.
! } s_maps;
! 
! typedef struct
! {
!     /*
!     Perception distance (range from self AI can detect other entities).
!     Damon V. Caskey
!     2013-12-16
!     */
! 
!     s_axis_principal_int max;   //Maximum.
!     s_axis_principal_int min;   //Minimum.
! } s_sight;
! 
! typedef struct
! {
!     signed char     detect;                         //Invisbility penetration. If self's detect >= target's hide, self can "see" target.
!     signed char     hide;                           //Invisibility to AI.
! } s_stealth;                                        //2011_04_05, DC: Invisibility to AI feature added by DC.
! 
! 
! // WIP
! typedef struct
! {
!     int input[MAX_SPECIAL_INPUTS];
!     int	steps;
!     int numkeys; // num keys pressed
!     int anim;
!     int	cancel;		//should be fine to have 0 if idle is not a valid choice
!     s_metric_range frame;
!     int hits;
!     int valid;		// should not be global unless nosame is set, but anyway...
!     //int (*function)(); //reserved
! } s_com;
! 
! //UT: new bit flags for noquake property
! #define NO_QUAKE 1  //do not make screen quake
! #define NO_QUAKEN 2  //do not quake with screen
! 
! typedef struct
! {
!     /*
!     Dust struct. "Dust" effect entity spawned during certain actions.
!     Damon V. Caskey
!     2013-12-28
!     */
! 
!     int fall_land;  //Knockdown landing.
!     int jump_land;  //Jump landing.
!     int jump_start; //Jump lift off.
! } s_dust;
! 
! typedef struct
! {
!     int index;
!     char *name;
!     char *path; // Path, so scripts can dynamically get files, sprites, sounds, etc.
!     unsigned score;
!     int health;
!     float scroll; // Autoscroll like panel entity.
!     unsigned offscreenkill;                  // for biker, arrow, etc
!     float offscreen_noatk_factor;
!     int	priority;
!     //unsigned offscreenkillz;
!     //unsigned offscreeenkila;
!     int mp; // mp's variable for mpbar by tails
!     int counter; // counter of weapons by tails
!     unsigned shootnum; // counter of shots by tails
!     unsigned reload; // reload max shots by tails
!     int deduct_ammo; // Used for setting the "a" at which weapons are spawned
!     int typeshot; // see if weapon is a gun or knife by tails
!     int animal; // see is the weapon is a animal by tails
!     int nolife; // Feb 25, 2005 - Variable flag to show life 0 = no, else yes
!     int makeinv; // Option to spawn player invincible >0 blink <0 noblink
!     int riseinv; // how many seconds will the character become invincible after rise >0 blink, <0 noblink
!     int dofreeze; // Flag to freeze all enemies/players while special is executed
!     int noquake; // Flag to make the screen shake when entity lands 1 = no, else yes
!     int ground; // Flag to determine if enemy projectiles only hit the enemy when hitting the ground
!     int multiple; // So you can control how many points are given for hitting opponents
!     int bounce; // Flag to determine if bounce/quake is to be used.
!     e_entity_type type;
!     e_entity_type_sub subtype;
!     s_icon icon; //In game icons added 2005_01_20. 2011_04_05, DC: Moved to struct.
!     int parrow[MAX_PLAYERS][3]; // Image to be displayed when player spawns invincible
!     int setlayer; // Used for forcing enities to be displayed behind
!     int thold; // The entities threshold for block
!     s_maps maps; //2011_04_07, DC: Pre defined color map selections and behavior.
!     int alpha; // New alpha variable to determine if the entity uses alpha transparency
!     int toflip; // Flag to determine if flashes flip or not
!     int shadow;
!     int gfxshadow; // use current frame to create a shadow
!     int shadowbase;
!     int aironly; // Used to determine if shadows will be shown when jumping only
!     int nomove; // Flag for static enemies
!     int noflip; // Flag to determine if static enemies flip or stay facing the same direction
!     int nodrop; // Flag to determine if enemies can be knocked down
!     int nodieblink; // Flag to determine if blinking while playing die animation
!     int holdblock; // Continue the block animation as long as the player holds the button down
!     int nopassiveblock; // Don't auto block randomly
!     int blockback; // Able to block attacks from behind
!     int blockodds; // Odds that an enemy will block an attack (1 : blockodds)
!     s_edelay edelay; // Entity level delay adjustment.
!     float runspeed; // The speed the character runs at
!     float runjumpheight; // The height the character jumps when running
!     float runjumpdist; // The distance the character jumps when running
!     int noatflash; // Flag to determine if attacking characters attack spawns a flash
!     int runupdown; // Flag to determine if a player will continue to run while pressing up or down
!     int runhold; // Flag to determine if a player will continue to run if holding down forward when landing
!     int remove; // Flag to remove a projectile on contact or not
!     float throwheight; // The height at which an opponent can now be adjusted
!     float throwdist; // The distance an opponent can now be adjusted
!     int throwframewait; // The frame victim is thrown during ANIM_THROW, added by kbandressen 10/20/06
!     s_com *special; // Stores freespecials
!     int specials_loaded; // Stores how many specials have been loaded
!     int diesound;
!     int weapnum;
!     int secret;
!     int clearcount;
!     int weaploss[2]; // Determines possibility of losing weapon.
!     int ownweapons; // is the weapon list own or share with others
!     int *weapon; // weapon model list
!     int numweapons;
! 
!     // these are model id of various stuff
!     int project;
!     int rider; // 7-1-2005 now every "biker" can have a new driver!
!     int knife; // 7-1-2005 now every enemy can have their own "knife" projectile
!     int pshotno; // 7-1-2005 now every enemy can have their own "knife" projectile
!     int star; // 7-1-2005 now every enemy can have their own "ninja star" projectiles
      int bomb; // New projectile type for exploding bombs/grenades/dynamite
      int boomerang;
!     s_boomerang_props boomerang_prop;
!     int flash; // Now each entity can have their own flash
!     int bflash; // Flash that plays when an attack is blocked
!     s_dust dust; //Spawn entity during certain actions.
!     s_axis_plane_vertical_int size; // Used to set height of player in pixels
!     float speed;
!     float grabdistance; // 30-12-2004	grabdistance varirable adder per character
!     float pathfindstep; // UT: how long each step if the entity is trying to find a way
!     int grabflip; // Flip target or not, bit0: grabber, bit1: opponent
!     float jumpspeed; // normal jump foward speed, default to max(1, speed)
!     float jumpheight; // 28-12-2004	Jump height variable added per character
!     int jumpmovex; // low byte: 0 default 1 flip in air, 2 move in air, 3 flip and move
!     int jumpmovez; // 2nd byte: 0 default 1 zjump with flip(not implemented yet) 2 z jump move in air, 3 1+2
!     int walkoffmovex; // low byte: 0 default 1 flip in air, 2 move in air, 3 flip and move
!     int walkoffmovez; // 2nd byte: 0 default 1 zjump with flip(not implemented yet) 2 z jump move in air, 3 1+2
!     int grabfinish; // wait for grab animation to finish before do other actoins
!     int antigrab; // anti-grab factor
!     int grabforce; // grab factor, antigrab - grabforce <= 0 means can grab
!     e_facing_adjust facing;
!     int grabback; // Flag to determine if entities grab images display behind opponenets
!     int grabturn;
!     int paingrab; // Can only be grabbed when in pain
!     float grabwalkspeed;
!     int throwdamage; // 1-14-05  adjust throw damage
!     unsigned char  *palette; // original palette for 32/16bit mode
!     unsigned char	**colourmap;
!     int maps_loaded; // Used for player colourmap selecting
!     int unload; // Unload model after level completed?
!     int falldie; // Play die animation?
!     int globalmap; // use global palette for its colour map in 24bit mode
!     int nopain;
!     int summonkill; // kill it's summoned entity when died;  0. dont kill 1. kill summoned only 2. kill all spawned entity
!     int combostyle;
!     int blockpain;
!     int atchain[MAX_ATCHAIN];
!     int chainlength;
!     s_anim **animation;
!     int credit;
!     int escapehits; // Escape spammers!
!     int chargerate; // For the charge animation
!     int guardrate; // Rate for guardpoints recover.
!     int mprate; // For time-based mp recovery.
!     int mpdroprate; // Time based MP loss.
!     int mpstable; // MP stable type.
!     int mpstableval; // MP Stable target.
!     int aggression; // For enemy A.I.
!     s_staydown risetime;
!     unsigned sleepwait;
!     int riseattacktype;
!     s_metric_range_current jugglepoints; // Juggle points feature by OX. 2011_04_05, DC: Moved to struct.
!     s_metric_range_current guardpoints; // Guard points feature by OX. 2011_04_05, DC: Moved to struct.
!     int mpswitch; // switch between reduce or gain mp for mpstabletype 4
!     int turndelay; // turn delay
!     int lifespan; // lifespan count down
!     float knockdowncount; // the knock down count for this entity
!     float attackthrottle; // how often the enemy refuse to attack
!     float attackthrottletime; // how long does the throttle status last
      s_stealth stealth; // Invisibility to AI feature added by DC. 2011_04_05, DC: Moved to struct.
!     s_edge_range edgerange; // Edge range
! 
!     //---------------new A.I. switches-----------
!     int hostile; // specify hostile types
!     int candamage; // specify types that can be damaged by this entity
!     int projectilehit; // specify types that can be hit by this entity if it is thrown
!     unsigned aimove; // move style
!     s_sight sight; // Sight range. 2011_04_05, DC: Moved to struct.
!     unsigned aiattack; // attack/defend style
! 
!     //----------------physical system-------------------
!     float antigravity;                    //antigravity : gravity * (1- antigravity)
! 
!     //--------------new property for endlevel item--------
!     char *branch; //level branch name
!     int model_flag; //used to judge some copy method when setting new model to an entity
! 
!     s_defense *defense; //defense related, make a struct to aid copying
!     float *offense_factors; //basic offense factors: damage = damage*offense
!     s_collision_attack *smartbomb;
! 
!     // e.g., boss
!     s_barstatus hpbarstatus;
!     int hpx;
!     int hpy;
!     int namex;
!     int namey;
! 
!     // movement flags
!     int subject_to_basemap;
!     int subject_to_wall;
!     int subject_to_platform;
!     int subject_to_obstacle;
!     int subject_to_hole;
!     int subject_to_gravity;
!     int subject_to_screen;
!     int subject_to_minz;
!     int subject_to_maxz;
!     int no_adjust_base; // dont change base to 0 automatically
!     int instantitemdeath; // no delay before item suicides
!     int	hasPlatforms;
!     int isSubclassed;
!     int backpain;
!     int nohithead; // used to hit or not a platform with head also when you set a height
!     int hitwalltype; // wall type to toggle hitwall animations
!     e_ModelFreetype freetypes;
!     s_scripts *scripts;
! 	
! 	int selectcol; //almacena la columna que usar√° el personaje en la pantalla de selecci√≥n.
! } s_model;
! 
! typedef struct
! {
!     char *name;
!     char *path;
!     s_model *model;
!     int loadflag;
!     int selectable;
! } s_modelcache;
! s_modelcache *model_cache;
  
  // Caskey, Damon V.
  // 2013-12-08
  //
! // Jumping action setup.
! typedef struct
! {
!     e_animations    animation_id;   // Jumping Animation.
!     s_axis_principal_float        velocity;       // x,a,z velocity setting.
! } s_jump;
  
  
  // Caskey, Damon V.
***************
*** 2246,2272 ****
  //
  // Binding struct. Control linking
  // of entity to a target entity.
! typedef struct
! {
      unsigned int      ani_bind;       // Animation binding type.
      int               sortid;         // Relative binding sortid. Default = -1
      s_axis_principal_int bind_toggle;    // Toggle binding on X, Y and Z axis.
!     s_axis_principal_int  offset;         // x,y,z offset.
      e_direction_adjust      direction;      // Direction force
!     struct entity *ent;                     // Entity to bind.
  } s_bind;
! 
! typedef struct
! {
!     /*
!     Rush combo struct.
!     Damon V. Caskey
!     2013-12-17
!     */
! 
!     s_metric_range_current count;   //Hits counter.
!     u32 time;           //Time to perform combo.
! } s_rush;
  
  typedef struct
  {
--- 2248,2274 ----
  //
  // Binding struct. Control linking
  // of entity to a target entity.
! typedef struct
! {
      unsigned int      ani_bind;       // Animation binding type.
      int               sortid;         // Relative binding sortid. Default = -1
      s_axis_principal_int bind_toggle;    // Toggle binding on X, Y and Z axis.
!     s_axis_principal_int  offset;         // x,y,z offset.
      e_direction_adjust      direction;      // Direction force
!     struct entity *ent;                     // Entity to bind.
  } s_bind;
! 
! typedef struct
! {
!     /*
!     Rush combo struct.
!     Damon V. Caskey
!     2013-12-17
!     */
! 
!     s_metric_range_current count;   //Hits counter.
!     u32 time;           //Time to perform combo.
! } s_rush;
  
  typedef struct
  {
***************
*** 2284,2901 ****
  typedef struct
  {
      int alpha;                      // int itemmap alpha effect of item
!     int colorset;                   // int itemmap; // Now items spawned can have their properties changed
      int health;                     // int itemhealth; // Now items spawned can have their properties changed
!     int index;                      // int itemindex; // item model index
      int player_count;               // int itemplayer_count;
      char alias[MAX_NAME_LEN];   // char itemalias[MAX_NAME_LEN]; // Now items spawned can have their properties changed
  } s_item_properties;
  
  
! typedef struct entity
! {
!     e_spawn_type        spawntype;              // Type of spawn (level spawn, script spawn, ...)
!     bool                exists;                 // flag to determine if it is a valid entity.
!     bool                deduct_ammo;            // Check for ammo count?
!     e_projectile_prime  projectile_prime;       // If this entity is a projectile, several priming values go here to set up its behavior.
!     int                 playerindex;            // Player controlling the entity.
      s_energy_status     energy_status;          // Health and MP.
!     char                name[MAX_NAME_LEN]; // this is display name
!     s_model             *defaultmodel;          // this is the default model
!     s_model             *model;                 // current model
      s_model             modeldata;              // model data copied here
      s_item_properties   *item_properties;       // Properties copied to an item entity when it is dropped.
!     bool boss;
!     unsigned int dying;   // Corresponds with which remap is to be used for the dying flash
!     unsigned int dying2;  // Corresponds with which remap is to be used for the dying flash for per2
!     unsigned int per1;    // Used to store at what health value the entity begins to flash
!     unsigned int per2;    // Used to store at what health value the entity flashes more rapidly
!     unsigned int boomerang_loop;  // Count of boomerang passes.
!     e_direction direction;
!     int nograb; // Some enemies cannot be grabbed (bikes) - now used with cantgrab as well
!     int nograb_default; // equal to nograb  but this is remain the default value setetd in entity txt file (by White Dragon)
!     int movestep;
!     s_axis_principal_float position; //x,y,z location.
!     s_axis_principal_float velocity; //x,y,z movement speed.
!     float destx; // temporary values for ai functions
!     float destz;
!     float movex;
!     float movez;
!     float speedmul;
!     float base;     // Default altitude
!     float altbase; // Altitude affected by movea
!     s_jump jump;    //Jumping velocity and id.
!     unsigned combostep[MAX_SPECIAL_INPUTS];  // merge into an array to clear up some code
! 
!     // ---------------------- action times -------------------------------
!     u32	lastmove;
!     u32 lastdir;
!     u32 timestamp;
!     u32 releasetime;
!     u32 toss_time; // Used by gravity code
!     u32 nextmove;
!     u32 stalltime;
!     u32 combotime; // For multiple-hit combo
!     u32 movetime; // For special move
!     u32 freezetime; // Used to store at what point the a frozen entity becomes unfrozen
!     u32 maptime; // used by forcemap
!     u32 sealtime; // used by seal (stops special moves).
!     u32 dot_time[MAX_DOTS]; //Dot time to expire.
!     int dot[MAX_DOTS]; //Dot mode.
!     int dot_atk[MAX_DOTS]; //Dot attack type.
!     int dot_force[MAX_DOTS]; //Dot amount.
!     int dot_rate[MAX_DOTS]; //Dot delay per tick.
!     int dot_cnt[MAX_DOTS]; //Dot time of next tick.
!     struct entity *dot_owner[MAX_DOTS]; //Dot owner.
!     u32 magictime;
!     u32 guardtime;
!     u32 nextanim;
!     u32 nextthink;
!     u32 nextattack;
!     u32 pain_time;
!     u32 pausetime; // 2012/4/30 UT: Remove lastanimpos and add this. Otherwise hit pause is always bound to frame and attack box.
!     u32 mpchargetime; // For the CHARGE animation
!     u32 sleeptime; // For the SLEEP animation
!     u32 knockdowntime; // count knock down hit
!     u32 invinctime; // Used to set time for invincibility to expire
!     u32 turntime;
!     s_staydown staydown; //Delay modifiers before rise or riseattack can take place. 2011_04_08, DC: moved to struct.
!     // -------------------------end of times ------------------------------
!     int update_mark;
! 
!     //------------------------- a lot of flags ---------------------------
! 
!     int seal; //1 = No specials.
!     int dead;
!     int jumping; // Stuff useful for AI
!     int idling;
!     int walking;
!     int drop;
!     e_attacking_state attacking;
!     int getting;
!     int turning;
!     bool charging;
!     unsigned int blocking;
!     int falling;
      int running; // Flag to determine if a player is running
!     int ducking; // in duck stance
!     int grabwalking; // a flag for grabwalk check
!     int inpain; // playing pain animation
      int inbackpain; // playing back pain/fall/rise/riseattack/die animation
      int rising; // playing rise animation
      int riseattacking; // playing rise attack animation
!     int edge; // in edge (unbalanced)
!     int normaldamageflipdir; // used to reset backpain direction
!     int frozen; // Flag to determine if an entity is frozen
!     bool blink;
!     int invincible; // Flag used to determine if player is currently invincible
!     int autokill; // Kill on end animation
!     int remove_on_attack;
!     int tocost; // Flag to determine if special costs life if doesn't hit an enemy
!     int noaicontrol; // pause A.I. control
!     int projectile;
!     int toexplode; // Needed to determine if the projectile is a type that will explode (bombs, dynamite, etc)
!     int animating; // Set by animation code can be -1, 0 or 1 (used for reverse animation)
!     bool arrowon; // Flag to display parrow/parrow2 or not
!     unsigned pathblocked;
!     s_axis_principal_float *waypoints;
!     int numwaypoints;
!     unsigned int animpos; // Current animation frame.
      unsigned int animnum; // animation id.
!     unsigned int prevanimnum; // previous animation id.
!     s_anim *animation;
      float knockdowncount;
      s_damage_on_landing damage_on_landing;
!     int die_on_landing; // flag for damageonlanding (active if self->health <= 0)
!     int last_damage_type; // used for set death animation or pain animation
!     int map; // Stores the colourmap for restoring purposes
!     void (*think)();
!     void (*takeaction)();
!     int (*takedamage)(struct entity *, s_collision_attack *, int);
!     int (*trymove)(float, float);
      unsigned int attack_id_incoming;
!     unsigned int attack_id_outgoing;
!     int hitwall; // == 1 in the instant that hit the wall/platform/obstacle, else == 0
!     unsigned char *colourmap;
!     //struct entity   *thrower;
!     struct entity *link; // Used to link 2 entities together.
!     struct entity *owner; // Added for "hitenemy" flag so projectile recognizes its owner
!     struct entity *grabbing; // Added for "platform level" layering
!     struct entity *weapent;
!     struct entity *parent; //Its spawner
!     struct entity *subentity; //store the sub entity
!     struct entity *opponent;
!     struct entity *custom_target; // target forced by modder via script
!     struct entity *lasthit;
!     struct entity *hithead; // when a player jumps and hits head on the bottom of a platform
!     struct entity *landed_on_platform;
!     s_bind binding;
!     int escapecount; // For escapehits
!     s_rush rush;    //Rush combo display.
!     int lifespancountdown; // life span count down
! 
!     //------------- copy them from model to avoid global effect -------------
!     s_defense *defense;
!     float *offense_factors;
! 
!     int idlemode;
!     int walkmode;
! 
!     int sortid; // id for sprite queue sort
!     Varlist *varlist;
!     s_drawmethod drawmethod;
!     s_scripts *scripts;
! } entity;
! 
! 
! typedef struct
! {
!     char name[MAX_NAME_LEN];
!     int colourmap;
!     unsigned score;
!     unsigned lives;
!     unsigned credits;
!     entity *ent;
!     u64 keys;
!     u64 newkeys;
!     u64 playkeys;
!     u64 releasekeys;
!     u32 combokey[MAX_SPECIAL_INPUTS];
!     u32 inputtime[MAX_SPECIAL_INPUTS];
!     u64 disablekeys;
!     u64 prevkeys; // used for play/rec mode
!     int combostep;
!     int spawnhealth;
!     int spawnmp;
!     int joining;
!     int hasplayed;
      int weapnum;
!     int status;
! } s_player;
! 
! typedef struct
! {
!     int at;
!     int wait;
!     int nojoin; // dont allow new hero to join
!     int spawnplayer_count; // spawn this entity according to the amount of players
!     int palette; //change system palette to ...
!     int groupmin;
!     int groupmax;
!     int scrollminz; // new scroll limit
!     int scrollmaxz;
!     int scrollminx; // new scroll limit
!     int scrollmaxx;
!     int blockade; //limit how far you can go back
!     s_axis_plane_vertical_int light; // light direction, for gfx shadow
!     int shadowcolor; // -1 no shadow
!     int shadowalpha;
!     int shadowopacity;
!     char music[MAX_BUFFER_LEN];
!     float musicfade;
!     u32 musicoffset;
!     char *name; // must be a name in the model list, so just reference
!     int index; // model index
!     int weaponindex; // the spawned entity with an weapon item, this is the index of the item model
!     int alpha; // Used for alpha effects
!     int boss;
!     int flip;
!     int colourmap;
!     int dying; // Used for the dying flash animation
!     int dying2; // Used for the dying flash animation health 25% (optional)
!     unsigned per1; // Used to store at what health value the entity begins to flash
!     unsigned per2; // Used to store at what health value the entity flashes more rapidly
!     int nolife; // So nolife can be overriden for all characters
!     s_item_properties item_properties; // Alias, health, index, etc. for items.
      char *item; // must be a name in the model list, so just reference
!     s_model *itemmodel;
!     s_model *model;
!     char alias[MAX_NAME_LEN];
!     int health[MAX_PLAYERS];
!     int mp; // mp's variable for mpbar by tails
!     unsigned score; // So score can be overridden for enemies/obstacles
!     int multiple; // So score can be overridden for enemies/obstacles
!     s_axis_principal_float position;  //x, y, z location.
!     unsigned credit;
!     int aggression; // For enemy A.I.
!     int spawntype; // Pass 1 when a level spawn.
!     int entitytype; // if it's a enemy, player etc..
!     entity *parent;
!     char *weapon; // spawn with a weapon, since it should be in the model list, so the model must be loaded, just reference its name
!     s_model *weaponmodel;
!     Script spawnscript;
! } s_spawn_entry;
! 
! typedef struct
! {
!     char *branchname; // Use a name so we can find this level in branches
!     char *filename;
!     e_le_type type; // see e_le_type
!     int z_coords[3]; // Used for setting custom "z"
!     int gonext; // 0. dont complete this level and display score,
!     char *skipselect[MAX_PLAYERS]; // skipselect level based //[MAX_NAME_LEN]
!     int	noselect;
!     // 1. complete level and display score,
!     // 2. complete game, show hall of fame
! } s_level_entry;
! 
! typedef struct
! {
!     char *name;
!     int maxplayers;
!     int numlevels;
!     s_level_entry *levelorder;
!     int ifcomplete;
!     int noshowhof;
!     int noshowgameover;
!     int lives;
!     int credits;
!     int custfade;
!     int musicoverlap; //** shouldn't it be level based?
!     int typemp; //** shouldn't it be model based?
!     int continuescore;
!     //char *skipselect[MAX_PLAYERS]; //** better if level based // depreciated
!     int	noselect;
!     int saveflag;
!     int nosame;
!     int noshowcomplete;
! } s_set_entry;
! 
! typedef struct
! {
!     e_bgloldtype    oldtype;
!     int             order;	        // for panel order
!     gfx_entry       gfx;
!     s_axis_plane_vertical_int   size;
!     s_axis_plane_lateral_float  ratio;          // Only x and z.
!     s_axis_plane_lateral_int    offset;         // Only x and z.
!     s_axis_plane_lateral_int    spacing;        // Only x and z.
!     s_drawmethod    drawmethod;
!     float           bgspeedratio;
!     int             enabled;
!     int             z;
!     int             quake;
!     int             neon;
! } s_layer;
! 
! typedef struct
! {
!     /*
!     Text object (display text on screen) struct
!     2013-12-07
!     Damon Caskey (Feature originally added by kbanderson)
!     */
! 
!     int font;           //Font index.
!     s_axis_principal_int position;  //x,y,z location on screen.
!     u32 time;           //Time to expire.
!     char *text;         //Text to display.
! } s_textobj;
! 
! typedef struct
! {
!     int pos;
!     char *buf;
!     size_t size;
! } s_filestream;
! 
! typedef struct
! {
!     s_axis_plane_lateral_int position;
!     s_axis_plane_lateral_int size;
!     float *map;
! } s_basemap;
! 
!  typedef struct
!  {
!     /*
!     Hole/Wall structure.
!     2013-12-07
!     Damon Caskey
!     */
!     float depth;
!     float height;
!     float lowerleft;
!     float lowerright;
!     float upperleft;
!     float upperright;
!     float x;
      float z;
!     int type;
! } s_terrain;
! 
! typedef struct
! {
!     char *name;
!     int numspawns;
!     s_spawn_entry *spawnpoints;
!     int numlayers;
!     s_layer *layers;
!     int numlayersref;
!     s_layer *layersref;
!     ////////////////these below are layer reference
!     ////////////////use them to ease layer finding for script users
!     s_layer *background; // the bglayer that contains the default background
!     int numpanels;
!     s_layer *(*panels)[3]; //normal neon screen
!     int numfrontpanels;
!     s_layer **frontpanels;
!     int numbglayers;
!     s_layer **bglayers;
!     int numfglayers;
!     s_layer **fglayers;
!     int numgenericlayers;
!     s_layer **genericlayers;
!     int numwaters;
!     s_layer **waters;
!     ////////////////layer reference ends here
!     ///////////////////////////////////////////////////////////////
!     int numtextobjs;
!     s_textobj *textobjs;
!     int cameraxoffset;
!     int camerazoffset;
!     int numholes;
!     int numwalls;
!     int numbasemaps;
!     s_terrain *holes;
!     s_terrain *walls;
!     s_basemap *basemaps;
!     int scrolldir;
!     int width;
!     int rocking;
!     float bgspeed; // Used to make autoscrolling backgrounds
!     float vbgspeed;
!     float scrollspeed; // UT: restore this command  2011/7/8
!     int bgdir; // Used to set which direction the backgrounds scroll for autoscrolling backgrounds
!     int mirror;
      int bossescount;
!     int numbosses;
!     char bossmusic[MAX_BUFFER_LEN];
!     unsigned bossmusic_offset;
!     int numpalettes;
!     unsigned char (*palettes)[1024];//dynamic palettes
!     unsigned char *(*blendings)[MAX_BLENDINGS];//blending tables
!     int settime; // Set time limit per level
!     int notime; // Used to specify if the time is displayed 1 = no, else yes
!     int noreset; // If set, clock will not reset when players spawn/die
!     int type; // Used to specify which level type (1 = bonus, else regular)
!     int nospecial; // Used to specify if you can use your special during bonus levels
!     int nohurt; // Used to specify if you can hurt the other player during bonus levels
!     int boss_slow; // Flag so the level doesn't slow down after a boss is defeated
!     int nohit; // Not able to grab / hit other player on a per level basis
      int force_finishlevel; // flag to force to finish a level
!     int force_gameover; // flag to force game over
!     s_axis_principal_float *spawn; // Used to determine the spawn position of players
!     int setweap; // Levels can now specified which weapon will be used by default
!     e_facing_adjust facing; // Force the players to face to ...
! //--------------------gravity system-------------------------
!     float maxfallspeed;
!     float maxtossspeed;
!     float gravity;
! //---------------------scripts-------------------------------
!     Script update_script;
!     Script updated_script;
!     Script key_script;
!     Script level_script;
!     Script endlevel_script;
!     int pos;
!     u32 advancetime;
!     u32 quaketime;
!     int quake;
!     int waiting;
! 
! } s_level;
! 
! typedef struct ArgList
! {
!     size_t count;
!     size_t arglen[MAX_ARG_COUNT];
!     char *args[MAX_ARG_COUNT];
  } ArgList;
  
! #pragma pack()
! 
! 
! #define GET_ARG(z) (arglist.count > z ? arglist.args[z] : "")
! #define GET_ARG_LEN(z) (arglist.count > z ? arglist.arglen[z] : 0)
! #define GET_ARGP(z) (arglist->count > z ? arglist->args[z] : "")
! #define GET_ARGP_LEN(z) (arglist->count > z ? arglist->arglen[z] : 0)
! #define GET_INT_ARG(z) getValidInt(GET_ARG(z), filename, command)
! #define GET_FLOAT_ARG(z) getValidFloat(GET_ARG(z), filename, command)
! #define GET_INT_ARGP(z) getValidInt(GET_ARGP(z), filename, command)
! #define GET_FLOAT_ARGP(z) getValidFloat(GET_ARGP(z), filename, command)
! 
  #define GET_FRAME_ARG(z) (stricmp(GET_ARG(z), "this")==0?newanim->numframes:GET_INT_ARG(z))
  
  int is_frozen(entity *e);
! void unfrozen(entity *e);
! int     buffer_pakfile(char *filename, char **pbuffer, size_t *psize);
! size_t  ParseArgs(ArgList *list, char *input, char *output);
! int     getsyspropertybyindex(ScriptVariant *var, int index);
! int     changesyspropertybyindex(int index, ScriptVariant *value);
! int     load_script(Script *script, char *path);
! void    init_scripts();
! void    load_scripts();
! void    execute_animation_script    (entity *ent);
! void    execute_takedamage_script   (entity *ent, entity *other, s_collision_attack *attack);
! void    execute_ondeath_script      (entity *ent, entity *other, s_collision_attack *attack);
! void    execute_onkill_script       (entity *ent);
! void    execute_onpain_script       (entity *ent, int iType, int iReset);
! void    execute_onfall_script       (entity *ent, entity *other, s_collision_attack *attack);
! void    execute_inhole_script       (entity *ent, s_terrain *hole, int index);
! void    execute_onblocks_script     (entity *ent);
! void    execute_onblockw_script     (entity *ent, s_terrain *wall, int index, e_plane plane);
! void    execute_onblockp_script     (entity *ent, int plane, entity *platform);
! void    execute_onblocko_script     (entity *ent, int plane, entity *other);
! void    execute_onblockz_script     (entity *ent);
! void    execute_onblocka_script     (entity *ent, entity *other);
! void    execute_onmovex_script      (entity *ent);
! void    execute_onmovez_script      (entity *ent);
! void    execute_onmovea_script      (entity *ent);
! void    execute_didblock_script     (entity *ent, entity *other, s_collision_attack *attack);
! void    execute_ondoattack_script   (entity *ent, entity *other, s_collision_attack *attack, e_exchange which, int attack_id);
! void    execute_updateentity_script (entity *ent);
! void    execute_think_script        (entity *ent);
! void    execute_didhit_script       (entity *ent, entity *other, s_collision_attack *attack, int blocked);
  void    execute_onspawn_script      (entity *ent);
! void    clearbuttonss(int player);
! void    clearsettings(void);
! void    savesettings(void);
! void    saveasdefault(void);
! void    loadsettings(void);
! void    loadfromdefault(void);
! void    clearSavedGame(void);
! void    clearHighScore(void);
! int    saveGameFile(void);
! int     loadGameFile(void);
! int		saveScriptFile(void);
! int		loadScriptFile(void);
! int    saveHighScoreFile(void);
! int    loadHighScoreFile(void);
! int translate_SDID(char *value);
! int music(char *filename, int loop, long offset);
! int readByte(char* buf);
! char *findarg(char *command, int which);
! float diff(float a, float b);
! int inair(entity *e);
! int inair_range(entity *e);
! float randf(float max);
! int _makecolour(int r, int g, int b);
! int load_colourmap(s_model *model, char *image1, char *image2);
! int load_palette(unsigned char *pal, char *filename);
! void standard_palette();
! void change_system_palette(int palindex);
! void unload_background();
! void lifebar_colors();
! void load_background(char *filename, int createtables);
! void unload_texture();
! void load_texture(char *filename);
! void freepanels();
! s_sprite *loadpanel2(char *filename);
! int loadpanel(char *filename_normal, char *filename_neon, char *filename_screen);
! int loadfrontpanel(char *filename);
! void resourceCleanUp(void);
! void freesprites();
! s_sprite *loadsprite2(char *filename, int *width, int *height);
! int loadsprite(char *filename, int ofsx, int ofsy, int bmpformat);
! void load_special_sprites();
! int load_special_sounds();
! s_model *find_model(char *name);
! s_model *nextplayermodel(s_model *current);
! s_model *prevplayermodel(s_model *current);
! void free_anim(s_anim *anim);
! void free_models();
! s_anim                  *alloc_anim();
! s_collision_attack      *collision_alloc_attack_instance(s_collision_attack* properties);
! s_collision_attack      **collision_alloc_attack_list();
! s_collision_body        *collision_alloc_body_instance(s_collision_body *properties);
! s_collision_body        **collision_alloc_body_list();
! s_hitbox                *collision_alloc_coords(s_hitbox *coords);
! int                     addframe(s_anim             *a,
!                                 int                 spriteindex,
!                                 int                 framecount,
!                                 int                 delay,
!                                 unsigned            idle,
!                                 s_collision_body    *bbox,
!                                 s_collision_attack  *attack,
!                                 s_move              *move,
!                                 float               *platform,
!                                 int                 frameshadow,
!                                 int                 *shadow_coords,
!                                 int                 soundtoplay,
!                                 s_drawmethod        *drawmethod,
!                                 s_axis_plane_vertical_int         *offset,
!                                 s_damage_recursive  *recursive,
!                                 s_hitbox            *attack_coords,
!                                 s_hitbox            *body_coords);
! void cache_model(char *name, char *path, int flag);
! void remove_from_cache(char *name);
! void free_modelcache();
! int get_cached_model_index(char *name);
! char *get_cached_model_path(char *name);
! s_model *load_cached_model(char *name, char *owner, char unload);
! int is_set(s_model *model, int m);
! int load_script_setting();
! int load_models();
! void unload_levelorder();
! void load_levelorder();
! void unload_level();
! void load_level(char *filename);
! void drawlifebar(int x, int y, int h, int maxh);
! void drawmpbar(int x, int y, int m, int maxm);
! void update_loading(s_loadingbar *s,  int value, int max);
! void spawnplayer(int);
! unsigned getFPS(void);
! unsigned char *model_get_colourmap(s_model *model, unsigned which);
! void ent_set_colourmap(entity *ent, unsigned int which);
! void predrawstatus();
! void drawstatus();
! void addscore(int playerindex, int add);
! void free_ent(entity *e);
! void free_ents();
  int alloc_ents();
! int is_walking(int iAni);
  entity *smartspawn(s_spawn_entry *p);
! void initialize_item_carry(entity *ent, s_spawn_entry *spawn_entry);
! int adjust_grabposition(entity *ent, entity *other, float dist, int grabin);
! int player_trymove(float xdir, float zdir);
! void toss(entity *ent, float lift);
! void player_think(void);
! void subtract_shot(void);
! void set_model_ex(entity *ent, char *modelname, int index, s_model *newmodel, int flag);
! void dropweapon(int flag);
! void biker_drive(void);
! void trap_think(void);
! void steamer_think(void);
! void text_think(void);
! void anything_walk(void);
! void adjust_walk_animation(entity *other);
! int player_takedamage(entity *other, s_collision_attack *attack, int);
! int biker_takedamage(entity *other, s_collision_attack *attack, int);
! int obstacle_takedamage(entity *other, s_collision_attack *attack, int);
! void suicide(void);
! void player_blink(void);
  void common_prejump();
  void common_preduck();
! void common_idle();
! void damage_recursive(entity *target);
! void tryjump(float, float, float, int);
  void dojump(float, float, float, int);
  void tryduck(entity*);
  void tryduckrise(entity*);
! void tryvictorypose(entity*);
! void doduck(entity*);
! void biker_drive(void);
! void ent_default_init(entity *e);
! void ent_spawn_ent(entity *ent);
! void ent_summon_ent(entity *ent);
! void ent_set_anim(entity *ent, int aninum, int resetable);
! void ent_set_colourmap(entity *ent, unsigned int which);
! void ent_set_model(entity *ent, char *modelname, int syncAnim);
! entity *spawn(float x, float z, float a, int direction, char *name, int index, s_model *model);
! void ent_unlink(entity *e);
! void ents_link(entity *e1, entity *e2);
! void kill_entity(entity *victim);
  void kill_all();
  
  
--- 2286,2906 ----
  typedef struct
  {
      int alpha;                      // int itemmap alpha effect of item
!     int colorset;                   // int itemmap; // Now items spawned can have their properties changed
      int health;                     // int itemhealth; // Now items spawned can have their properties changed
!     int index;                      // int itemindex; // item model index
      int player_count;               // int itemplayer_count;
      char alias[MAX_NAME_LEN];   // char itemalias[MAX_NAME_LEN]; // Now items spawned can have their properties changed
  } s_item_properties;
  
  
! typedef struct entity
! {
!     e_spawn_type        spawntype;              // Type of spawn (level spawn, script spawn, ...)
!     bool                exists;                 // flag to determine if it is a valid entity.
!     bool                deduct_ammo;            // Check for ammo count?
!     e_projectile_prime  projectile_prime;       // If this entity is a projectile, several priming values go here to set up its behavior.
!     int                 playerindex;            // Player controlling the entity.
      s_energy_status     energy_status;          // Health and MP.
!     char                name[MAX_NAME_LEN]; // this is display name
!     s_model             *defaultmodel;          // this is the default model
!     s_model             *model;                 // current model
      s_model             modeldata;              // model data copied here
      s_item_properties   *item_properties;       // Properties copied to an item entity when it is dropped.
!     bool boss;
!     unsigned int dying;   // Corresponds with which remap is to be used for the dying flash
!     unsigned int dying2;  // Corresponds with which remap is to be used for the dying flash for per2
!     unsigned int per1;    // Used to store at what health value the entity begins to flash
!     unsigned int per2;    // Used to store at what health value the entity flashes more rapidly
!     unsigned int boomerang_loop;  // Count of boomerang passes.
!     e_direction direction;
!     int nograb; // Some enemies cannot be grabbed (bikes) - now used with cantgrab as well
!     int nograb_default; // equal to nograb  but this is remain the default value setetd in entity txt file (by White Dragon)
!     int movestep;
!     s_axis_principal_float position; //x,y,z location.
!     s_axis_principal_float velocity; //x,y,z movement speed.
!     float destx; // temporary values for ai functions
!     float destz;
!     float movex;
!     float movez;
!     float speedmul;
!     float base;     // Default altitude
!     float altbase; // Altitude affected by movea
!     s_jump jump;    //Jumping velocity and id.
!     unsigned combostep[MAX_SPECIAL_INPUTS];  // merge into an array to clear up some code
! 
!     // ---------------------- action times -------------------------------
!     u32	lastmove;
!     u32 lastdir;
!     u32 timestamp;
!     u32 releasetime;
!     u32 toss_time; // Used by gravity code
!     u32 nextmove;
!     u32 stalltime;
!     u32 combotime; // For multiple-hit combo
!     u32 movetime; // For special move
!     u32 freezetime; // Used to store at what point the a frozen entity becomes unfrozen
!     u32 maptime; // used by forcemap
!     u32 sealtime; // used by seal (stops special moves).
!     u32 dot_time[MAX_DOTS]; //Dot time to expire.
!     int dot[MAX_DOTS]; //Dot mode.
!     int dot_atk[MAX_DOTS]; //Dot attack type.
!     int dot_force[MAX_DOTS]; //Dot amount.
!     int dot_rate[MAX_DOTS]; //Dot delay per tick.
!     int dot_cnt[MAX_DOTS]; //Dot time of next tick.
!     struct entity *dot_owner[MAX_DOTS]; //Dot owner.
!     u32 magictime;
!     u32 guardtime;
!     u32 nextanim;
!     u32 nextthink;
!     u32 nextattack;
!     u32 pain_time;
!     u32 pausetime; // 2012/4/30 UT: Remove lastanimpos and add this. Otherwise hit pause is always bound to frame and attack box.
!     u32 mpchargetime; // For the CHARGE animation
!     u32 sleeptime; // For the SLEEP animation
!     u32 knockdowntime; // count knock down hit
!     u32 invinctime; // Used to set time for invincibility to expire
!     u32 turntime;
!     s_staydown staydown; //Delay modifiers before rise or riseattack can take place. 2011_04_08, DC: moved to struct.
!     // -------------------------end of times ------------------------------
!     int update_mark;
! 
!     //------------------------- a lot of flags ---------------------------
! 
!     int seal; //1 = No specials.
!     int dead;
!     int jumping; // Stuff useful for AI
!     int idling;
!     int walking;
!     int drop;
!     e_attacking_state attacking;
!     int getting;
!     int turning;
!     bool charging;
!     unsigned int blocking;
!     int falling;
      int running; // Flag to determine if a player is running
!     int ducking; // in duck stance
!     int grabwalking; // a flag for grabwalk check
!     int inpain; // playing pain animation
      int inbackpain; // playing back pain/fall/rise/riseattack/die animation
      int rising; // playing rise animation
      int riseattacking; // playing rise attack animation
!     int edge; // in edge (unbalanced)
!     int normaldamageflipdir; // used to reset backpain direction
!     int frozen; // Flag to determine if an entity is frozen
!     bool blink;
!     int invincible; // Flag used to determine if player is currently invincible
!     int autokill; // Kill on end animation
!     int remove_on_attack;
!     int tocost; // Flag to determine if special costs life if doesn't hit an enemy
!     int noaicontrol; // pause A.I. control
!     int projectile;
!     int toexplode; // Needed to determine if the projectile is a type that will explode (bombs, dynamite, etc)
!     int animating; // Set by animation code can be -1, 0 or 1 (used for reverse animation)
!     bool arrowon; // Flag to display parrow/parrow2 or not
!     unsigned pathblocked;
!     s_axis_principal_float *waypoints;
!     int numwaypoints;
!     unsigned int animpos; // Current animation frame.
      unsigned int animnum; // animation id.
!     unsigned int prevanimnum; // previous animation id.
!     s_anim *animation;
      float knockdowncount;
      s_damage_on_landing damage_on_landing;
!     int die_on_landing; // flag for damageonlanding (active if self->health <= 0)
!     int last_damage_type; // used for set death animation or pain animation
!     int map; // Stores the colourmap for restoring purposes
!     void (*think)();
!     void (*takeaction)();
!     int (*takedamage)(struct entity *, s_collision_attack *, int);
!     int (*trymove)(float, float);
      unsigned int attack_id_incoming;
!     unsigned int attack_id_incoming2; //Variables agregas para memorizar las √∫ltimas 4 cajas de impactos y evitar el bug del "chorricombo"
!     unsigned int attack_id_incoming3;
!     unsigned int attack_id_incoming4;
!     unsigned int attack_id_outgoing;
!     int hitwall; // == 1 in the instant that hit the wall/platform/obstacle, else == 0
!     unsigned char *colourmap;
!     //struct entity   *thrower;
!     struct entity *link; // Used to link 2 entities together.
!     struct entity *owner; // Added for "hitenemy" flag so projectile recognizes its owner
!     struct entity *grabbing; // Added for "platform level" layering
!     struct entity *weapent;
!     struct entity *parent; //Its spawner
!     struct entity *subentity; //store the sub entity
!     struct entity *opponent;
!     struct entity *custom_target; // target forced by modder via script
!     struct entity *lasthit;
!     struct entity *hithead; // when a player jumps and hits head on the bottom of a platform
!     struct entity *landed_on_platform;
!     s_bind binding;
!     int escapecount; // For escapehits
!     s_rush rush;    //Rush combo display.
!     int lifespancountdown; // life span count down
! 
!     //------------- copy them from model to avoid global effect -------------
!     s_defense *defense;
!     float *offense_factors;
! 
!     int idlemode;
!     int walkmode;
! 
!     int sortid; // id for sprite queue sort
!     Varlist *varlist;
!     s_drawmethod drawmethod;
!     s_scripts *scripts;
! } entity;
! 
! 
! typedef struct
! {
!     char name[MAX_NAME_LEN];
!     int colourmap;
!     unsigned score;
!     unsigned lives;
!     unsigned credits;
!     entity *ent;
!     u64 keys;
!     u64 newkeys;
!     u64 playkeys;
!     u64 releasekeys;
!     u32 combokey[MAX_SPECIAL_INPUTS];
!     u32 inputtime[MAX_SPECIAL_INPUTS];
!     u64 disablekeys;
!     u64 prevkeys; // used for play/rec mode
!     int combostep;
!     int spawnhealth;
!     int spawnmp;
!     int joining;
!     int hasplayed;
      int weapnum;
!     int status;
! } s_player;
! 
! typedef struct
! {
!     int at;
!     int wait;
!     int nojoin; // dont allow new hero to join
!     int spawnplayer_count; // spawn this entity according to the amount of players
!     int palette; //change system palette to ...
!     int groupmin;
!     int groupmax;
!     int scrollminz; // new scroll limit
!     int scrollmaxz;
!     int scrollminx; // new scroll limit
!     int scrollmaxx;
!     int blockade; //limit how far you can go back
!     s_axis_plane_vertical_int light; // light direction, for gfx shadow
!     int shadowcolor; // -1 no shadow
!     int shadowalpha;
!     int shadowopacity;
!     char music[MAX_BUFFER_LEN];
!     float musicfade;
!     u32 musicoffset;
!     char *name; // must be a name in the model list, so just reference
!     int index; // model index
!     int weaponindex; // the spawned entity with an weapon item, this is the index of the item model
!     int alpha; // Used for alpha effects
!     int boss;
!     int flip;
!     int colourmap;
!     int dying; // Used for the dying flash animation
!     int dying2; // Used for the dying flash animation health 25% (optional)
!     unsigned per1; // Used to store at what health value the entity begins to flash
!     unsigned per2; // Used to store at what health value the entity flashes more rapidly
!     int nolife; // So nolife can be overriden for all characters
!     s_item_properties item_properties; // Alias, health, index, etc. for items.
      char *item; // must be a name in the model list, so just reference
!     s_model *itemmodel;
!     s_model *model;
!     char alias[MAX_NAME_LEN];
!     int health[MAX_PLAYERS];
!     int mp; // mp's variable for mpbar by tails
!     unsigned score; // So score can be overridden for enemies/obstacles
!     int multiple; // So score can be overridden for enemies/obstacles
!     s_axis_principal_float position;  //x, y, z location.
!     unsigned credit;
!     int aggression; // For enemy A.I.
!     int spawntype; // Pass 1 when a level spawn.
!     int entitytype; // if it's a enemy, player etc..
!     entity *parent;
!     char *weapon; // spawn with a weapon, since it should be in the model list, so the model must be loaded, just reference its name
!     s_model *weaponmodel;
!     Script spawnscript;
! } s_spawn_entry;
! 
! typedef struct
! {
!     char *branchname; // Use a name so we can find this level in branches
!     char *filename;
!     e_le_type type; // see e_le_type
!     int z_coords[3]; // Used for setting custom "z"
!     int gonext; // 0. dont complete this level and display score,
!     char *skipselect[MAX_PLAYERS]; // skipselect level based //[MAX_NAME_LEN]
!     int	noselect;
!     // 1. complete level and display score,
!     // 2. complete game, show hall of fame
! } s_level_entry;
! 
! typedef struct
! {
!     char *name;
!     int maxplayers;
!     int numlevels;
!     s_level_entry *levelorder;
!     int ifcomplete;
!     int noshowhof;
!     int noshowgameover;
!     int lives;
!     int credits;
!     int custfade;
!     int musicoverlap; //** shouldn't it be level based?
!     int typemp; //** shouldn't it be model based?
!     int continuescore;
!     //char *skipselect[MAX_PLAYERS]; //** better if level based // depreciated
!     int	noselect;
!     int saveflag;
!     int nosame;
!     int noshowcomplete;
! } s_set_entry;
! 
! typedef struct
! {
!     e_bgloldtype    oldtype;
!     int             order;	        // for panel order
!     gfx_entry       gfx;
!     s_axis_plane_vertical_int   size;
!     s_axis_plane_lateral_float  ratio;          // Only x and z.
!     s_axis_plane_lateral_int    offset;         // Only x and z.
!     s_axis_plane_lateral_int    spacing;        // Only x and z.
!     s_drawmethod    drawmethod;
!     float           bgspeedratio;
!     int             enabled;
!     int             z;
!     int             quake;
!     int             neon;
! } s_layer;
! 
! typedef struct
! {
!     /*
!     Text object (display text on screen) struct
!     2013-12-07
!     Damon Caskey (Feature originally added by kbanderson)
!     */
! 
!     int font;           //Font index.
!     s_axis_principal_int position;  //x,y,z location on screen.
!     u32 time;           //Time to expire.
!     char *text;         //Text to display.
! } s_textobj;
! 
! typedef struct
! {
!     int pos;
!     char *buf;
!     size_t size;
! } s_filestream;
! 
! typedef struct
! {
!     s_axis_plane_lateral_int position;
!     s_axis_plane_lateral_int size;
!     float *map;
! } s_basemap;
! 
!  typedef struct
!  {
!     /*
!     Hole/Wall structure.
!     2013-12-07
!     Damon Caskey
!     */
!     float depth;
!     float height;
!     float lowerleft;
!     float lowerright;
!     float upperleft;
!     float upperright;
!     float x;
      float z;
!     int type;
! } s_terrain;
! 
! typedef struct
! {
!     char *name;
!     int numspawns;
!     s_spawn_entry *spawnpoints;
!     int numlayers;
!     s_layer *layers;
!     int numlayersref;
!     s_layer *layersref;
!     ////////////////these below are layer reference
!     ////////////////use them to ease layer finding for script users
!     s_layer *background; // the bglayer that contains the default background
!     int numpanels;
!     s_layer *(*panels)[3]; //normal neon screen
!     int numfrontpanels;
!     s_layer **frontpanels;
!     int numbglayers;
!     s_layer **bglayers;
!     int numfglayers;
!     s_layer **fglayers;
!     int numgenericlayers;
!     s_layer **genericlayers;
!     int numwaters;
!     s_layer **waters;
!     ////////////////layer reference ends here
!     ///////////////////////////////////////////////////////////////
!     int numtextobjs;
!     s_textobj *textobjs;
!     int cameraxoffset;
!     int camerazoffset;
!     int numholes;
!     int numwalls;
!     int numbasemaps;
!     s_terrain *holes;
!     s_terrain *walls;
!     s_basemap *basemaps;
!     int scrolldir;
!     int width;
!     int rocking;
!     float bgspeed; // Used to make autoscrolling backgrounds
!     float vbgspeed;
!     float scrollspeed; // UT: restore this command  2011/7/8
!     int bgdir; // Used to set which direction the backgrounds scroll for autoscrolling backgrounds
!     int mirror;
      int bossescount;
!     int numbosses;
!     char bossmusic[MAX_BUFFER_LEN];
!     unsigned bossmusic_offset;
!     int numpalettes;
!     unsigned char (*palettes)[1024];//dynamic palettes
!     unsigned char *(*blendings)[MAX_BLENDINGS];//blending tables
!     int settime; // Set time limit per level
!     int notime; // Used to specify if the time is displayed 1 = no, else yes
!     int noreset; // If set, clock will not reset when players spawn/die
!     int type; // Used to specify which level type (1 = bonus, else regular)
!     int nospecial; // Used to specify if you can use your special during bonus levels
!     int nohurt; // Used to specify if you can hurt the other player during bonus levels
!     int boss_slow; // Flag so the level doesn't slow down after a boss is defeated
!     int nohit; // Not able to grab / hit other player on a per level basis
      int force_finishlevel; // flag to force to finish a level
!     int force_gameover; // flag to force game over
!     s_axis_principal_float *spawn; // Used to determine the spawn position of players
!     int setweap; // Levels can now specified which weapon will be used by default
!     e_facing_adjust facing; // Force the players to face to ...
! //--------------------gravity system-------------------------
!     float maxfallspeed;
!     float maxtossspeed;
!     float gravity;
! //---------------------scripts-------------------------------
!     Script update_script;
!     Script updated_script;
!     Script key_script;
!     Script level_script;
!     Script endlevel_script;
!     int pos;
!     u32 advancetime;
!     u32 quaketime;
!     int quake;
!     int waiting;
! 
! } s_level;
! 
! typedef struct ArgList
! {
!     size_t count;
!     size_t arglen[MAX_ARG_COUNT];
!     char *args[MAX_ARG_COUNT];
  } ArgList;
  
! #pragma pack()
! 
! 
! #define GET_ARG(z) (arglist.count > z ? arglist.args[z] : "")
! #define GET_ARG_LEN(z) (arglist.count > z ? arglist.arglen[z] : 0)
! #define GET_ARGP(z) (arglist->count > z ? arglist->args[z] : "")
! #define GET_ARGP_LEN(z) (arglist->count > z ? arglist->arglen[z] : 0)
! #define GET_INT_ARG(z) getValidInt(GET_ARG(z), filename, command)
! #define GET_FLOAT_ARG(z) getValidFloat(GET_ARG(z), filename, command)
! #define GET_INT_ARGP(z) getValidInt(GET_ARGP(z), filename, command)
! #define GET_FLOAT_ARGP(z) getValidFloat(GET_ARGP(z), filename, command)
! 
  #define GET_FRAME_ARG(z) (stricmp(GET_ARG(z), "this")==0?newanim->numframes:GET_INT_ARG(z))
  
  int is_frozen(entity *e);
! void unfrozen(entity *e);
! int     buffer_pakfile(char *filename, char **pbuffer, size_t *psize);
! size_t  ParseArgs(ArgList *list, char *input, char *output);
! int     getsyspropertybyindex(ScriptVariant *var, int index);
! int     changesyspropertybyindex(int index, ScriptVariant *value);
! int     load_script(Script *script, char *path);
! void    init_scripts();
! void    load_scripts();
! void    execute_animation_script    (entity *ent);
! void    execute_takedamage_script   (entity *ent, entity *other, s_collision_attack *attack);
! void    execute_ondeath_script      (entity *ent, entity *other, s_collision_attack *attack);
! void    execute_onkill_script       (entity *ent);
! void    execute_onpain_script       (entity *ent, int iType, int iReset);
! void    execute_onfall_script       (entity *ent, entity *other, s_collision_attack *attack);
! void    execute_inhole_script       (entity *ent, s_terrain *hole, int index);
! void    execute_onblocks_script     (entity *ent);
! void    execute_onblockw_script     (entity *ent, s_terrain *wall, int index, e_plane plane);
! void    execute_onblockp_script     (entity *ent, int plane, entity *platform);
! void    execute_onblocko_script     (entity *ent, int plane, entity *other);
! void    execute_onblockz_script     (entity *ent);
! void    execute_onblocka_script     (entity *ent, entity *other);
! void    execute_onmovex_script      (entity *ent);
! void    execute_onmovez_script      (entity *ent);
! void    execute_onmovea_script      (entity *ent);
! void    execute_didblock_script     (entity *ent, entity *other, s_collision_attack *attack);
! void    execute_ondoattack_script   (entity *ent, entity *other, s_collision_attack *attack, e_exchange which, int attack_id);
! void    execute_updateentity_script (entity *ent);
! void    execute_think_script        (entity *ent);
! void    execute_didhit_script       (entity *ent, entity *other, s_collision_attack *attack, int blocked);
  void    execute_onspawn_script      (entity *ent);
! void    clearbuttonss(int player);
! void    clearsettings(void);
! void    savesettings(void);
! void    saveasdefault(void);
! void    loadsettings(void);
! void    loadfromdefault(void);
! void    clearSavedGame(void);
! void    clearHighScore(void);
! int    saveGameFile(void);
! int     loadGameFile(void);
! int		saveScriptFile(void);
! int		loadScriptFile(void);
! int    saveHighScoreFile(void);
! int    loadHighScoreFile(void);
! int translate_SDID(char *value);
! int music(char *filename, int loop, long offset);
! int readByte(char* buf);
! char *findarg(char *command, int which);
! float diff(float a, float b);
! int inair(entity *e);
! int inair_range(entity *e);
! float randf(float max);
! int _makecolour(int r, int g, int b);
! int load_colourmap(s_model *model, char *image1, char *image2);
! int load_palette(unsigned char *pal, char *filename);
! void standard_palette();
! void change_system_palette(int palindex);
! void unload_background();
! void lifebar_colors();
! void load_background(char *filename, int createtables);
! void unload_texture();
! void load_texture(char *filename);
! void freepanels();
! s_sprite *loadpanel2(char *filename);
! int loadpanel(char *filename_normal, char *filename_neon, char *filename_screen);
! int loadfrontpanel(char *filename);
! void resourceCleanUp(void);
! void freesprites();
! s_sprite *loadsprite2(char *filename, int *width, int *height);
! int loadsprite(char *filename, int ofsx, int ofsy, int bmpformat);
! void load_special_sprites();
! int load_special_sounds();
! s_model *find_model(char *name);
! s_model *nextplayermodel(s_model *current);
! s_model *prevplayermodel(s_model *current);
! void free_anim(s_anim *anim);
! void free_models();
! s_anim                  *alloc_anim();
! s_collision_attack      *collision_alloc_attack_instance(s_collision_attack* properties);
! s_collision_attack      **collision_alloc_attack_list();
! s_collision_body        *collision_alloc_body_instance(s_collision_body *properties);
! s_collision_body        **collision_alloc_body_list();
! s_hitbox                *collision_alloc_coords(s_hitbox *coords);
! int                     addframe(s_anim             *a,
!                                 int                 spriteindex,
!                                 int                 framecount,
!                                 int                 delay,
!                                 unsigned            idle,
!                                 s_collision_body    *bbox,
!                                 s_collision_attack  *attack,
!                                 s_move              *move,
!                                 float               *platform,
!                                 int                 frameshadow,
!                                 int                 *shadow_coords,
!                                 int                 soundtoplay,
!                                 s_drawmethod        *drawmethod,
!                                 s_axis_plane_vertical_int         *offset,
!                                 s_damage_recursive  *recursive,
!                                 s_hitbox            *attack_coords,
!                                 s_hitbox            *body_coords);
! void cache_model(char *name, char *path, int flag);
! void remove_from_cache(char *name);
! void free_modelcache();
! int get_cached_model_index(char *name);
! char *get_cached_model_path(char *name);
! s_model *load_cached_model(char *name, char *owner, char unload);
! int is_set(s_model *model, int m);
! int load_script_setting();
! int load_models();
! void unload_levelorder();
! void load_levelorder();
! void unload_level();
! void load_level(char *filename);
! void drawlifebar(int x, int y, int h, int maxh);
! void drawmpbar(int x, int y, int m, int maxm);
! void update_loading(s_loadingbar *s,  int value, int max);
! void spawnplayer(int);
! unsigned getFPS(void);
! unsigned char *model_get_colourmap(s_model *model, unsigned which);
! void ent_set_colourmap(entity *ent, unsigned int which);
! void predrawstatus();
! void drawstatus();
! void addscore(int playerindex, int add);
! void free_ent(entity *e);
! void free_ents();
  int alloc_ents();
! int is_walking(int iAni);
  entity *smartspawn(s_spawn_entry *p);
! void initialize_item_carry(entity *ent, s_spawn_entry *spawn_entry);
! int adjust_grabposition(entity *ent, entity *other, float dist, int grabin);
! int player_trymove(float xdir, float zdir);
! void toss(entity *ent, float lift);
! void player_think(void);
! void subtract_shot(void);
! void set_model_ex(entity *ent, char *modelname, int index, s_model *newmodel, int flag);
! void dropweapon(int flag);
! void biker_drive(void);
! void trap_think(void);
! void steamer_think(void);
! void text_think(void);
! void anything_walk(void);
! void adjust_walk_animation(entity *other);
! int player_takedamage(entity *other, s_collision_attack *attack, int);
! int biker_takedamage(entity *other, s_collision_attack *attack, int);
! int obstacle_takedamage(entity *other, s_collision_attack *attack, int);
! void suicide(void);
! void player_blink(void);
  void common_prejump();
  void common_preduck();
! void common_idle();
! void damage_recursive(entity *target);
! void tryjump(float, float, float, int);
  void dojump(float, float, float, int);
  void tryduck(entity*);
  void tryduckrise(entity*);
! void tryvictorypose(entity*);
! void doduck(entity*);
! void biker_drive(void);
! void ent_default_init(entity *e);
! void ent_spawn_ent(entity *ent);
! void ent_summon_ent(entity *ent);
! void ent_set_anim(entity *ent, int aninum, int resetable);
! void ent_set_colourmap(entity *ent, unsigned int which);
! void ent_set_model(entity *ent, char *modelname, int syncAnim);
! entity *spawn(float x, float z, float a, int direction, char *name, int index, s_model *model);
! void ent_unlink(entity *e);
! void ents_link(entity *e1, entity *e2);
! void kill_entity(entity *victim);
  void kill_all();
  
  
***************
*** 2913,2933 ****
  void checkhitscore(entity *other, s_collision_attack *attack);
  int calculate_force_damage(entity *other, s_collision_attack *attack);
  void checkdamage(entity *other, s_collision_attack *attack);
! void checkdamageonlanding();
! int checkhit(entity *attacker, entity *target);
! int checkhole(float x, float z);
! int checkhole_index(float x, float z);
! int checkhole_in(float x, float z, float a);
! int checkholeindex_in(float x, float z, float a);
! int checkhole_between(float x, float z, float a1, float a2);
! int testplatform(entity *, float, float, entity *);
! int testhole(int, float, float);
! int testwall(int, float, float);
! int checkwalls(float x, float z, float a1, float a2);
! int checkholes(float, float);
! int checkwall_below(float x, float z, float a);
! int checkwall_index(float x, float z);
! float check_basemap(int x, int z);
  int check_basemap_index(int x, int z);
  float checkbase(float x, float z, float y, entity *ent);
  entity *check_block_obstacle(entity *entity);
--- 2918,2938 ----
  void checkhitscore(entity *other, s_collision_attack *attack);
  int calculate_force_damage(entity *other, s_collision_attack *attack);
  void checkdamage(entity *other, s_collision_attack *attack);
! void checkdamageonlanding();
! int checkhit(entity *attacker, entity *target);
! int checkhole(float x, float z);
! int checkhole_index(float x, float z);
! int checkhole_in(float x, float z, float a);
! int checkholeindex_in(float x, float z, float a);
! int checkhole_between(float x, float z, float a1, float a2);
! int testplatform(entity *, float, float, entity *);
! int testhole(int, float, float);
! int testwall(int, float, float);
! int checkwalls(float x, float z, float a1, float a2);
! int checkholes(float, float);
! int checkwall_below(float x, float z, float a);
! int checkwall_index(float x, float z);
! float check_basemap(int x, int z);
  int check_basemap_index(int x, int z);
  float checkbase(float x, float z, float y, entity *ent);
  entity *check_block_obstacle(entity *entity);
***************
*** 2940,3138 ****
  int check_range_target_y(entity *ent, entity *target, s_anim *animation);
  int check_range_target_z(entity *ent, entity *target, s_anim *animation);
  
! 
! void generate_basemap(int map_index, float rx, float rz, float x_size, float z_size, float min_a, float max_a, int x_cont);
! int testmove(entity *, float, float, float, float);
! entity *check_platform_below(float x, float z, float a, entity *exclude);
! entity *check_platform_above(float x, float z, float a, entity *exclude);
! entity *check_platform_between(float x, float z, float amin, float amax, entity *exclude);
! entity *check_platform(float x, float z, entity *exclude);
! float get_platform_base(entity *);
! int is_on_platform(entity *);
  entity *get_platform_on(entity *);
! void do_item_script(entity *ent, entity *item);
  void do_attack(entity *e);
  int do_catch(entity *ent, entity *target, int animation_catch);
! int do_energy_charge(entity *ent);
! void adjust_base(entity *e, entity **pla);
  void check_gravity(entity *e);
! bool check_jumpframe(entity *ent, unsigned int frame);
  bool check_landframe(entity *ent);
  int check_edge(entity *ent);
! void update_ents();
! entity *find_ent_here(entity *exclude, float x, float z, int types, int (*test)(entity *, entity *));
! void display_ents();
! void toss(entity *ent, float lift);
! entity *findent(int types);
! int count_ents(int types);
! int set_idle(entity *ent);
! int set_death(entity *iDie, int type, int reset);
! int set_fall(entity *ent, entity *other, s_collision_attack *attack, int reset);
! int set_rise(entity *iRise, int type, int reset);
! int set_riseattack(entity *iRiseattack, int type, int reset);
! int set_blockpain(entity *iBlkpain, int type, int reset);
! int set_pain(entity *iPain, int type, int reset);
! int reset_backpain(entity *ent);
! int check_backpain(entity* attacker, entity* defender);
! void set_weapon(entity *ent, int wpnum, int anim_flag);
! entity *melee_find_target();
! entity *long_find_target();
! entity *normal_find_target(int anim, int iDetect);
! entity *normal_find_item();
! int long_attack();
! int melee_attack();
! void dothrow();
! void doprethrow();
  void dograbattack(int which);
! e_animations do_grab_attack_finish(entity *ent, int which);
! int check_special();
! void normal_prepare();
! void common_jump();
! void common_spawn(void);
! void common_drop(void);
! void common_walkoff(void);
! void common_jumpattack();
! void common_turn();
! void common_fall();
! void common_lie();
! void common_rise();
! void common_pain();
! void common_get();
! void common_land();
! void common_grab(void);
! void common_grabattack();
! void common_grabbed();
! void common_block(void);
! int arrow_takedamage(entity *other, s_collision_attack *attack, int fall_flag);
! int common_takedamage(entity *other, s_collision_attack *attack, int fall_flag);
! int normal_attack();
! void common_throw(void);
! void common_throw_wait(void);
! void common_prethrow(void);
! void npc_warp();
! int checkpathblocked();
! int common_trymove(float xdir, float zdir);
! void normal_runoff();
! void common_animation_normal();
! void common_attack_proc();
! void normal_attack_finish();
! entity *common_find_target();
! int common_attack(void);
! int common_try_jump(void);
! int common_try_pick(entity *other);
! int common_try_chase(entity *target, int dox, int doz);
! int common_try_follow(entity *target, int dox, int doz);
! int common_try_avoid(entity *target, int dox, int doz);
! int common_try_wandercompletely(int dox, int doz);
! int common_try_wander(entity *target, int dox, int doz);
! void common_pickupitem(entity *other);
! int common_backwalk_anim(entity *ent);
! void draw_position_entity(entity *entity, int offset_z, int color, s_drawmethod *drawmethod);
! void draw_box_on_entity(entity *entity, int pos_x, int pos_y, int pos_z, int size_w, int size_h, int offset_z, int color, s_drawmethod *drawmethod);
! void draw_visual_debug();
! int bomb_move(void);
! int arrow_move(void);
! int common_move(void);
! void common_think(void);
! void suicide(void);
! void prethrow(void);
! void player_die();
! int player_trymove(float xdir, float zdir);
! int check_energy(e_cost_check which, int ani);
! int player_preinput();
! int player_check_special();
! void runanimal(void);
! void player_blink(void);
! int check_combo();
! int check_costmove(int s, int fs, int jumphack);
! void didfind_item(entity *other);
! void player_think(void);
! void subtract_shot();
! void dropweapon(int flag);
! void drop_all_enemies();
! void kill_all_enemies();
! void smart_bomb(entity *e, s_collision_attack *attack);
! void anything_walk(void);
  entity *knife_spawn(char *name, int index, float x, float z, float a, int direction, int type, int map);
! entity *boomerang_spawn(char *name, int index, float x, float z, float a, int direction, int map);
! entity *bomb_spawn(char *name, int index, float x, float z, float a, int direction, int map);
! void bomb_explode(void);
! int star_spawn(float x, float z, float a, int direction);
! void steam_think(void);
! void trap_think(void);
! void steam_spawn(float x, float z, float a);
! void steamer_think(void);
! void text_think(void);
! entity *homing_find_target(int type);
! void biker_drive(void);
! void bike_crash(void);
! void obstacle_fall(void);
! void obstacle_fly(void);
! entity *smartspawn(s_spawn_entry *props);
! int is_incam(float x, float z, float a, float threshold);
! void spawnplayer(int index);
! void time_over();
! void update_scroller();
! void draw_scrolled_bg();
! void update(int ingame, int usevwait);
! void fade_out(int type, int speed);
! void apply_controls();
! void plan();
  int is_in_backrun(entity*);
! int ai_check_ducking();
! int ai_check_warp();
! int ai_check_lie();
! int ai_check_grabbed();
! int ai_check_grab();
! int ai_check_escape();
! int ai_check_busy();
! void display_credits(void);
! void borShutdown(int status, char *msg, ...);
! #ifdef DC
! void guistartup(void);
! #endif
! void startup(void);
! int playgif(char *filename, int x, int y, int noskip);
! void playscene(char *filename);
! void gameover();
! void hallfame(int addtoscore);
! void showcomplete(int num);
! int playlevel(char *filename);
! int selectplayer(int *players, char *filename, int useSavedGame);
! void playgame(int *players,  unsigned which_set, int useSavedGame);
! int load_saved_game();
! void term_videomodes();
! void init_videomodes(int log);
! void safe_set(int *arr, int index, int newkey, int oldkey);
! 
! void keyboard_setup_menu(int player);
! void keyboard_setup(int player);
! void inputrefresh();
! 
! int menu_difficulty();
! void menu_options();
! void menu_options_config();
! void menu_options_debug();
! void menu_options_input();
! void menu_options_sound();
! void menu_options_soundcard();
! void menu_options_system();
! void menu_options_video();
! 
! void openborMain(int argc, char **argv);
! int is_cheat_actived();
! int getValidInt(char *text, char *file, char *cmd);
! float getValidFloat(char *text, char *file, char *cmd);
! int dograb(entity *attacker, entity *target, e_dograb_adjustcheck adjustcheck);
! int stopRecordInputs(void);
! int recordInputs(void);
! int playRecordedInputs(void);
! int freeRecordedInputs(void);
! a_playrecstatus* init_input_recorder(void);
! void free_input_recorder(void);
! void goto_mainmenu(int);
! 
! extern s_savelevel   *savelevel;
! extern s_savescore    savescore;
! 
! #endif
--- 2945,3143 ----
  int check_range_target_y(entity *ent, entity *target, s_anim *animation);
  int check_range_target_z(entity *ent, entity *target, s_anim *animation);
  
! 
! void generate_basemap(int map_index, float rx, float rz, float x_size, float z_size, float min_a, float max_a, int x_cont);
! int testmove(entity *, float, float, float, float);
! entity *check_platform_below(float x, float z, float a, entity *exclude);
! entity *check_platform_above(float x, float z, float a, entity *exclude);
! entity *check_platform_between(float x, float z, float amin, float amax, entity *exclude);
! entity *check_platform(float x, float z, entity *exclude);
! float get_platform_base(entity *);
! int is_on_platform(entity *);
  entity *get_platform_on(entity *);
! void do_item_script(entity *ent, entity *item);
  void do_attack(entity *e);
  int do_catch(entity *ent, entity *target, int animation_catch);
! int do_energy_charge(entity *ent);
! void adjust_base(entity *e, entity **pla);
  void check_gravity(entity *e);
! bool check_jumpframe(entity *ent, unsigned int frame);
  bool check_landframe(entity *ent);
  int check_edge(entity *ent);
! void update_ents();
! entity *find_ent_here(entity *exclude, float x, float z, int types, int (*test)(entity *, entity *));
! void display_ents();
! void toss(entity *ent, float lift);
! entity *findent(int types);
! int count_ents(int types);
! int set_idle(entity *ent);
! int set_death(entity *iDie, int type, int reset);
! int set_fall(entity *ent, entity *other, s_collision_attack *attack, int reset);
! int set_rise(entity *iRise, int type, int reset);
! int set_riseattack(entity *iRiseattack, int type, int reset);
! int set_blockpain(entity *iBlkpain, int type, int reset);
! int set_pain(entity *iPain, int type, int reset);
! int reset_backpain(entity *ent);
! int check_backpain(entity* attacker, entity* defender);
! void set_weapon(entity *ent, int wpnum, int anim_flag);
! entity *melee_find_target();
! entity *long_find_target();
! entity *normal_find_target(int anim, int iDetect);
! entity *normal_find_item();
! int long_attack();
! int melee_attack();
! void dothrow();
! void doprethrow();
  void dograbattack(int which);
! e_animations do_grab_attack_finish(entity *ent, int which);
! int check_special();
! void normal_prepare();
! void common_jump();
! void common_spawn(void);
! void common_drop(void);
! void common_walkoff(void);
! void common_jumpattack();
! void common_turn();
! void common_fall();
! void common_lie();
! void common_rise();
! void common_pain();
! void common_get();
! void common_land();
! void common_grab(void);
! void common_grabattack();
! void common_grabbed();
! void common_block(void);
! int arrow_takedamage(entity *other, s_collision_attack *attack, int fall_flag);
! int common_takedamage(entity *other, s_collision_attack *attack, int fall_flag);
! int normal_attack();
! void common_throw(void);
! void common_throw_wait(void);
! void common_prethrow(void);
! void npc_warp();
! int checkpathblocked();
! int common_trymove(float xdir, float zdir);
! void normal_runoff();
! void common_animation_normal();
! void common_attack_proc();
! void normal_attack_finish();
! entity *common_find_target();
! int common_attack(void);
! int common_try_jump(void);
! int common_try_pick(entity *other);
! int common_try_chase(entity *target, int dox, int doz);
! int common_try_follow(entity *target, int dox, int doz);
! int common_try_avoid(entity *target, int dox, int doz);
! int common_try_wandercompletely(int dox, int doz);
! int common_try_wander(entity *target, int dox, int doz);
! void common_pickupitem(entity *other);
! int common_backwalk_anim(entity *ent);
! void draw_position_entity(entity *entity, int offset_z, int color, s_drawmethod *drawmethod);
! void draw_box_on_entity(entity *entity, int pos_x, int pos_y, int pos_z, int size_w, int size_h, int offset_z, int color, s_drawmethod *drawmethod);
! void draw_visual_debug();
! int bomb_move(void);
! int arrow_move(void);
! int common_move(void);
! void common_think(void);
! void suicide(void);
! void prethrow(void);
! void player_die();
! int player_trymove(float xdir, float zdir);
! int check_energy(e_cost_check which, int ani);
! int player_preinput();
! int player_check_special();
! void runanimal(void);
! void player_blink(void);
! int check_combo();
! int check_costmove(int s, int fs, int jumphack);
! void didfind_item(entity *other);
! void player_think(void);
! void subtract_shot();
! void dropweapon(int flag);
! void drop_all_enemies();
! void kill_all_enemies();
! void smart_bomb(entity *e, s_collision_attack *attack);
! void anything_walk(void);
  entity *knife_spawn(char *name, int index, float x, float z, float a, int direction, int type, int map);
! entity *boomerang_spawn(char *name, int index, float x, float z, float a, int direction, int map);
! entity *bomb_spawn(char *name, int index, float x, float z, float a, int direction, int map);
! void bomb_explode(void);
! int star_spawn(float x, float z, float a, int direction);
! void steam_think(void);
! void trap_think(void);
! void steam_spawn(float x, float z, float a);
! void steamer_think(void);
! void text_think(void);
! entity *homing_find_target(int type);
! void biker_drive(void);
! void bike_crash(void);
! void obstacle_fall(void);
! void obstacle_fly(void);
! entity *smartspawn(s_spawn_entry *props);
! int is_incam(float x, float z, float a, float threshold);
! void spawnplayer(int index);
! void time_over();
! void update_scroller();
! void draw_scrolled_bg();
! void update(int ingame, int usevwait);
! void fade_out(int type, int speed);
! void apply_controls();
! void plan();
  int is_in_backrun(entity*);
! int ai_check_ducking();
! int ai_check_warp();
! int ai_check_lie();
! int ai_check_grabbed();
! int ai_check_grab();
! int ai_check_escape();
! int ai_check_busy();
! void display_credits(void);
! void borShutdown(int status, char *msg, ...);
! #ifdef DC
! void guistartup(void);
! #endif
! void startup(void);
! int playgif(char *filename, int x, int y, int noskip);
! void playscene(char *filename);
! void gameover();
! void hallfame(int addtoscore);
! void showcomplete(int num);
! int playlevel(char *filename);
! int selectplayer(int *players, char *filename, int useSavedGame);
! void playgame(int *players,  unsigned which_set, int useSavedGame);
! int load_saved_game();
! void term_videomodes();
! void init_videomodes(int log);
! void safe_set(int *arr, int index, int newkey, int oldkey);
! 
! void keyboard_setup_menu(int player);
! void keyboard_setup(int player);
! void inputrefresh();
! 
! int menu_difficulty();
! void menu_options();
! void menu_options_config();
! void menu_options_debug();
! void menu_options_input();
! void menu_options_sound();
! void menu_options_soundcard();
! void menu_options_system();
! void menu_options_video();
! 
! void openborMain(int argc, char **argv);
! int is_cheat_actived();
! int getValidInt(char *text, char *file, char *cmd);
! float getValidFloat(char *text, char *file, char *cmd);
! int dograb(entity *attacker, entity *target, e_dograb_adjustcheck adjustcheck);
! int stopRecordInputs(void);
! int recordInputs(void);
! int playRecordedInputs(void);
! int freeRecordedInputs(void);
! a_playrecstatus* init_input_recorder(void);
! void free_input_recorder(void);
! void goto_mainmenu(int);
! 
! extern s_savelevel   *savelevel;
! extern s_savescore    savescore;
! 
! #endif
Only in engine mod: openborCOPY.c
diff -crB engine/openborscript.c "engine mod/openborscript.c"
*** engine/openborscript.c	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/openborscript.c"	2018-10-31 06:09:43.000000000 +0100
***************
*** 1,52 ****
! /*
!  * OpenBOR - http://www.chronocrash.com
!  * -----------------------------------------------------------------------
!  * All rights reserved, see LICENSE in OpenBOR root for details.
!  *
!  * Copyright (c) 2004 - 2017 OpenBOR Team
!  */
! 
! /* This file include all script methods used by openbor engine
! 
!  Notice: Make sure to null *pretvar when you about to return E_FAIL,
! 		 Or the engine might crash.
! 
!  Notice: Every new ScriptVariant must be initialized when you first alloc it by
! 		 ScriptVariant_Init immediately, memset it all to zero should also work by now,
! 		 unless VT_EMPTY is changed.
! 
! 		 If you want to reset a ScriptVariant to empty, you must use ScriptVariant_Clear instead.
! 		 ScriptVariant_Init or memset must be called only ONCE, later you should use ScriptVariant_Clear.
! 
! 		 Be sure to call ScriptVariant_Clear if you want to use free to delete those variants.
! 
! 		 If you want to copy a ScriptVariant from another, use ScriptVariant_Copy instead of assignment,
! 		 not because it is faster, but this method is neccessary for string types.
! 
! 		 If you want to change types of an ScriptVariant, use ScriptVariant_ChangeType, don't change vt directly.
! 
! */
! 
! #include "config.h"
! #include "openbor.h"
! #include "soundmix.h"
! #include "globals.h"
! #include "ImportCache.h"
! #include "models.h"
! #include "scriptcommon.h"
! 
! Varlist global_var_list;
! Script *pcurrentscript = NULL; //used by local script functions
! List theFunctionList;
! static List   scriptheap;
! static s_spawn_entry spawnentry;
! static s_drawmethod drawmethod;
! 
! int            max_indexed_vars = 0;
! int            max_entity_vars = 0;
! int            max_script_vars = 0;
  int			   no_nested_script = 0;
  
  extern int  ent_count;
  extern int  ent_max;
  extern int  gameOver;
--- 1,53 ----
! /*
!  * OpenBOR - http://www.chronocrash.com
!  * -----------------------------------------------------------------------
!  * All rights reserved, see LICENSE in OpenBOR root for details.
!  *
!  * Copyright (c) 2004 - 2017 OpenBOR Team
!  */
! 
! /* This file include all script methods used by openbor engine
! 
!  Notice: Make sure to null *pretvar when you about to return E_FAIL,
! 		 Or the engine might crash.
! 
!  Notice: Every new ScriptVariant must be initialized when you first alloc it by
! 		 ScriptVariant_Init immediately, memset it all to zero should also work by now,
! 		 unless VT_EMPTY is changed.
! 
! 		 If you want to reset a ScriptVariant to empty, you must use ScriptVariant_Clear instead.
! 		 ScriptVariant_Init or memset must be called only ONCE, later you should use ScriptVariant_Clear.
! 
! 		 Be sure to call ScriptVariant_Clear if you want to use free to delete those variants.
! 
! 		 If you want to copy a ScriptVariant from another, use ScriptVariant_Copy instead of assignment,
! 		 not because it is faster, but this method is neccessary for string types.
! 
! 		 If you want to change types of an ScriptVariant, use ScriptVariant_ChangeType, don't change vt directly.
! 
! */
! 
! #include "config.h"
! #include "openbor.h"
! #include "soundmix.h"
! #include "globals.h"
! #include "ImportCache.h"
! #include "models.h"
! #include "scriptcommon.h"
! 
! Varlist global_var_list;
! Script *pcurrentscript = NULL; //used by local script functions
! List theFunctionList;
! static List   scriptheap;
! static s_spawn_entry spawnentry;
! static s_drawmethod drawmethod;
! 
! int            max_indexed_vars = 0;
! int            max_entity_vars = 0;
! int            max_script_vars = 0;
  int			   no_nested_script = 0;
  
+ extern int  finisheds_games_count;
  extern int  ent_count;
  extern int  ent_max;
  extern int  gameOver;
***************
*** 120,3637 ****
  extern int shadowopacity;
  extern s_axis_plane_vertical_int light;
  extern int max_attack_types;
! extern int max_animations;
! 
! static void clear_named_var_list(List *list, int level)
! {
!     ScriptVariant *var;
!     int i, size;
!     size = List_GetSize(list);
!     for(i = 0, List_Reset(list); i < size; i++)
!     {
!         var = (ScriptVariant *)List_Retrieve(list);
!         ScriptVariant_Clear(var);
!         free(var);
!         List_Remove(list);
!     }
!     if(level)
!     {
!         List_Clear(list);
!     }
! }
! 
! void Varlist_Init(Varlist *varlist, int size)
! {
!     int i;
! 
!     varlist->magic = varlist_magic;
!     varlist->list = calloc(1, sizeof(*varlist->list));
!     List_Init(varlist->list);
!     varlist->vars = calloc(size + 1, sizeof(*varlist->vars));
!     for(i = 0; i <= size; i++)
!     {
!         ScriptVariant_Init(varlist->vars + i);
!         ScriptVariant_ChangeType(varlist->vars, VT_INTEGER);
!         varlist->vars->lVal = (LONG)size;
!     }
! }
! 
! void Varlist_Clear(Varlist *varlist)
! {
!     int i;
!     clear_named_var_list(varlist->list, 1);
!     free(varlist->list);
!     varlist->list = NULL;
!     // the first one must be an integer variable, so it's safe to leave it alone
!     for(i = 1; i <= varlist->vars->lVal; i++)
!     {
!         ScriptVariant_Clear(varlist->vars + i);
!     }
!     free(varlist->vars);
!     varlist->vars = NULL;
!     varlist->magic = 0;
! }
! 
! void Varlist_Cleanup(Varlist *varlist)
! {
!     int i;
!     clear_named_var_list(varlist->list, 0);
!     for(i = 1; i <= varlist->vars->lVal; i++)
!     {
!         ScriptVariant_Clear(varlist->vars + i);
!     }
! }
! 
! ScriptVariant *Varlist_GetByName(Varlist *varlist, char *theName)
! {
!     if(!theName || !theName[0])
!     {
!         return NULL;
!     }
! 
!     if(List_FindByName(varlist->list, theName))
!     {
!         return (ScriptVariant *)List_Retrieve(varlist->list);
!     }
! 
!     return NULL;
! }
! 
! int Varlist_SetByName(Varlist *varlist, char *theName, ScriptVariant *var)
! {
!     ScriptVariant *v;
!     if(!theName || !theName[0])
!     {
!         return 0;
!     }
!     if(List_FindByName(varlist->list, theName))
!     {
!         ScriptVariant_Copy((ScriptVariant *)List_Retrieve(varlist->list), var);
!     }
!     else
!     {
!         v = calloc(1, sizeof(*v));
!         ScriptVariant_Copy(v, var);
!         List_InsertAfter(varlist->list, v, theName);
!     }
!     return 1;
! }
! 
! ScriptVariant *Varlist_GetByIndex(Varlist *varlist, int index)
! {
!     if(index < 0 || index >= varlist->vars->lVal)
!     {
!         return NULL;
!     }
!     return varlist->vars + index + 1;
! }
! 
! int Varlist_SetByIndex(Varlist *varlist, int index, ScriptVariant *var)
! {
!     if(index < 0)
!     {
!         return 0;
!     }
!     else if(index >= varlist->vars->lVal)
!     {
!         __reallocto(varlist->vars, varlist->vars->lVal + 1, index + 2);
!         varlist->vars->lVal = index + 1;
!     }
!     ScriptVariant_Copy(varlist->vars + index + 1, var);
!     return 1;
! }
! 
! // By White Dragon
! int Varlist_AddByIndex(Varlist *array, int index, ScriptVariant *var)
! {
!     if(index < 0 || index >= array->vars->lVal+1)
!     {
!         return 0;
!     }
!     else
!     {
!         int i = 0;
!         int size = array->vars->lVal;
! 
!         __reallocto(array->vars, size+1, size+2);
!         size = ++array->vars->lVal;
! 
!         for ( i = size-1; i > index; i-- )
!         {
!             ScriptVariant_Copy(array->vars+1+i, array->vars+1+i-1); // first value of array is his size!
!         }
!         ScriptVariant_Copy(array->vars+1+index, var);
! 
!         //printf("aaa: %s\n", (char*)StrCache_Get(elem->strVal) );
!     }
! 
!     return 1;
! }
! 
! // By White Dragon
! int Varlist_DeleteByIndex(Varlist *array, int index)
! {
!     if(index < 0 || index >= array->vars->lVal)
!     {
!         return 0;
!     }
!     else
!     {
!         int i = 0;
!         int size = array->vars->lVal;
!         ScriptVariant *elem;
! 
!         for ( i = index; i < size-1; i++ )
!         {
!             ScriptVariant_Copy(array->vars+1+i, array->vars+1+i+1); // first value of array is his size!
!         }
!         --array->vars->lVal;
! 
!         // set last element to NULL
!         elem = array->vars+1+size-1;
!         ScriptVariant_ChangeType(elem, VT_EMPTY);
!         elem->ptrVal = NULL;
! 
!         //realloc mem
!         array->vars = realloc((array->vars), sizeof(*(array->vars))*(array->vars->lVal+1));
! 
!         //printf("aaa: %s\n", (char*)StrCache_Get(elem->strVal) );
!     }
! 
!     return 1;
! }
! 
! // By White Dragon
! int Varlist_DeleteByName(Varlist *array, char *theName)
! {
!     if(!theName || !theName[0])
!     {
!         return 0;
!     }
!     if(List_FindByName(array->list, theName))
!     {
!         Node* node;
!         Node* prev_node;
!         Node* next_node;
! 
!         node = array->list->current;
!         prev_node = node->prev;
!         next_node = node->next;
! 
!         if ( prev_node ) prev_node->next = next_node;
!         if ( next_node ) next_node->prev = prev_node;
! 
!         if ( array->list->last == node ) array->list->last = prev_node;
!         if ( array->list->first == node ) array->list->first = next_node;
!         if ( array->list->first == array->list->last && array->list->first == node ) {
!             array->list->last = NULL;
!             array->list->first = NULL;
!         }
! 
!         --array->list->size;
! 
!         free(node);
!     } else return 0;
! 
!     return 1;
! }
! 
! //this function should be called before all script methods, for once
! void Script_Global_Init()
! {
!     memset(&spawnentry, 0, sizeof(spawnentry)); //clear up the spawn entry
!     drawmethod = plainmethod;
! 
!     Varlist_Init(&global_var_list, max_indexed_vars);
! 
!     List_Init(&theFunctionList);
!     Script_LoadSystemFunctions();
!     List_Init(&scriptheap);
!     ImportCache_Init(&theFunctionList);
! }
! 
! void _freeheapnode(void *ptr)
! {
!     if(((Script *)ptr)->magic == script_magic)
!     {
!         Script_Clear((Script *)ptr, 2);
!     }
!     else if(((anigif_info *)ptr)->magic == anigif_magic)
!     {
!         anigif_close((anigif_info *)ptr);
!     }
!     else if(((Varlist *)ptr)->magic == varlist_magic)
!     {
!         Varlist_Clear((Varlist *)ptr);
!     }
!     else if(((s_sprite *)ptr)->magic == sprite_magic)
!     {
!         if(((s_sprite *)ptr)->mask)
!         {
!             free(((s_sprite *)ptr)->mask);
!         }
!     }
!     free(ptr);
! }
! 
! //this function should only be called when the engine is shutting down
! void Script_Global_Clear()
! {
!     int i, size;
!     List_Clear(&theFunctionList);
!     // dump all un-freed variants
!     size = List_GetSize(&scriptheap);
!     if(size > 0)
!     {
!         printf("\nWarning: %d script variants are not freed, dumping...\n", size);
!     }
!     for(i = 0, List_Reset(&scriptheap); i < size; List_GotoNext(&scriptheap), i++)
!     {
!         printf("%s\n", List_GetName(&scriptheap));
!         _freeheapnode(List_Retrieve(&scriptheap));
!     }
!     List_Clear(&scriptheap);
!     // clear the global list
!     Varlist_Clear(&global_var_list);
! 
!     memset(&spawnentry, 0, sizeof(spawnentry));//clear up the spawn entry
!     for(i = 0; i < numfilestreams; i++)
!     {
!         if(filestreams[i].buf)
!         {
!             free(filestreams[i].buf);
!             filestreams[i].buf = NULL;
!         }
!     }
!     if(filestreams)
!     {
!         free(filestreams);
!     }
!     filestreams = NULL;
!     numfilestreams = 0;
!     ImportCache_Clear();
!     StrCache_Clear();
! }
! 
! int Script_Save_Local_Variant(Script *cs, char *namelist[])
! {
!     return 0;
! }
! 
! void Script_Load_Local_Variant(Script *cs, int handle)
! {
! 
! }
! 
! Script *alloc_script()
! {
!     Script *pscript = calloc(1, sizeof(*pscript));
!     pscript->magic = script_magic;
!     pscript->varlist = calloc(1, sizeof(*pscript->varlist));
!     Varlist_Init(pscript->varlist, max_script_vars);
!     return pscript;
! }
! 
! void Script_Init(Script *pscript, char *theName, char *comment, int first)
! {
!     if(first)
!     {
!         memset(pscript, 0, sizeof(*pscript));
!         pscript->magic = script_magic;
!         pscript->varlist = calloc(1, sizeof(*pscript->varlist));
!         Varlist_Init(pscript->varlist, max_script_vars);
!     }
!     if(!theName || !theName[0])
!     {
!         return;    // if no name specified, only alloc the variants
!     }
! 
!     pscript->pinterpreter = malloc(sizeof(*pscript->pinterpreter));
!     Interpreter_Init(pscript->pinterpreter, theName, &theFunctionList);
!     pscript->interpreterowner = 1; // this is the owner, important
!     pscript->initialized = 1;
!     if(comment)
!     {
!         pscript->comment = malloc(sizeof(*pscript->comment) * (strlen(comment) + 1));
!         strcpy(pscript->comment, comment);
!     }
! }
! 
! static void execute_init_method(Script *pdest, int iscopy, int localclear)
! {
!     Script *temp;
!     ScriptVariant tempvar;
!     //Execute init method
!     if(pdest->initialized && pdest->pinterpreter->pInitEntry)
!     {
!         temp = pcurrentscript;
!         pcurrentscript = pdest;
! 
!         ScriptVariant_Init(&tempvar);
!         ScriptVariant_ChangeType(&tempvar, VT_INTEGER);
!         tempvar.lVal = (LONG)iscopy;
!         Script_Set_Local_Variant(pdest, "iscopy", &tempvar);
!         tempvar.lVal = (LONG)localclear;
!         Script_Set_Local_Variant(pdest, "localclear", &tempvar);
!         Interpreter_Reset(pdest->pinterpreter);
!         pdest->pinterpreter->pCurrentInstruction = pdest->pinterpreter->pInitEntry;
!         if(FAILED( Interpreter_EvaluateCall(pdest->pinterpreter)))
!         {
!             borShutdown(1, "Fatal: failed to execute 'init' in script %s %s", pdest->pinterpreter->theSymbolTable.name, pdest->comment ? pdest->comment : "");
!         }
!         pdest->pinterpreter->bReset = FALSE; // not needed, perhaps
!         ScriptVariant_Clear(&tempvar);
!         Script_Set_Local_Variant(pdest, "iscopy", &tempvar);
!         Script_Set_Local_Variant(pdest, "localclear", &tempvar);
!         pcurrentscript = temp;
!     }
! }
! 
! //safe copy method
! void Script_Copy(Script *pdest, Script *psrc, int localclear)
! {
!     if(!psrc->initialized)
!     {
!         return;
!     }
!     if(pdest->initialized)
!     {
!         Script_Clear(pdest, localclear);
!     }
!     pdest->pinterpreter = psrc->pinterpreter;
!     pdest->comment = psrc->comment;
!     pdest->interpreterowner = 0; // dont own it
!     pdest->initialized = psrc->initialized; //just copy, it should be 1
!     execute_init_method(pdest, 1, localclear);
! }
! 
! void Script_Clear(Script *pscript, int localclear)
! {
!     Script *temp;
!     Varlist *pvars;
! 
!     ScriptVariant tempvar;
!     //Execute clear method
!     if(pscript->initialized && pscript->pinterpreter->pClearEntry)
!     {
!         temp = pcurrentscript;
!         pcurrentscript = pscript;
! 
!         ScriptVariant_Init(&tempvar);
!         ScriptVariant_ChangeType(&tempvar, VT_INTEGER);
!         tempvar.lVal = (LONG)localclear;
!         Script_Set_Local_Variant(pscript, "localclear", &tempvar);
!         Interpreter_Reset(pscript->pinterpreter);
!         pscript->pinterpreter->pCurrentInstruction = pscript->pinterpreter->pClearEntry;
!         if(FAILED( Interpreter_EvaluateCall(pscript->pinterpreter)))
!         {
!             borShutdown(1, "Fatal: failed to execute 'clear' in script %s %s", pscript->pinterpreter->theSymbolTable.name, pscript->comment ? pscript->comment : "");
!         }
!         pscript->pinterpreter->bReset = FALSE; // not needed, perhaps
!         ScriptVariant_Clear(&tempvar);
!         Script_Set_Local_Variant(pscript, "localclear", &tempvar);
!         pcurrentscript = temp;
!     }
! 
!     if(localclear && pscript->varlist)
!     {
!         if(localclear == 2)
!         {
!             Varlist_Clear(pscript->varlist);
!             free(pscript->varlist);
!             pscript->varlist = NULL;
!         }
!         else
!         {
!             Varlist_Cleanup(pscript->varlist);
!         }
!     }
!     if(!pscript->initialized)
!     {
!         return;
!     }
! 
!     //if it is the owner, free the interpreter
!     if(pscript->pinterpreter && pscript->interpreterowner)
!     {
!         Interpreter_Clear(pscript->pinterpreter);
!         free(pscript->pinterpreter);
!         pscript->pinterpreter = NULL;
!         if(pscript->comment)
!         {
!             free(pscript->comment);
!         }
!         pscript->comment = NULL;
!     }
!     pvars = pscript->varlist; // in game clear(localclear!=2) just keep this value
!     memset(pscript, 0, sizeof(*pscript));
!     pscript->varlist = pvars; // copy it back
! }
! 
! //append part of the script
! //Because the script might not be initialized in 1 time.
! int Script_AppendText(Script *pscript, char *text, char *path)
! {
!     int success;
! 
!     //printf(text);
!     Interpreter_Reset(pscript->pinterpreter);
! 
!     success = SUCCEEDED(Interpreter_ParseText(pscript->pinterpreter, text, 1, path));
! 
!     return success;
! }
! 
! /* Replace string constants with enum constants at compile time to speed up
!    script execution. */
! int Script_MapStringConstants(Instruction *pInstruction)
! {
!     ScriptVariant **params;
!     int paramCount;
!     int (*pMapstrings)(ScriptVariant **, int);
! 
!     if(pInstruction->functionRef)
!     {
!         params = (ScriptVariant **)pInstruction->theRefList->solidlist;
!         paramCount = (int)pInstruction->theRef->lVal;
!         assert(paramCount <= 32);
!         // Get the pointer to the correct mapstrings function, if one exists.
!         pMapstrings = Script_GetStringMapFunction(pInstruction->functionRef);
!         if(pMapstrings)
!         {
!             // Call the mapstrings function.
!             if(!pMapstrings(params, paramCount))
!             {
!                 return 0;
!             }
!         }
!     }
! 
!     return 1;
! }
! 
! //should be called only once after parsing text
! int Script_Compile(Script *pscript)
! {
!     int result;
!     if(!pscript || !pscript->pinterpreter)
!     {
!         return 1;
!     }
!     //Interpreter_OutputPCode(pscript->pinterpreter, "code");
!     result = SUCCEEDED(Interpreter_CompileInstructions(pscript->pinterpreter));
!     if(!result)
!     {
!         borShutdown(1, "Can't compile script '%s' %s\n", pscript->pinterpreter->theSymbolTable.name, pscript->comment ? pscript->comment : "");
!     }
! 
!     pscript->pinterpreter->bReset = FALSE;
!     execute_init_method(pscript, 0, 1);
!     return result;
! }
! 
! int Script_IsInitialized(Script *pscript)
! {
!     //if(pscript && pscript->initialized) pcurrentscript = pscript; //used by local script functions
!     return pscript->initialized;
! }
! 
! //execute the script
! int Script_Execute(Script *pscript)
! {
!     int result, nested;
!     extern int no_cmd_compatible;
!     Script *temp = pcurrentscript;
!     Interpreter tinter, *pinter;
!     pcurrentscript = pscript; //used by local script functions
!     nested = pscript->pinterpreter->bReset;
!     if(no_nested_script && nested)
!     {
!         result = 1;
!     }
!     else
!     {
!         pinter = pscript->pinterpreter;
!         if(nested && no_cmd_compatible)
!         {
!             tinter = *pinter;
!         }
!         Interpreter_Reset(pinter);
!         result = (int)SUCCEEDED(Interpreter_EvaluateImmediate(pinter));
!         if(nested && no_cmd_compatible)
!         {
!             *pinter = tinter;
!         }
!         else if(nested)
!         {
!             pinter->bReset = FALSE;
!         }
!     }
!     pcurrentscript = temp;
!     if(!result)
!     {
!         borShutdown(1, "There's an exception while executing script '%s' %s", pscript->pinterpreter->theSymbolTable.name, pscript->comment ? pscript->comment : "");
!     }
!     return result;
! }
! 
! static s_collision_attack attack;
! 
! //////////////////////////////////////////////////////////
! ////////////   system functions
! //////////////////////////////////////////////////////////
! //isempty(var);
! HRESULT system_isempty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     if(paramCount != 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
      ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     (*pretvar)->lVal = (LONG)( (varlist[0])->vt == VT_EMPTY );
! 
!     return S_OK;
! }
! //NULL();
! HRESULT system_NULL(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant_Clear(*pretvar);
! 
!     return S_OK;
! }
! HRESULT system_exit(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     pcurrentscript->pinterpreter->bReset = FALSE;
!     return S_OK;
! }
! HRESULT system_rand(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)rand32();
!     return S_OK;
! }
! HRESULT system_srand(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
! 
!     *pretvar = NULL;
!     if(paramCount != 1)
!     {
!         return E_FAIL;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         return E_FAIL;
!     }
! 
!     srand32(ltemp);
!     return S_OK;
! }
! //getglobalvar(varname);
! HRESULT system_getglobalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     ScriptVariant *ptmpvar;
! 
!     if(paramCount != 1)
!     {
!         goto ggv_error;
!     }
! 
!     if(varlist[0]->vt == VT_STR)
!     {
!         ptmpvar = Varlist_GetByName(&global_var_list, StrCache_Get(varlist[0]->strVal));
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         ptmpvar = Varlist_GetByIndex(&global_var_list, (LONG)ltemp);
!     }
!     else
!     {
!         goto ggv_error;
!     }
! 
!     if(ptmpvar)
!     {
!         ScriptVariant_Copy(*pretvar,  ptmpvar);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
!     return S_OK;
! 
! ggv_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! //setglobalvar(varname, value);
! HRESULT system_setglobalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     if(paramCount < 2)
!     {
!         goto sgv_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(varlist[0]->vt == VT_STR)
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByName(&global_var_list, StrCache_Get(varlist[0]->strVal), varlist[1]);
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByIndex(&global_var_list, (LONG)ltemp, varlist[1]);
!     }
!     else
!     {
!         goto sgv_error;
!     }
! 
!     return S_OK;
! sgv_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! //getlocalvar(varname);
! HRESULT system_getlocalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     ScriptVariant *ptmpvar;
! 
!     if(paramCount != 1)
!     {
!         goto glv_error;
!     }
! 
!     if(varlist[0]->vt == VT_STR)
!     {
!         ptmpvar = Varlist_GetByName(pcurrentscript->varlist, StrCache_Get(varlist[0]->strVal));
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         ptmpvar = Varlist_GetByIndex(pcurrentscript->varlist, (LONG)ltemp);
!     }
!     else
!     {
!         goto glv_error;
!     }
! 
!     if(ptmpvar)
!     {
!         ScriptVariant_Copy(*pretvar,  ptmpvar);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
!     return S_OK;
! 
! glv_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! //setlocalvar(varname, value);
! HRESULT system_setlocalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     if(paramCount < 2)
!     {
!         goto slv_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(varlist[0]->vt == VT_STR)
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByName(pcurrentscript->varlist, StrCache_Get(varlist[0]->strVal), varlist[1]);
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByIndex(pcurrentscript->varlist, (LONG)ltemp, varlist[1]);
!     }
!     else
!     {
!         goto slv_error;
!     }
! 
!     return S_OK;
! slv_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! //clearlocalvar();
! HRESULT system_clearlocalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     Varlist_Cleanup(pcurrentscript->varlist);
!     return S_OK;
! }
! //clearglobalvar();
! HRESULT system_clearglobalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     Varlist_Cleanup(&global_var_list);
!     return S_OK;
! }
! 
! //free();
! HRESULT system_free(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         return E_FAIL;
!     }
!     if(List_Includes(&scriptheap, varlist[0]->ptrVal))
!     {
!         _freeheapnode(List_Retrieve(&scriptheap));
!         // a script's ondestroy() may free something else and change the list
!         // position, so set the position to this variant again
!         List_Includes(&scriptheap, varlist[0]->ptrVal);
!         List_Remove(&scriptheap);
!         return S_OK;
!     }
!     return E_FAIL;
! }
! 
! //typeof(v);
! HRESULT system_typeof(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)varlist[0]->vt;
!     return S_OK;
! }
! 
! //////////////////////////////////////////////////////////
! ////////////   openbor functions
! //////////////////////////////////////////////////////////
! 
! //check openborscript.h for systemvariant_enum
! 
! // arranged list, for searching
! static const char *svlist[] =
! {
!     "background",
      "blockade",
!     "bossescount",
!     "branchname",
!     "cheats",
!     "count_enemies",
!     "count_entities",
!     "count_npcs",
!     "count_players",
!     "current_branch",
!     "current_level",
!     "current_palette",
!     "current_scene",
!     "current_set",
!     "current_stage",
!     "effectvol",
!     "elapsed_time",
!     "ent_max",
!     "fps",
!     "freeram",
!     "game_paused",
!     "game_speed",
!     "game_time",
!     "gfx_x_offset",
!     "gfx_y_offset",
!     "gfx_y_offset_adj",
!     "hresolution",
!     "in_cheat_options",
!     "in_control_options",
!     "in_enginecreditsscreen",
!     "in_gameoverscreen",
!     "in_halloffamescreen",
!     "in_level",
!     "in_load_game",
!     "in_menuscreen",
!     "in_new_game",
!     "in_options",
!     "in_selectscreen",
!     "in_showcomplete",
!     "in_sound_options",
!     "in_start_game",
!     "in_system_options",
!     "in_titlescreen",
!     "in_video_options",
!     "lasthita",
!     "lasthitc",
!     "lasthitt",
!     "lasthitx",
!     "lasthity",
!     "lasthitz",
!     "levelheight",
!     "levelpos",
!     "levelwidth",
!     "lightx",
!     "lightz",
!     "maxanimations",
!     "maxattacktypes",
!     "maxentityvars",
!     "maxglobalvars",
!     "maxindexedvars",
!     "maxplayers",
!     "maxscriptvars",
!     "maxsoundchannels",
!     "models_cached",
!     "models_loaded",
!     "musicvol",
!     "nofadeout",
!     "nogameover",
!     "nohof",
!     "nojoin",
!     "nopause",
!     "nosave",
!     "noscreenshot",
!     "noshowcomplete",
      "numbasemaps",
!     "numbosses",
!     "numholes",
!     "numlayers",
!     "numpalettes",
!     "numwalls",
!     "pakname",
!     "pause",
!     "pixelformat",
!     "player",
!     "player1",
!     "player2",
!     "player3",
!     "player4",
!     "player_max_z",
!     "player_min_z",
!     "porting",
!     "sample_play_id",
!     "scrollmaxx",
!     "scrollmaxz",
!     "scrollminx",
!     "scrollminz",
!     "self",
!     "sets_count",
!     "shadowalpha",
!     "shadowcolor",
!     "shadowopacity",
!     "skiptoset",
!     "slowmotion",
!     "slowmotion_duration",
!     "smartbomber",
!     "soundvol",
!     "textbox",
!     "ticks",
!     "totalram",
!     "usedram",
!     "viewporth",
!     "viewportw",
!     "viewportx",
!     "viewporty",
!     "vresolution",
!     "vscreen",
!     "waiting",
!     "xpos",
!     "ypos",
! };
! 
! 
! // ===== openborvariant =====
! int mapstrings_systemvariant(ScriptVariant **varlist, int paramCount)
! {
!     char *propname;
!     int prop;
! 
! 
!     MAPSTRINGS(varlist[0], svlist, _sv_the_end,
!                "openborvariant: System variable name not found: '%s'\n");
! 
!     return 1;
! }
! 
! //sample function, used for getting a system variant
! //openborvariant(varname);
! HRESULT openbor_systemvariant(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     //used for getting the index from the enum of properties
!     int variantindex = -1;
!     //the paramCount used for checking.
!     //check it first so the engine wont crash if the list is empty
!     if(paramCount != 1)
!     {
!         goto systemvariant_error;
!     }
!     //call this function's mapstrings function to map string constants to enum values
!     mapstrings_systemvariant(varlist, paramCount);
!     //the variant name should be here
!     //you can check the argument type if you like
!     if(varlist[0]->vt == VT_INTEGER)
!     {
!         variantindex = varlist[0]->lVal;
!     }
!     else
!     {
!         goto systemvariant_error;
!     }
!     ///////these should be your get method, ///////
!     ScriptVariant_Clear(*pretvar);
!     if(getsyspropertybyindex(*pretvar, variantindex))
!     {
!         return S_OK;
!     }
!     //else if
!     //////////////////////////////////////////////
! systemvariant_error:
!     *pretvar = NULL;
!     // we have finshed, so return
!     return E_FAIL;
! }
! 
! 
! //used for changing a system variant
! //setopenborvariant(varname, value);
! HRESULT openbor_setsystemvariant(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     //used for getting the enum constant corresponding to the desired variable
!     int variantindex = 0;
!     //reference to the arguments
!     ScriptVariant *arg = NULL;
!     //the paramCount used for checking.
!     //check it first so the engine wont crash if the list is empty
!     if(paramCount != 2)
!     {
!         goto changesystemvariant_error;
!     }
!     // map string constants to enum constants for speed
!     mapstrings_systemvariant(varlist, paramCount);
!     //get the 1st argument
!     arg = varlist[0];
!     //the variant name should be here
!     //you can check the argument type if you like
!     if(arg->vt == VT_INTEGER)
!     {
!         variantindex = arg->lVal;
!     }
!     else
!     {
!         goto changesystemvariant_error;
!     }
! 
!     if(changesyspropertybyindex(variantindex, varlist[1]))
!     {
!         return S_OK;
!     }
! changesystemvariant_error:
!     *pretvar = NULL;
!     // we have finshed, so return
!     return E_FAIL;
! 
! }
! 
! // use font_printf to draw string
! //drawstring(x, y, font, string, z);
! HRESULT openbor_drawstring(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     char buf[MAX_BUFFER_LEN];
!     LONG value[4];
!     *pretvar = NULL;
! 
!     if(paramCount < 4)
!     {
!         goto drawstring_error;
!     }
! 
!     for(i = 0; i < 3; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i)))
!         {
!             goto drawstring_error;
!         }
!     }
!     if(paramCount > 4)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[4], value + 3)))
!         {
!             goto drawstring_error;
!         }
!     }
!     else
!     {
!         value[3] = 0;
!     }
!     ScriptVariant_ToString(varlist[3], buf);
!     font_printf((int)value[0], (int)value[1], (int)value[2], (int)value[3], "%s", buf);
!     return S_OK;
! 
! drawstring_error:
!     printf("First 3 values must be integer values and 4th value a string: drawstring(int x, int y, int font, value)\n");
!     return E_FAIL;
! }
! 
! //use screen_printf
! //drawstringtoscreen(screen, x, y, font, string);
! HRESULT openbor_drawstringtoscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     s_screen *scr;
!     char buf[MAX_BUFFER_LEN];
!     LONG value[3];
!     *pretvar = NULL;
! 
!     if(paramCount != 5)
!     {
!         goto drawstring_error;
!     }
! 
!     if(varlist[0]->vt != VT_PTR)
!     {
!         goto drawstring_error;
!     }
!     scr = (s_screen *)varlist[0]->ptrVal;
!     if(!scr)
!     {
!         goto drawstring_error;
!     }
! 
!     for(i = 0; i < 3; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i + 1], value + i)))
!         {
!             goto drawstring_error;
!         }
!     }
! 
!     ScriptVariant_ToString(varlist[4], buf);
!     screen_printf(scr, (int)value[0], (int)value[1], (int)value[2], "%s", buf);
!     return S_OK;
! 
! drawstring_error:
!     printf("Function needs a valid screen handle, 3 integers and a string value: drawstringtoscreen(screen, int font, value)\n");
!     return E_FAIL;
! }
! 
! // debug purpose
! //log(string);
! HRESULT openbor_log(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     char buf[MAX_BUFFER_LEN];
!     *pretvar = NULL;
! 
!     if(paramCount != 1)
!     {
!         goto drawstring_error;
!     }
! 
!     ScriptVariant_ToString(varlist[0], buf);
!     printf("%s", buf);
!     return S_OK;
! 
! drawstring_error:
!     printf("Function needs 1 parameter: log(value)\n");
!     return E_FAIL;
! }
! 
! //drawbox(x, y, width, height, z, color, lut);
! HRESULT openbor_drawbox(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[6], l;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 6)
!     {
!         goto drawbox_error;
!     }
! 
!     for(i = 0; i < 6; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i)))
!         {
!             goto drawbox_error;
!         }
!     }
! 
!     if(paramCount > 6)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[6], &l)))
!         {
!             goto drawbox_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0)
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
!     spriteq_add_box((int)value[0], (int)value[1], (int)value[2], (int)value[3], (int)value[4], (int)value[5], &dm);
! 
!     return S_OK;
! 
! drawbox_error:
!     printf("Function requires 6 integer values: drawbox(int x, int y, int width, int height, int z, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! //drawboxtoscreen(screen, x, y, width, height, color, lut);
! HRESULT openbor_drawboxtoscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     s_screen *s;
!     LONG value[5], l;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 6)
!     {
!         goto drawbox_error;
!     }
! 
!     s = (s_screen *)varlist[0]->ptrVal;
! 
!     if(!s)
!     {
!         goto drawbox_error;
!     }
! 
!     for(i = 1; i < 6; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawbox_error;
!         }
!     }
! 
!     if(paramCount > 6)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[6], &l)))
!         {
!             goto drawbox_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0)
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
! 
!     putbox((int)value[0], (int)value[1], (int)value[2], (int)value[3], (int)value[4], s, &dm);
! 
!     return S_OK;
! 
! drawbox_error:
!     printf("Function requires a screen handle and 5 integer values, 7th integer value is optional: drawboxtoscreen(screen, int x, int y, int width, int height, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! //drawline(x1, y1, x2, y2, z, color, lut);
! HRESULT openbor_drawline(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[6], l;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 6)
!     {
!         goto drawline_error;
!     }
! 
!     for(i = 0; i < 6; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i)))
!         {
!             goto drawline_error;
!         }
!     }
! 
!     if(paramCount > 6)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[6], &l)))
!         {
!             goto drawline_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0 )
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
!     spriteq_add_line((int)value[0], (int)value[1], (int)value[2], (int)value[3], (int)value[4], (int)value[5], &dm);
! 
!     return S_OK;
! 
! drawline_error:
!     printf("Function requires 6 integer values, 7th integer value is optional: drawline(int x1, int y1, int x2, int y2, int z, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! //drawlinetoscreen(screen, x1, y1, x2, y2, color, lut);
! HRESULT openbor_drawlinetoscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[5], l;
!     s_screen *s;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 6)
!     {
!         goto drawline_error;
!     }
! 
!     s = (s_screen *)varlist[0]->ptrVal;
! 
!     if(!s)
!     {
!         goto drawline_error;
!     }
! 
!     for(i = 1; i < 6; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawline_error;
!         }
!     }
! 
!     if(paramCount > 6)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[6], &l)))
!         {
!             goto drawline_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0 )
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
!     putline((int)value[0], (int)value[1], (int)value[2], (int)value[3], (int)value[4], s, &dm);
! 
!     return S_OK;
! drawline_error:
!     printf("Function requires a screen handle and 5 integer values, 7th integer value is optional: drawlinetoscreen(screen, int x1, int y1, int x2, int y2, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! //drawsprite(sprite, x, y, z, sortid);
! HRESULT openbor_drawsprite(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[4];
!     s_sprite *spr;
!     *pretvar = NULL;
! 
!     if(paramCount < 4)
!     {
!         goto drawsprite_error;
!     }
!     if(varlist[0]->vt != VT_PTR)
!     {
!         goto drawsprite_error;
!     }
! 
!     spr = varlist[0]->ptrVal;
!     if(!spr)
!     {
!         goto drawsprite_error;
!     }
! 
!     value[3] = (LONG)0;
!     for(i = 1; i < paramCount && i < 5; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawsprite_error;
!         }
!     }
! 
!     spriteq_add_frame((int)value[0], (int)value[1], (int)value[2], spr, &drawmethod, (int)value[3]);
! 
!     return S_OK;
! 
! drawsprite_error:
!     printf("Function requires a valid sprite handle 3 integer values, 5th integer value is optional: drawsprite(sprite, int x, int y, int z, int sortid)\n");
!     return E_FAIL;
! }
! 
! //drawspritetoscreen(sprite, screen, x, y);
! HRESULT openbor_drawspritetoscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[2];
!     s_sprite *spr;
!     s_screen *scr;
!     *pretvar = NULL;
! 
!     if(paramCount < 4)
!     {
!         goto drawsprite_error;
!     }
!     if(varlist[0]->vt != VT_PTR)
!     {
!         goto drawsprite_error;
!     }
!     spr = varlist[0]->ptrVal;
!     if(!spr)
!     {
!         goto drawsprite_error;
!     }
! 
!     if(varlist[1]->vt != VT_PTR)
!     {
!         goto drawsprite_error;
!     }
!     scr = varlist[1]->ptrVal;
!     if(!scr)
!     {
!         goto drawsprite_error;
!     }
! 
!     for(i = 2; i < paramCount && i < 4; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 2)))
!         {
!             goto drawsprite_error;
!         }
!     }
! 
!     putsprite((int)value[0], (int)value[1], spr, scr, &drawmethod);
! 
!     return S_OK;
! 
! drawsprite_error:
!     printf("Function requires a valid sprite handle, a valid screen handle and 2 integer values: drawspritetoscreen(sprite, screen, int x, int y)\n");
!     return E_FAIL;
! }
! 
! //drawdot(x, y, z, color, lut);
! HRESULT openbor_drawdot(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[4], l;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 4)
!     {
!         goto drawdot_error;
!     }
! 
!     for(i = 0; i < 4; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i)))
!         {
!             goto drawdot_error;
!         }
!     }
! 
!     if(paramCount > 4)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[4], &l)))
!         {
!             goto drawdot_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0 )
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
!     spriteq_add_dot((int)value[0], (int)value[1], (int)value[2], (int)value[3], &dm);
! 
!     return S_OK;
! 
! drawdot_error:
!     printf("Function requires 4 integer values, 5th integer value is optional: drawdot(int x, int y, int z, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! //drawdottoscreen(screen, x, y, color, lut);
! HRESULT openbor_drawdottoscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[3], l;
!     s_screen *s;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 4)
!     {
!         goto drawdot_error;
!     }
! 
!     s = (s_screen *)varlist[0]->ptrVal;
! 
!     if(!s)
!     {
!         goto drawdot_error;
!     }
! 
!     for(i = 1; i < 4; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawdot_error;
!         }
!     }
! 
!     if(paramCount > 4)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[4], &l)))
!         {
!             goto drawdot_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0 )
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
! 
!     putpixel((int)value[0], (int)value[1], (int)value[2], s, &dm);
! 
!     return S_OK;
! 
! drawdot_error:
!     printf("Function requires a screen handle and 3 integer values, 5th integer value is optional: dottoscreen(screen, int x, int y, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! 
! //drawscreen(screen, x, y, z, lut);
! HRESULT openbor_drawscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[3], l;
!     s_screen *s;
!     s_drawmethod screenmethod;
!     *pretvar = NULL;
! 
!     if(paramCount < 4)
!     {
!         goto drawscreen_error;
!     }
! 
!     s = (s_screen *)varlist[0]->ptrVal;
! 
!     if(!s)
!     {
!         goto drawscreen_error;
!     }
! 
!     for(i = 1; i < 4; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawscreen_error;
!         }
!     }
! 
!     if(paramCount > 4)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[4], &l)))
!         {
!             goto drawscreen_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0 )
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(paramCount <= 4)
!     {
!         screenmethod = drawmethod;
!     }
!     else
!     {
!         screenmethod = plainmethod;
!         screenmethod.alpha = l;
!         screenmethod.transbg = 1;
!     }
! 
!     spriteq_add_screen((int)value[0], (int)value[1], (int)value[2], s, &screenmethod, 0);
! 
!     return S_OK;
! 
! drawscreen_error:
!     printf("Function requires a screen handle and 3 integer values, 5th integer value is optional: drawscreen(screen, int x, int y, int z, int lut)\n");
!     return E_FAIL;
! }
! 
! //getindexedvar(int index);
! HRESULT openbor_getindexedvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     return system_getglobalvar(varlist, pretvar, paramCount);
! }
! 
! //setindexedvar(int index, var);
! HRESULT openbor_setindexedvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     return system_setglobalvar(varlist, pretvar, paramCount);
! }
! 
! //getscriptvar(int index);
! HRESULT openbor_getscriptvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     return system_getlocalvar(varlist, pretvar, paramCount);
! }
! 
! //setscriptvar(int index, var);
! HRESULT openbor_setscriptvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     return system_setlocalvar(varlist, pretvar, paramCount);
! }
! 
! //getentityvar(entity, int index);
! HRESULT openbor_getentityvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     ScriptVariant *ptmpvar;
!     entity *ent;
! 
!     if(paramCount < 2 || varlist[0]->vt != VT_PTR || !varlist[0]->ptrVal)
!     {
!         goto gev_error;
!     }
! 
!     ent = (entity *)varlist[0]->ptrVal;
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         ptmpvar = Varlist_GetByName(ent->varlist, StrCache_Get(varlist[1]->strVal));
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &ltemp)))
!     {
!         ptmpvar = Varlist_GetByIndex(ent->varlist, (LONG)ltemp);
!     }
!     else
!     {
!         goto gev_error;
!     }
! 
!     if(ptmpvar)
!     {
!         ScriptVariant_Copy(*pretvar,  ptmpvar);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
!     return S_OK;
! 
! gev_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //setentityvar(int index, var);
! HRESULT openbor_setentityvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     entity *ent;
! 
!     if(paramCount < 3 || varlist[0]->vt != VT_PTR || !varlist[0]->ptrVal)
!     {
!         goto sev_error;
!     }
! 
!     ent = (entity *)varlist[0]->ptrVal;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByName(ent->varlist, StrCache_Get(varlist[1]->strVal), varlist[2]);
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &ltemp)))
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByIndex(ent->varlist, (LONG)ltemp, varlist[2]);
!     }
!     else
!     {
!         goto sev_error;
!     }
! 
!     return S_OK;
! sev_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! HRESULT openbor_getmodelproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int iArg;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     if((varlist[0]->vt != VT_INTEGER && varlist[0]->vt != VT_STR) || varlist[1]->vt != VT_INTEGER)
!     {
!         printf("\n Error, getmodelproperty({model}, {property}): Invalid or missing parameter. Getmodelproperty must be passed valid {model} and {property} indexes.\n");
!     }
! 
!     iArg = varlist[0]->vt == VT_INTEGER ? varlist[0]->lVal : get_cached_model_index(StrCache_Get(varlist[0]->strVal));
! 
!     if(iArg < 0 || iArg >= models_cached)
!     {
!         return E_FAIL;
!     }
! 
!     switch (varlist[1]->lVal)
!     {
!     case 0:                                                    //Loaded?
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)model_cache[iArg].loadflag;
!         break;
!     }
!     case 1:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)model_cache[iArg].model;
!     }
!     case 2:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(model_cache[iArg].name);
!         break;
!     }
!     case 3:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(model_cache[iArg].path);
!         break;
!     }
!     case 4:                                                    //Loaded?
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)model_cache[iArg].selectable;
!         break;
!     }
!     }
! 
!     return S_OK;
! }
! 
! HRESULT openbor_changemodelproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int iArg;
!     LONG ltemp;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     if((varlist[0]->vt != VT_INTEGER && varlist[0]->vt != VT_STR) || varlist[1]->vt != VT_INTEGER)
!     {
!         printf("\n Error, changemodelproperty({model}, {property}, {value}): Invalid or missing parameter. Changemodelproperty must be passed valid {model}, {property} and {value}.\n");
!     }
! 
!     iArg = varlist[0]->vt == VT_INTEGER ? varlist[0]->lVal : get_cached_model_index(StrCache_Get(varlist[0]->strVal));
! 
!     if(iArg < 0 || iArg >= models_cached)
!     {
!         return E_FAIL;
!     }
! 
!     switch (varlist[1]->lVal)
!     {
!     case 0:                                                    //Loaded?
!     {
!         /*
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         	model_cache[iArg].loadflag = (LONG)ltemp;
!         else (*pretvar)->lVal = (LONG)0;
!         break;
!         */
!     }
!     case 1:
!     {
!         /*
!         if(varlist[2]->vt != VT_STR)
!         {
!         	printf("You must give a string value for {value}.\n");
!         	goto changeentityproperty_error;
!         }
!         strcpy(model_cache[iArg].model, (char*)StrCache_Get(varlist[2]->strVal));
!         (*pretvar)->lVal = (LONG)1;
!         break;
!         */
!     }
!     case 2:
!     {
!         /*
!         if(varlist[2]->vt != VT_STR)
!         {
!         	printf("You must give a string value for {value}.\n");
!         	goto changeentityproperty_error;
!         }
!         strcpy(model_cache[iArg].name, (char*)StrCache_Get(varlist[2]->strVal));
!         (*pretvar)->lVal = (LONG)1;
!         break;
!         */
!     }
!     case 3:
!     {
!         /*
!         if(varlist[2]->vt != VT_STR)
!         {
!         	printf("You must give a string value for {value}.\n");
!         	goto changeentityproperty_error;
!         }
!         strcpy(model_cache[iArg].path, (char*)StrCache_Get(varlist[2]->strVal));
!         (*pretvar)->lVal = (LONG)1;
!         break;
!         */
!     }
!     case 4:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             model_cache[iArg].selectable = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     }
!     }
! 
!     return S_OK;
! }
! 
! // ===== getentityproperty =====
! enum entityproperty_enum
! {
!     _ep_a,
!     _ep_aggression,
!     _ep_aiattack,
!     _ep_aiflag,
!     _ep_aimove,
!     _ep_alpha,
!     _ep_animal,
!     _ep_animating,
!     _ep_animation,
!     _ep_animation_handle,
!     _ep_animationid,
!     _ep_animheight,
!     _ep_animhits,
!     _ep_animnum,
!     _ep_animpos,
!     _ep_animvalid,
!     _ep_antigrab,
!     _ep_antigravity,
!     _ep_attackid,
!     _ep_attacking,
!     _ep_attackthrottle,
!     _ep_attackthrottletime,
!     _ep_autokill,
!     _ep_base,
      _ep_bbox,
!     _ep_binding,
!     _ep_blink,
!     _ep_blockback,
!     _ep_blockodds,
!     _ep_blockpain,
!     _ep_boomerang,
!     _ep_boss,
!     _ep_bounce,
!     _ep_bound,
!     _ep_candamage,
!     _ep_chargerate,
!     _ep_colourmap,
!     _ep_colourtable,
!     _ep_combostep,
!     _ep_combotime,
!     _ep_custom_target,
!     _ep_damage_on_landing,
!     _ep_dead,
!     _ep_defaultmodel,
!     _ep_defaultname,
!     _ep_defense,
!     _ep_destx,
!     _ep_destz,
      _ep_detect,
!     _ep_die_on_landing,
!     _ep_direction,
!     _ep_dot,
!     _ep_dropframe,
      _ep_edelay,
      _ep_edge,
!     _ep_edgerange,
!     _ep_energycost,
!     _ep_escapecount,
!     _ep_escapehits,
!     _ep_exists,
!     _ep_facing,
!     _ep_falldie,
!     _ep_flash,
!     _ep_freezetime,
!     _ep_frozen,
!     _ep_gfxshadow,
!     _ep_grabbing,
!     _ep_grabforce,
!     _ep_guardpoints,
!     _ep_hasplatforms,
!     _ep_health,
!     _ep_height,
!     _ep_hitbyid,
!     _ep_hitheadplatform,
!     _ep_hitwall,
!     _ep_hmapl,
!     _ep_hmapu,
!     _ep_hostile,
!     _ep_icon,
!     _ep_iconposition,
!     _ep_invincible,
!     _ep_invinctime,
!     _ep_jugglepoints,
!     _ep_jumpheight,
!     _ep_jumpmovex,
!     _ep_jumpmovez,
!     _ep_jumpspeed,
!     _ep_knockdowncount,
!     _ep_komap,
!     _ep_landedplatform,
!     _ep_landframe,
!     _ep_lifeposition,
!     _ep_lifespancountdown,
!     _ep_link,
!     _ep_map,
!     _ep_mapcount,
!     _ep_mapdefault,
!     _ep_maps,
!     _ep_maptime,
!     _ep_maxguardpoints,
!     _ep_maxhealth,
!     _ep_maxjugglepoints,
!     _ep_maxmp,
!     _ep_model,
!     _ep_mp,
!     _ep_mpdroprate,
!     _ep_mprate,
!     _ep_mpset,
!     _ep_mpstable,
!     _ep_mpstableval,
!     _ep_name,
!     _ep_nameposition,
!     _ep_nextanim,
!     _ep_nextmove,
!     _ep_nextthink,
!     _ep_no_adjust_base,
!     _ep_noaicontrol,
!     _ep_nodieblink,
!     _ep_nodrop,
!     _ep_nograb,
!     _ep_nohithead,
!     _ep_nolife,
!     _ep_nopain,
!     _ep_numweapons,
!     _ep_offense,
!     _ep_offscreen_noatk_factor,
!     _ep_offscreenkill,
!     _ep_opponent,
!     _ep_owner,
!     _ep_pain_time,
!     _ep_parent,
!     _ep_path,
!     _ep_pathfindstep,
!     _ep_playerindex,
      _ep_position,
!     _ep_prevanimationid,
!     _ep_projectile,
!     _ep_projectilehit,
!     _ep_range,
!     _ep_releasetime,
!     _ep_running,
!     _ep_rush_count,
!     _ep_rush_tally,
!     _ep_rush_time,
!     _ep_score,
!     _ep_scroll,
!     _ep_seal,
!     _ep_sealtime,
!     _ep_setlayer,
!     _ep_shadowbase,
!     _ep_sortid,
!     _ep_spawntype,
!     _ep_speed,
!     _ep_sprite,
!     _ep_spritea,
!     _ep_stalltime,
!     _ep_staydown,
!     _ep_staydownatk,
!     _ep_stealth,
!     _ep_subentity,
!     _ep_subject_to_basemap,
!     _ep_subject_to_gravity,
!     _ep_subject_to_hole,
!     _ep_subject_to_maxz,
!     _ep_subject_to_minz,
!     _ep_subject_to_obstacle,
!     _ep_subject_to_platform,
!     _ep_subject_to_screen,
!     _ep_subject_to_wall,
!     _ep_subtype,
!     _ep_takeaction,
!     _ep_think,
!     _ep_thold,
!     _ep_throwdamage,
!     _ep_throwdist,
!     _ep_throwframewait,
!     _ep_throwheight,
!     _ep_tosstime,
!     _ep_tossv,
!     _ep_trymove,
!     _ep_type,
!     _ep_velocity,
!     _ep_vulnerable,
!     _ep_walkoffmovex,
!     _ep_walkoffmovez,
!     _ep_weapent,
!     _ep_weaploss,
!     _ep_weapnum,
!     _ep_weapon,
!     _ep_x,
!     _ep_xdir,
!     _ep_y,
!     _ep_z,
!     _ep_zdir,
!     _ep_the_end,
! };
! 
! // arranged list, for searching
! static const char *eplist[] =
! {
!     "a",
!     "aggression",
!     "aiattack",
!     "aiflag",
!     "aimove",
!     "alpha",
!     "animal",
!     "animating",
!     "animation",
!     "animation.handle",
!     "animationid",
!     "animheight",
!     "animhits",
!     "animnum",
!     "animpos",
!     "animvalid",
!     "antigrab",
!     "antigravity",
!     "attackid",
!     "attacking",
!     "attackthrottle",
!     "attackthrottletime",
!     "autokill",
!     "base",
      "bbox",
!     "binding",
!     "blink",
!     "blockback",
!     "blockodds",
!     "blockpain",
!     "boomerang",
!     "boss",
!     "bounce",
!     "bound",
!     "candamage",
!     "chargerate",
!     "colourmap",
!     "colourtable",
!     "combostep",
!     "combotime",
!     "custom_target",
!     "damage_on_landing",
!     "dead",
!     "defaultmodel",
!     "defaultname",
!     "defense",
!     "destx",
!     "destz",
      "detect",
!     "die_on_landing",
!     "direction",
!     "dot",
!     "dropframe",
      "edelay",
      "edge",
!     "edgerange",
!     "energycost",
!     "escapecount",
!     "escapehits",
!     "exists",
!     "facing",
!     "falldie",
!     "flash",
!     "freezetime",
!     "frozen",
!     "gfxshadow",
!     "grabbing",
!     "grabforce",
!     "guardpoints",
!     "hasplatforms",
!     "health",
!     "height",
!     "hitbyid",
!     "hitheadplatform",
!     "hitwall",
!     "hmapl",
!     "hmapu",
!     "hostile",
!     "icon",
!     "iconposition",
!     "invincible",
!     "invinctime",
!     "jugglepoints",
!     "jumpheight",
!     "jumpmovex",
!     "jumpmovez",
!     "jumpspeed",
!     "knockdowncount",
!     "komap",
!     "landedplatform",
!     "landframe",
!     "lifeposition",
!     "lifespancountdown",
!     "link",
!     "map",
!     "mapcount",
!     "mapdefault",
!     "maps",
!     "maptime",
!     "maxguardpoints",
!     "maxhealth",
!     "maxjugglepoints",
!     "maxmp",
!     "model",
!     "mp",
!     "mpdroprate",
!     "mprate",
!     "mpset",
!     "mpstable",
!     "mpstableval",
!     "name",
!     "nameposition",
!     "nextanim",
!     "nextmove",
!     "nextthink",
!     "no_adjust_base",
!     "noaicontrol",
!     "nodieblink",
!     "nodrop",
!     "nograb",
!     "nohithead",
!     "nolife",
!     "nopain",
!     "numweapons",
!     "offense",
!     "offscreennoatkfactor",
!     "offscreenkill",
!     "opponent",
!     "owner",
!     "pain_time",
!     "parent",
!     "path",
!     "pathfindstep",
!     "playerindex",
      "position",
!     "prevanimationid",
!     "projectile",
!     "projectilehit",
!     "range",
!     "releasetime",
!     "running",
!     "rush_count",
!     "rush_tally",
!     "rush_time",
!     "score",
!     "scroll",
!     "seal",
!     "sealtime",
!     "setlayer",
!     "shadowbase",
!     "sortid",
!     "spawntype",
!     "speed",
!     "sprite",
!     "spritea",
!     "stalltime",
!     "staydown",
!     "staydownatk",
!     "stealth",
!     "subentity",
!     "subject_to_basemap",
!     "subject_to_gravity",
!     "subject_to_hole",
!     "subject_to_maxz",
!     "subject_to_minz",
!     "subject_to_obstacle",
!     "subject_to_platform",
!     "subject_to_screen",
!     "subject_to_wall",
!     "subtype",
!     "takeaction",
!     "think",
!     "thold",
!     "throwdamage",
!     "throwdist",
!     "throwframewait",
!     "throwheight",
!     "tosstime",
!     "tossv",
!     "trymove",
!     "type",
!     "velocity",
!     "vulnerable",
!     "walkoffmovex",
!     "walkoffmovez",
!     "weapent",
!     "weaploss",
!     "weapnum",
!     "weapon",
!     "x",
!     "xdir",
!     "y",
!     "z",
!     "zdir",
! };
! 
! enum aiflag_enum
! {
!     _ep_aiflag_animating,
!     _ep_aiflag_attacking,
!     _ep_aiflag_autokill,
!     _ep_aiflag_blink,
!     _ep_aiflag_blocking,
!     _ep_aiflag_charging,
!     _ep_aiflag_dead,
      _ep_aiflag_drop,
!     _ep_aiflag_ducking,
!     _ep_aiflag_falling,
!     _ep_aiflag_frozen,
!     _ep_aiflag_getting,
!     _ep_aiflag_idlemode,
!     _ep_aiflag_idling,
!     _ep_aiflag_inbackpain,
!     _ep_aiflag_inpain,
!     _ep_aiflag_invincible,
!     _ep_aiflag_jumpid,
!     _ep_aiflag_jumping,
      _ep_aiflag_projectile,
      _ep_aiflag_riseattacking,
!     _ep_aiflag_rising,
!     _ep_aiflag_running,
!     _ep_aiflag_toexplode,
!     _ep_aiflag_turning,
!     _ep_aiflag_walking,
!     _ep_aiflag_walkmode,
!     _ep_aiflag_the_end,
! };
! 
! 
! static const char *eplist_aiflag[] =
! {
!     "animating",
!     "attacking",
!     "autokill",
!     "blink",
!     "blocking",
!     "charging",
!     "dead",
      "drop",
!     "ducking",
!     "falling",
!     "frozen",
!     "getting",
!     "idlemode",
!     "idling",
!     "inbackpain",
!     "inpain",
!     "invincible",
!     "jumpid",
!     "jumping",
      "projectile",
      "riseattacking",
!     "rising",
!     "running",
!     "toexplode",
!     "turning",
!     "walking",
!     "walkmode",
! };
! 
! enum boomerang_enum
! {
!     _ep_boomerang_acceleration,
!     _ep_boomerang_hdistance,
!     _ep_boomerang_the_end,
! };
! 
! static const char *eplist_boomerang[] =
! {
!     "acceleration",
!     "hdistance",
! };
! 
! enum edgerange_enum
! {
!     _ep_edgerange_x,
!     _ep_edgerange_z,
!     _ep_edgerange_the_end,
! };
! 
! static const char *eplist_edgerange[] =
! {
!     "x",
!     "z",
! };
! 
! // ===== changedrawmethod ======
! enum drawmethod_enum
! {
!     _dm_alpha,
!     _dm_amplitude,
!     _dm_beginsize,
!     _dm_centerx,
!     _dm_centery,
!     _dm_channelb,
!     _dm_channelg,
!     _dm_channelr,
!     _dm_clip,
!     _dm_cliph,
!     _dm_clipw,
!     _dm_clipx,
!     _dm_clipy,
!     _dm_enabled,
!     _dm_endsize,
!     _dm_fillcolor,
!     _dm_flag,
!     _dm_fliprotate,
!     _dm_flipx,
!     _dm_flipy,
!     _dm_perspective,
!     _dm_remap,
!     _dm_reset,
!     _dm_rotate,
!     _dm_scalex,
!     _dm_scaley,
!     _dm_shiftx,
!     _dm_table,
!     _dm_tintcolor,
!     _dm_tintmode,
!     _dm_transbg,
!     _dm_watermode,
!     _dm_wavelength,
!     _dm_wavespeed,
!     _dm_wavetime,
!     _dm_xrepeat,
!     _dm_xspan,
!     _dm_yrepeat,
!     _dm_yspan,
!     _dm_the_end,
! };
! 
! enum _prop_dropframe_enum
! {
!     _PROP_DROPFRAME_FRAME,
!     _PROP_DROPFRAME_VELOCITY_X,
!     _PROP_DROPFRAME_VELOCITY_Y,
!     _PROP_DROPFRAME_VELOCITY_Z,
!     _PROP_DROPFRAME_THE_END
! };
! 
! enum _prop_followup_enum
! {
!     _PROP_FOLLOWUP_ANIMATION,
!     _PROP_FOLLOWUP_CONDITION,
!     _PROP_FOLLOWUP_THE_END
! };
! 
! enum _prop_jumpframe_enum
! {
!     _PROP_JUMPFRAME_FRAME,
!     _PROP_JUMPFRAME_VELOCITY_X,
!     _PROP_JUMPFRAME_VELOCITY_Y,
!     _PROP_JUMPFRAME_VELOCITY_Z,
!     _PROP_JUMPFRAME_THE_END
! };
! 
! enum _prop_landframe_enum
! {
!     _PROP_LANDFRAME_FRAME,
!     _PROP_LANDFRAME_VELOCITY_X,
!     _PROP_LANDFRAME_VELOCITY_Y,
!     _PROP_LANDFRAME_VELOCITY_Z,
!     _PROP_LANDFRAME_THE_END
! };
! 
! enum _prop_loop_enum
! {
!     _PROP_LOOP_FRAME_MAX,
!     _PROP_LOOP_FRAME_MIN,
!     _PROP_LOOP_MODE,
!     _PROP_LOOP_THE_END
! };
! 
!  enum _prop_move_enum
! {
!     _PROP_MOVE_BASE,
!     _PROP_MOVE_X,
!     _PROP_MOVE_Y,
!     _PROP_MOVE_Z,
!     _PROP_MOVE_THE_END
! };
! 
!  enum _prop_offset_enum
! {
!     _PROP_OFFSET_X,
!     _PROP_OFFSET_Y,
!     _PROP_OFFSET_THE_END
! };
! 
!  enum _prop_platform_enum
! {
!     _PROP_PLATFORM_ALT,
!     _PROP_PLATFORM_DEPTH,
!     _PROP_PLATFORM_LOWERLEFT,
!     _PROP_PLATFORM_LOWERRIGHT,
!     _PROP_PLATFORM_UPPERLEFT,
!     _PROP_PLATFORM_UPPERRIGHT,
!     _PROP_PLATFORM_X,
!     _PROP_PLATFORM_Z,
!     _PROP_PLATFORM_THE_END
! };
! 
! enum _prop_projectile_enum
! {
!     _PROP_PROJECTILE_BOMB,
!     _PROP_PROJECTILE_FLASH,
!     _PROP_PROJECTILE_KNIFE,
!     _PROP_PROJECTILE_SHOOTFRAME,
!     _PROP_PROJECTILE_STAR,
!     _PROP_PROJECTILE_THROWFRAME,
!     _PROP_PROJECTILE_THROWPOSITION_BASE,
!     _PROP_PROJECTILE_THROWPOSITION_X,
!     _PROP_PROJECTILE_THROWPOSITION_Y,
!     _PROP_PROJECTILE_THROWPOSITION_Z,
!     _PROP_PROJECTILE_TOSSFRAME,
!     _PROP_PROJECTILE_THE_END
! };
! 
! enum _prop_quakeframe_enum
! {
!     _PROP_QUAKEFRAME_FRAMESTART,
!     _PROP_QUAKEFRAME_INTENSITY,
!     _PROP_QUAKEFRAME_REPEAT,
!     _PROP_QUAKEFRAME_THE_END
! };
! 
! enum _prop_range_enum
! {
!     _PROP_RANGEA_MAX,
!     _PROP_RANGEA_MIN,
!     _PROP_RANGEB_MAX,
!     _PROP_RANGEB_MIN,
!     _PROP_RANGEX_MAX,
!     _PROP_RANGEX_MIN,
!     _PROP_RANGEZ_MAX,
!     _PROP_RANGEZ_MIN,
!     _PROP_RANGE_THE_END
! };
! 
! enum _prop_size_enum
! {
!     _PROP_SIZE_BASE,
!     _PROP_SIZE_X,
!     _PROP_SIZE_Y,
!     _PROP_SIZE_Z,
!     _PROP_SIZE_THE_END
! };
! 
!  enum _prop_shadow_enum
! {
!     _PROP_FSHADOW,
!     _PROP_SHADOW_COORDS_X,
!     _PROP_SHADOW_COORDS_Y,
!     _PROP_SHADOW_THE_END
! };
! 
! enum _prop_spawnframe_enum
! {
!     _PROP_SPAWNFRAME_FRAME,
!     _PROP_SPAWNFRAME_RELATIVE,
!     _PROP_SPAWNFRAME_X,
!     _PROP_SPAWNFRAME_Y,
!     _PROP_SPAWNFRAME_Z,
!     _PROP_SPAWNFRAME_THE_END
! };
! 
! enum _prop_spritea_enum
! {
!     _PROP_SPRITEA_CENTERX,
!     _PROP_SPRITEA_CENTERY,
!     _PROP_SPRITEA_FILE,
!     _PROP_SPRITEA_OFFSETX,
!     _PROP_SPRITEA_OFFSETY,
!     _PROP_SPRITEA_SPRITE,
!     _PROP_SPRITEA_THE_END
! };
! 
! enum _prop_summonframe_enum
! {
!     _PROP_SUMMONFRAME_FRAME,
!     _PROP_SUMMONFRAME_RELATIVE,
!     _PROP_SUMMONFRAME_X,
!     _PROP_SUMMONFRAME_Y,
!     _PROP_SUMMONFRAME_Z,
!     _PROP_SUMMONFRAME_THE_END
! };
! 
! enum _prop_starvelocity_enum
! {
!     _PROP_STARVELOCITY_1,
!     _PROP_STARVELOCITY_2,
!     _PROP_STARVELOCITY_3,
!     _PROP_STARVELOCITY_THE_END
! };
! 
! enum _prop_weaponframe_enum
! {
!     _PROP_WEAPONFRAME_FRAME,
!     _PROP_WEAPONFRAME_WEAPON,
!     _PROP_WEAPONFRAME_THE_END
! };
! 
! enum _ep_defense_enum
! {
!     _ep_defense_blockpower,
!     _ep_defense_blockratio,
!     _ep_defense_blockthreshold,
!     _ep_defense_blocktype,
!     _ep_defense_factor,
!     _ep_defense_knockdown,
!     _ep_defense_pain,
!     _ep_defense_the_end,
! };
! 
! enum gep_dot_enum
! {
!     _ep_dot_force,
!     _ep_dot_mode,
!     _ep_dot_owner,
!     _ep_dot_rate,
!     _ep_dot_time,
!     _ep_dot_type,
!     _ep_dot_the_end,
! };
! 
! enum gep_edelay_enum
! {
!     _ep_edelay_cap_max,
!     _ep_edelay_cap_min,
!     _ep_edelay_factor,
!     _ep_edelay_mode,
!     _ep_edelay_range_max,
!     _ep_edelay_range_min,
!     _ep_edelay_the_end,
! };
! 
! enum gep_energycost_enum
! {
!     _ep_energycost_cost,
!     _ep_energycost_disable,
!     _ep_energycost_mponly,
!     _ep_energycost_the_end,
! };
! 
! enum gep_flash_enum
! {
!     _ep_flash_block,
!     _ep_flash_def,
!     _ep_flash_noattack,
!     _ep_flash_the_end,
! };
! 
! enum gep_icon_enum
! {
!     _ep_icon_def,
!     _ep_icon_die,
!     _ep_icon_get,
!     _ep_icon_mphigh,
!     _ep_icon_mplow,
!     _ep_icon_mpmed,
!     _ep_icon_pain,
!     _ep_icon_weapon,
!     _ep_icon_x,
!     _ep_icon_y,
!     _ep_icon_the_end,
! };
! 
! enum _ep_knockdowncount_enum
! {
!     _ep_knockdowncount_current,
!     _ep_knockdowncount_max,
!     _ep_knockdowncount_time,
!     _ep_knockdowncount_the_end,
! };
! 
! enum gep_landframe_enum
! {
!     _ep_landframe_ent,
!     _ep_landframe_frame,
!     _ep_landframe_the_end,
! };
! 
! enum gep_maps_enum
! {
!     _ep_maps_count,
!     _ep_maps_current,
!     _ep_maps_default,
!     _ep_maps_dying,
!     _ep_maps_dying_critical,
!     _ep_maps_dying_low,
!     _ep_maps_frozen,
!     _ep_maps_hide_end,
!     _ep_maps_hide_start,
!     _ep_maps_ko,
!     _ep_maps_kotype,
!     _ep_maps_table,
!     _ep_maps_time,
!     _ep_maps_the_end,
! };
! 
! enum gep_range_enum
! {
!     _ep_range_amax,
!     _ep_range_amin,
!     _ep_range_bmax,
!     _ep_range_bmin,
!     _ep_range_xmax,
!     _ep_range_xmin,
!     _ep_range_zmax,
!     _ep_range_zmin,
!     _ep_range_the_end,
! };
! 
! enum gep_running_enum
! {
!     _ep_running_jumpx,
!     _ep_running_jumpy,
!     _ep_running_land,
!     _ep_running_movez,
!     _ep_running_speed,
!     _ep_running_the_end,
! };
! 
! enum gep_spritea_enum
! {
!     _ep_spritea_centerx,
!     _ep_spritea_centery,
!     _ep_spritea_file,
!     _ep_spritea_offsetx,
!     _ep_spritea_offsety,
!     _ep_spritea_sprite,
!     _ep_spritea_the_end,
! };
! 
! enum gep_staydown_enum
! {
!     _ep_staydown_rise,
!     _ep_staydown_riseattack,
!     _ep_staydown_riseattack_stall,
!     _ep_staydown_the_end,
! };
! 
! enum cep_hostile_candamage_enum
! {
!     _ep_hcd_ground,
!     _ep_hcd_type_enemy,
!     _ep_hcd_type_npc,
!     _ep_hcd_type_obstacle,
!     _ep_hcd_type_player,
!     _ep_hcd_type_shot,
!     _ep_hcd_the_end,
! };
! 
! enum cep_takeaction_enum
! {
!     _ep_ta_bomb_explode,
!     _ep_ta_common_animation_normal,
!     _ep_ta_common_attack_proc,
!     _ep_ta_common_block,
!     _ep_ta_common_drop,
!     _ep_ta_common_fall,
!     _ep_ta_common_get,
!     _ep_ta_common_grab,
!     _ep_ta_common_grabattack,
!     _ep_ta_common_grabbed,
!     _ep_ta_common_jump,
!     _ep_ta_common_land,
!     _ep_ta_common_lie,
!     _ep_ta_common_pain,
!     _ep_ta_common_prejump,
!     _ep_ta_common_rise,
!     _ep_ta_common_spawn,
!     _ep_ta_common_turn,
!     _ep_ta_normal_prepare,
!     _ep_ta_npc_warp,
!     _ep_ta_player_blink,
!     _ep_ta_suicide,
!     _ep_ta_the_end,
! };
! 
! enum cep_think_enum   // 2011_03_03, DC: Think types.
! {
!     _ep_th_common_think,
!     _ep_th_player_think,
!     _ep_th_steam_think,
!     _ep_th_steamer_think,
!     _ep_th_text_think,
!     _ep_th_trap_think,
!     _ep_th_the_end,
! };
! 
! int mapstrings_animationproperty(ScriptVariant **varlist, int paramCount)
! {
!     return 0;
! //    char *propname;
! //    const char *aps;
! //    int prop, ap; //int prop, i, ep, t;
! //    int result = 1;
! //
! //    MAPSTRINGS(varlist[1], list_animation_prop, ANI_PROP_THE_END,
! //               "Property name '%s' is not a supported animation property.\n");
! //
! //    if(paramCount < 3 || varlist[1]->vt != VT_INTEGER)
! //    {
! //        return result;
! //    }
! //    else
! //    {
! //        ap = varlist[1]->lVal;
! //        aps = (ap < ANI_PROP_THE_END && ap >= 0) ? list_animation_prop[ap] : "";
! //    }
! //
! //    return result;
! }
! 
! int mapstrings_entityproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname;
!     const char *eps;
!     int prop, i, ep, t;
! 
!     static const char *proplist_defense[] =
!     {
!         "blockpower",
!         "blockratio",
!         "blockthreshold",
!         "blocktype",
!         "factor",
!         "knockdown",
!         "pain",
!     };
! 
!     static const char *proplist_dot[] =
!     {
!         "force",
!         "mode",
!         "owner",
!         "rate",
!         "time",
!         "type",
!     };
! 
!     static const char *proplist_edelay[] =
!     {
!         "cap_max",
!         "cap_min",
!         "factor",
!         "mode",
!         "range_max",
!         "range_min",
!     };
! 
!     static const char *proplist_energycost[] =
!     {
!         "cost",
!         "disable",
!         "mponly",
!     };
! 
!     static const char *proplist_flash[] =
!     {
!         "block",
!         "default",
!         "noattack",
!     };
! 
!     static const char *proplist_icon[] =
!     {
!         "default",
!         "die",
!         "get",
!         "mphigh",
!         "mplow",
!         "mpmed",
!         "pain",
!         "weapon",
!         "x",
!         "y",
!     };
! 
!     static const char *proplist_knockdowncount[] =
!     {
!         "current",
!         "max",
!         "time",
!     };
! 
!     static const char *proplist_landframe[] =
!     {
!         "ent",
!         "frame",
!     };
! 
!     static const char *proplist_maps[] =
!     {
!         "count",
!         "current",
!         "default",
!         "dying",
!         "dying_critical",
!         "dying_low",
!         "frozen",
!         "hide_end",
!         "hide_start",
!         "ko",
!         "kotype",
!         "table",
!         "time",
!     };
! 
!     static const char *proplist_range[] =
!     {
!         "amax",
!         "amin",
!         "bmax",
!         "bmin",
!         "xmax",
!         "xmin",
!         "zmax",
!         "zmin",
!     };
! 
!     static const char *proplist_running[] =
!     {
!         "jumpx",
!         "jumpy",
!         "land",
!         "movez",
!         "speed",
!     };
! 
!     static const char *proplist_spritea[] =
!     {
!         "centerx",
!         "centery",
!         "file",
!         "offsetx",
!         "offsety",
!         "sprite",
!     };
! 
!     static const char *proplist_staydown[] =
!     {
!         "rise",
!         "riseattack",
!         "riseattack_stall",
!     };
! 
!     static const char *proplist_hostile_candamage[] =
!     {
!         "ground",
!         "type_enemy",
!         "type_npc",
!         "type_obstacle",
!         "type_player",
!         "type_shot",
!     };
! 
!     static const char *proplist_takeaction[] =
!     {
!         "bomb_explode",
!         "common_animation_normal",
!         "common_attack_proc",
!         "common_block",
!         "common_drop",
!         "common_fall",
!         "common_get",
!         "common_grab",
!         "common_grabattack",
!         "common_grabbed",
!         "common_jump",
!         "common_land",
!         "common_lie",
!         "common_pain",
!         "common_prejump",
!         "common_rise",
!         "common_spawn",
!         "common_turn",
!         "normal_prepare",
!         "npc_warp",
!         "player_blink",
!         "suicide",
!     };
! 
!     static const char *proplist_think[] =   // 2011_03_03, DC: Think types.
!     {
!         "common_think",
!         "player_think",
!         "steam_think",
!         "steamer_think",
!         "text_think",
!         "trap_think",
!     };
! 
!     if(paramCount < 2)
!     {
!         return 1;
!     }
! 
!     // map entity properties
!     MAPSTRINGS(varlist[1], eplist, _ep_the_end,
!                "Property name '%s' is not supported by function getentityproperty.\n");
! 
!     if(paramCount < 3 || varlist[1]->vt != VT_INTEGER)
!     {
!         return 1;
!     }
! 
!     ep = varlist[1]->lVal;
!     eps = (ep < _ep_the_end && ep >= 0) ? eplist[ep] : "";
! 
!     switch (ep)
!     {
!     // deprecation warning for "a" property
!     case _ep_a:
!     {
!         printf("\nNote: Property 'a' has been deprecated. Use 'y' to access the Y (vertical) axis property.\n");
!         break;
!     }
!     // map subproperties of aiflag property
!     case _ep_aiflag:
!     {
!         MAPSTRINGS(varlist[2], eplist_aiflag, _ep_aiflag_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of boomerang property
!     case _ep_boomerang:
!     {
!         MAPSTRINGS(varlist[2], eplist_boomerang, _ep_boomerang_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of edgerange property
!     case _ep_edgerange:
!     {
!         MAPSTRINGS(varlist[2], eplist_edgerange, _ep_edgerange_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of defense property
!     case _ep_defense:
!     {
!         if(paramCount >= 4)
!         {
!             MAPSTRINGS(varlist[3], proplist_defense, _ep_defense_the_end,
!                        _is_not_a_known_subproperty_of_, eps);
!         }
!         break;
!     }
!     // map subproperties of DOT
!     case _ep_dot:
!     {
!         MAPSTRINGS(varlist[2], proplist_dot, _ep_dot_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Edelay property
!     case _ep_edelay:
!     {
!         MAPSTRINGS(varlist[2], proplist_edelay, _ep_edelay_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Energycost
!     case _ep_energycost:
!     {
!         MAPSTRINGS(varlist[2], proplist_energycost, _ep_energycost_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Flash
!     case _ep_flash:
!     {
!         MAPSTRINGS(varlist[2], proplist_flash, _ep_flash_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Icon
!     case _ep_icon:
!     {
!         MAPSTRINGS(varlist[2], proplist_icon, _ep_icon_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
! 
!     // map subproperties of Knockdowncount
!     case _ep_knockdowncount:
!     {
!         MAPSTRINGS(varlist[2], proplist_knockdowncount, _ep_knockdowncount_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Landframe
!     case _ep_landframe:
!     {
!         MAPSTRINGS(varlist[2], proplist_landframe, _ep_landframe_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Maps
!     case  _ep_maps:
!     {
!         MAPSTRINGS(varlist[2], proplist_maps, _ep_maps_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Range
!     case _ep_range:
!     {
!         MAPSTRINGS(varlist[2], proplist_range, _ep_range_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Running
!     case _ep_running:
!     {
!         MAPSTRINGS(varlist[2], proplist_running, _ep_running_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
! 
!     // map subproperties of Spritea
!     case _ep_spritea:
!     {
!         MAPSTRINGS(varlist[2], proplist_spritea, _ep_spritea_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Staydown
!     case _ep_staydown:
!     {
!         MAPSTRINGS(varlist[2], proplist_staydown, _ep_running_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     //hostile, candamage, projectilehit
!     case _ep_hostile:
!     case _ep_candamage:
!     case _ep_projectilehit:
!     {
!         for(i = 2; i < paramCount; i++)
!         {
!             t = varlist[i]->vt;
!             MAPSTRINGS(varlist[i], proplist_hostile_candamage, _ep_hcd_the_end,
!                        _is_not_supported_by_, eps);
! 
!             if(varlist[i]->vt == VT_INTEGER && t == VT_STR)
!             {
!                 varlist[i]->lVal |= 0x80000000;    //flag it
!             }
!         }
!         break;
!     }
!     // action for takeaction
!     case _ep_takeaction:
!     {
!         MAPSTRINGS(varlist[2], proplist_takeaction, _ep_ta_the_end,
!                    _is_not_supported_by_, eps);
!         break;
!     }
!     // 2011_03_13, DC: Think sets for think.
!     case _ep_think:
!     {
!         MAPSTRINGS(varlist[2], proplist_think, _ep_th_the_end,
!                    _is_not_supported_by_, eps);
!         break;
!     }
!     }
! 
!     return 1;
! }
! 
! //getentityproperty(pentity, propname);
! HRESULT openbor_getentityproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent			= NULL;
!     ScriptVariant *arg	= NULL;
!     ScriptVariant *arg1	= NULL;
!     s_sprite *spr;
!     LONG ltemp, ltemp2;
!     int i				= 0;
!     int propind ;
!     int tempint			= 0;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_Clear(*pretvar);
!     mapstrings_entityproperty(varlist, paramCount);
! 
!     arg = varlist[0];
!     if(arg->vt != VT_PTR && arg->vt != VT_EMPTY)
!     {
!         printf("Function getentityproperty must have a valid entity handle.\n");
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     ent = (entity *)arg->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(arg->vt != VT_INTEGER)
!     {
!         printf("Function getentityproperty must have a string property name.\n");
!     }
! 
!     propind = arg->lVal;
! 
!     switch(propind)
!     {
!     case _ep_a:
!     case _ep_y:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->position.y;
!         break;
!     }
!     case _ep_aggression:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.aggression;
!         break;
!     }
!     case _ep_aiattack:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.aiattack;
!         break;
!     }
!     case _ep_aiflag:
!     {
!         if(paramCount < 3)
!         {
!             break;
!         }
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must give a string name for aiflag.\n");
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         switch(ltemp)
!         {
!         case _ep_aiflag_dead:
!             (*pretvar)->lVal = (LONG)ent->dead;
!             break;
!         case _ep_aiflag_jumpid:
!             (*pretvar)->lVal = (LONG)ent->jump.animation_id;
!             break;
!         case _ep_aiflag_jumping:
!             (*pretvar)->lVal = (LONG)ent->jumping;
!             break;
!         case _ep_aiflag_idling:
!             (*pretvar)->lVal = (LONG)ent->idling;
!             break;
!         case _ep_aiflag_drop:
!             (*pretvar)->lVal = (LONG)ent->drop;
!             break;
!         case _ep_aiflag_attacking:
!             (*pretvar)->lVal = (LONG)ent->attacking;
!             break;
!         case _ep_aiflag_getting:
!             (*pretvar)->lVal = (LONG)ent->getting;
!             break;
!         case _ep_aiflag_turning:
!             (*pretvar)->lVal = (LONG)ent->turning;
!             break;
!         case _ep_aiflag_charging:
!             (*pretvar)->lVal = (LONG)ent->charging;
!             break;
!         case _ep_aiflag_blocking:
!             (*pretvar)->lVal = (LONG)ent->blocking;
!             break;
!         case _ep_aiflag_ducking:
!             (*pretvar)->lVal = (LONG)ent->ducking;
!             break;
!         case _ep_aiflag_falling:
!             (*pretvar)->lVal = (LONG)ent->falling;
!             break;
!         case _ep_aiflag_running:
!             (*pretvar)->lVal = (LONG)ent->running;
!             break;
!         case _ep_aiflag_inpain:
!             (*pretvar)->lVal = (LONG)ent->inpain;
!             break;
!         case _ep_aiflag_rising:
!             (*pretvar)->lVal = (LONG)ent->rising;
!             break;
!         case _ep_aiflag_riseattacking:
!             (*pretvar)->lVal = (LONG)ent->riseattacking;
!             break;
!         case _ep_aiflag_inbackpain:
!             (*pretvar)->lVal = (LONG)ent->inbackpain;
!             break;
!         case _ep_aiflag_projectile:
!             (*pretvar)->lVal = (LONG)ent->projectile;
!             break;
!         case _ep_aiflag_frozen:
!             (*pretvar)->lVal = (LONG)ent->frozen;
!             break;
!         case _ep_aiflag_toexplode:
!             (*pretvar)->lVal = (LONG)ent->toexplode;
!             break;
!         case _ep_aiflag_animating:
!             (*pretvar)->lVal = (LONG)ent->animating;
!             break;
!         case _ep_aiflag_blink:
!             (*pretvar)->lVal = (LONG)ent->blink;
!             break;
!         case _ep_aiflag_invincible:
!             (*pretvar)->lVal = (LONG)ent->invincible;
!             break;
!         case _ep_aiflag_autokill:
!             (*pretvar)->lVal = (LONG)ent->autokill;
!             break;
!         case _ep_aiflag_idlemode:
!             (*pretvar)->lVal = (LONG)ent->idlemode;
!             break;
!         case _ep_aiflag_walkmode:
!             (*pretvar)->lVal = (LONG)ent->walkmode;
!             break;
!         case _ep_aiflag_walking:
!             (*pretvar)->lVal = (LONG)ent->walking;
!             break;
!         default:
!             ScriptVariant_Clear(*pretvar);
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_aimove:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.aimove;
!         break;
!     }
!     case _ep_alpha:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.alpha;
!         break;
!     }
!     case _ep_animal:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.animal;
!         break;
!     }
!     case _ep_animating:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->animating;
!         break;
!     }
!     case _ep_animation_handle:
!     {
!         #define ARG_ANIMATION_ID 2
! 
!         // Did the user provide an animation id?
!         if(paramCount > 2)
!         {
!             arg = varlist[ARG_ANIMATION_ID];
! 
!             // If the argument is invalid, use current animation ID instead.
!             if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!             {
!                 ltemp = (LONG)ent->animnum;
!             }
!         }
!         else
!         {
!             ltemp = (LONG)ent->animnum;
!         }
! 
!         // If the animation exists, get the handle.
!         if(validanim(ent, ltemp))
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->modeldata.animation[ltemp];
!         }
! 
!         break;
! 
!         #undef ARG_ANIMATION_ID
!     }
!     /*
!     case _ep_animationid: See animnum.
!     */
!     case _ep_animheight:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->animation->size.x;
!         break;
!     }
!     case _ep_animhits:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->animation->animhits;
!         break;
!     }
!     case _ep_animnum:
!     case _ep_animationid:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->animnum;
!         break;
!     }
!     case _ep_prevanimationid:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->prevanimnum;
!         break;
!     }
!     case _ep_animpos:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->animpos;
!         break;
!     }
!     case _ep_animvalid:
!     {
!         ltemp = 0;
!         if(paramCount == 3)
!         {
!             arg = varlist[2];
!             if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!             {
!                 ltemp = (LONG)0;
!             }
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)validanim(ent, ltemp);
!         break;
!     }
!     case _ep_antigrab:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.antigrab;
!         break;
!     }
!     case _ep_antigravity:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.antigravity;
!         break;
!     }
!     case _ep_attacking:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->attacking;
!         break;
!     }
!     case _ep_attackid:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->attack_id_outgoing;
!         break;
!     }
!     case _ep_autokill:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->autokill;
!         break;
!     }
!     case _ep_base:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->base;
!         break;
!     }
!     case _ep_vulnerable:
!     {
!         if(paramCount == 2)
!         {
!             i		= ent->animnum;
!             tempint	= ent->animpos;
!         }
!         else if(paramCount < 4
!                 || varlist[2]->vt != VT_INTEGER
!                 || varlist[3]->vt != VT_INTEGER)
!         {
!             printf("\n Error, getentityproperty({ent}, \"vulnerable\", {animation}, {frame}): parameters missing or invalid. \n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         else
!         {
!             i		= varlist[2]->lVal;												//Animation parameter.
!             tempint	= varlist[3]->lVal;												//Frame parameter.
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->vulnerable[tempint];
!         break;
!     }
!     case _ep_blink:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->blink;
!         break;
!     }
!     case _ep_blockback:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.blockback;
!         break;
!     }
!     case _ep_blockodds:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.blockodds;
!         break;
!     }
!     case _ep_blockpain:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.blockpain;
!         break;
!     }
!     case _ep_boomerang:
      {
          if(paramCount < 3)
          {
--- 121,3639 ----
  extern int shadowopacity;
  extern s_axis_plane_vertical_int light;
  extern int max_attack_types;
! extern int max_animations;
! 
! static void clear_named_var_list(List *list, int level)
! {
!     ScriptVariant *var;
!     int i, size;
!     size = List_GetSize(list);
!     for(i = 0, List_Reset(list); i < size; i++)
!     {
!         var = (ScriptVariant *)List_Retrieve(list);
!         ScriptVariant_Clear(var);
!         free(var);
!         List_Remove(list);
!     }
!     if(level)
!     {
!         List_Clear(list);
!     }
! }
! 
! void Varlist_Init(Varlist *varlist, int size)
! {
!     int i;
! 
!     varlist->magic = varlist_magic;
!     varlist->list = calloc(1, sizeof(*varlist->list));
!     List_Init(varlist->list);
!     varlist->vars = calloc(size + 1, sizeof(*varlist->vars));
!     for(i = 0; i <= size; i++)
!     {
!         ScriptVariant_Init(varlist->vars + i);
!         ScriptVariant_ChangeType(varlist->vars, VT_INTEGER);
!         varlist->vars->lVal = (LONG)size;
!     }
! }
! 
! void Varlist_Clear(Varlist *varlist)
! {
!     int i;
!     clear_named_var_list(varlist->list, 1);
!     free(varlist->list);
!     varlist->list = NULL;
!     // the first one must be an integer variable, so it's safe to leave it alone
!     for(i = 1; i <= varlist->vars->lVal; i++)
!     {
!         ScriptVariant_Clear(varlist->vars + i);
!     }
!     free(varlist->vars);
!     varlist->vars = NULL;
!     varlist->magic = 0;
! }
! 
! void Varlist_Cleanup(Varlist *varlist)
! {
!     int i;
!     clear_named_var_list(varlist->list, 0);
!     for(i = 1; i <= varlist->vars->lVal; i++)
!     {
!         ScriptVariant_Clear(varlist->vars + i);
!     }
! }
! 
! ScriptVariant *Varlist_GetByName(Varlist *varlist, char *theName)
! {
!     if(!theName || !theName[0])
!     {
!         return NULL;
!     }
! 
!     if(List_FindByName(varlist->list, theName))
!     {
!         return (ScriptVariant *)List_Retrieve(varlist->list);
!     }
! 
!     return NULL;
! }
! 
! int Varlist_SetByName(Varlist *varlist, char *theName, ScriptVariant *var)
! {
!     ScriptVariant *v;
!     if(!theName || !theName[0])
!     {
!         return 0;
!     }
!     if(List_FindByName(varlist->list, theName))
!     {
!         ScriptVariant_Copy((ScriptVariant *)List_Retrieve(varlist->list), var);
!     }
!     else
!     {
!         v = calloc(1, sizeof(*v));
!         ScriptVariant_Copy(v, var);
!         List_InsertAfter(varlist->list, v, theName);
!     }
!     return 1;
! }
! 
! ScriptVariant *Varlist_GetByIndex(Varlist *varlist, int index)
! {
!     if(index < 0 || index >= varlist->vars->lVal)
!     {
!         return NULL;
!     }
!     return varlist->vars + index + 1;
! }
! 
! int Varlist_SetByIndex(Varlist *varlist, int index, ScriptVariant *var)
! {
!     if(index < 0)
!     {
!         return 0;
!     }
!     else if(index >= varlist->vars->lVal)
!     {
!         __reallocto(varlist->vars, varlist->vars->lVal + 1, index + 2);
!         varlist->vars->lVal = index + 1;
!     }
!     ScriptVariant_Copy(varlist->vars + index + 1, var);
!     return 1;
! }
! 
! // By White Dragon
! int Varlist_AddByIndex(Varlist *array, int index, ScriptVariant *var)
! {
!     if(index < 0 || index >= array->vars->lVal+1)
!     {
!         return 0;
!     }
!     else
!     {
!         int i = 0;
!         int size = array->vars->lVal;
! 
!         __reallocto(array->vars, size+1, size+2);
!         size = ++array->vars->lVal;
! 
!         for ( i = size-1; i > index; i-- )
!         {
!             ScriptVariant_Copy(array->vars+1+i, array->vars+1+i-1); // first value of array is his size!
!         }
!         ScriptVariant_Copy(array->vars+1+index, var);
! 
!         //printf("aaa: %s\n", (char*)StrCache_Get(elem->strVal) );
!     }
! 
!     return 1;
! }
! 
! // By White Dragon
! int Varlist_DeleteByIndex(Varlist *array, int index)
! {
!     if(index < 0 || index >= array->vars->lVal)
!     {
!         return 0;
!     }
!     else
!     {
!         int i = 0;
!         int size = array->vars->lVal;
!         ScriptVariant *elem;
! 
!         for ( i = index; i < size-1; i++ )
!         {
!             ScriptVariant_Copy(array->vars+1+i, array->vars+1+i+1); // first value of array is his size!
!         }
!         --array->vars->lVal;
! 
!         // set last element to NULL
!         elem = array->vars+1+size-1;
!         ScriptVariant_ChangeType(elem, VT_EMPTY);
!         elem->ptrVal = NULL;
! 
!         //realloc mem
!         array->vars = realloc((array->vars), sizeof(*(array->vars))*(array->vars->lVal+1));
! 
!         //printf("aaa: %s\n", (char*)StrCache_Get(elem->strVal) );
!     }
! 
!     return 1;
! }
! 
! // By White Dragon
! int Varlist_DeleteByName(Varlist *array, char *theName)
! {
!     if(!theName || !theName[0])
!     {
!         return 0;
!     }
!     if(List_FindByName(array->list, theName))
!     {
!         Node* node;
!         Node* prev_node;
!         Node* next_node;
! 
!         node = array->list->current;
!         prev_node = node->prev;
!         next_node = node->next;
! 
!         if ( prev_node ) prev_node->next = next_node;
!         if ( next_node ) next_node->prev = prev_node;
! 
!         if ( array->list->last == node ) array->list->last = prev_node;
!         if ( array->list->first == node ) array->list->first = next_node;
!         if ( array->list->first == array->list->last && array->list->first == node ) {
!             array->list->last = NULL;
!             array->list->first = NULL;
!         }
! 
!         --array->list->size;
! 
!         free(node);
!     } else return 0;
! 
!     return 1;
! }
! 
! //this function should be called before all script methods, for once
! void Script_Global_Init()
! {
!     memset(&spawnentry, 0, sizeof(spawnentry)); //clear up the spawn entry
!     drawmethod = plainmethod;
! 
!     Varlist_Init(&global_var_list, max_indexed_vars);
! 
!     List_Init(&theFunctionList);
!     Script_LoadSystemFunctions();
!     List_Init(&scriptheap);
!     ImportCache_Init(&theFunctionList);
! }
! 
! void _freeheapnode(void *ptr)
! {
!     if(((Script *)ptr)->magic == script_magic)
!     {
!         Script_Clear((Script *)ptr, 2);
!     }
!     else if(((anigif_info *)ptr)->magic == anigif_magic)
!     {
!         anigif_close((anigif_info *)ptr);
!     }
!     else if(((Varlist *)ptr)->magic == varlist_magic)
!     {
!         Varlist_Clear((Varlist *)ptr);
!     }
!     else if(((s_sprite *)ptr)->magic == sprite_magic)
!     {
!         if(((s_sprite *)ptr)->mask)
!         {
!             free(((s_sprite *)ptr)->mask);
!         }
!     }
!     free(ptr);
! }
! 
! //this function should only be called when the engine is shutting down
! void Script_Global_Clear()
! {
!     int i, size;
!     List_Clear(&theFunctionList);
!     // dump all un-freed variants
!     size = List_GetSize(&scriptheap);
!     if(size > 0)
!     {
!         printf("\nWarning: %d script variants are not freed, dumping...\n", size);
!     }
!     for(i = 0, List_Reset(&scriptheap); i < size; List_GotoNext(&scriptheap), i++)
!     {
!         printf("%s\n", List_GetName(&scriptheap));
!         _freeheapnode(List_Retrieve(&scriptheap));
!     }
!     List_Clear(&scriptheap);
!     // clear the global list
!     Varlist_Clear(&global_var_list);
! 
!     memset(&spawnentry, 0, sizeof(spawnentry));//clear up the spawn entry
!     for(i = 0; i < numfilestreams; i++)
!     {
!         if(filestreams[i].buf)
!         {
!             free(filestreams[i].buf);
!             filestreams[i].buf = NULL;
!         }
!     }
!     if(filestreams)
!     {
!         free(filestreams);
!     }
!     filestreams = NULL;
!     numfilestreams = 0;
!     ImportCache_Clear();
!     StrCache_Clear();
! }
! 
! int Script_Save_Local_Variant(Script *cs, char *namelist[])
! {
!     return 0;
! }
! 
! void Script_Load_Local_Variant(Script *cs, int handle)
! {
! 
! }
! 
! Script *alloc_script()
! {
!     Script *pscript = calloc(1, sizeof(*pscript));
!     pscript->magic = script_magic;
!     pscript->varlist = calloc(1, sizeof(*pscript->varlist));
!     Varlist_Init(pscript->varlist, max_script_vars);
!     return pscript;
! }
! 
! void Script_Init(Script *pscript, char *theName, char *comment, int first)
! {
!     if(first)
!     {
!         memset(pscript, 0, sizeof(*pscript));
!         pscript->magic = script_magic;
!         pscript->varlist = calloc(1, sizeof(*pscript->varlist));
!         Varlist_Init(pscript->varlist, max_script_vars);
!     }
!     if(!theName || !theName[0])
!     {
!         return;    // if no name specified, only alloc the variants
!     }
! 
!     pscript->pinterpreter = malloc(sizeof(*pscript->pinterpreter));
!     Interpreter_Init(pscript->pinterpreter, theName, &theFunctionList);
!     pscript->interpreterowner = 1; // this is the owner, important
!     pscript->initialized = 1;
!     if(comment)
!     {
!         pscript->comment = malloc(sizeof(*pscript->comment) * (strlen(comment) + 1));
!         strcpy(pscript->comment, comment);
!     }
! }
! 
! static void execute_init_method(Script *pdest, int iscopy, int localclear)
! {
!     Script *temp;
!     ScriptVariant tempvar;
!     //Execute init method
!     if(pdest->initialized && pdest->pinterpreter->pInitEntry)
!     {
!         temp = pcurrentscript;
!         pcurrentscript = pdest;
! 
!         ScriptVariant_Init(&tempvar);
!         ScriptVariant_ChangeType(&tempvar, VT_INTEGER);
!         tempvar.lVal = (LONG)iscopy;
!         Script_Set_Local_Variant(pdest, "iscopy", &tempvar);
!         tempvar.lVal = (LONG)localclear;
!         Script_Set_Local_Variant(pdest, "localclear", &tempvar);
!         Interpreter_Reset(pdest->pinterpreter);
!         pdest->pinterpreter->pCurrentInstruction = pdest->pinterpreter->pInitEntry;
!         if(FAILED( Interpreter_EvaluateCall(pdest->pinterpreter)))
!         {
!             borShutdown(1, "Fatal: failed to execute 'init' in script %s %s", pdest->pinterpreter->theSymbolTable.name, pdest->comment ? pdest->comment : "");
!         }
!         pdest->pinterpreter->bReset = FALSE; // not needed, perhaps
!         ScriptVariant_Clear(&tempvar);
!         Script_Set_Local_Variant(pdest, "iscopy", &tempvar);
!         Script_Set_Local_Variant(pdest, "localclear", &tempvar);
!         pcurrentscript = temp;
!     }
! }
! 
! //safe copy method
! void Script_Copy(Script *pdest, Script *psrc, int localclear)
! {
!     if(!psrc->initialized)
!     {
!         return;
!     }
!     if(pdest->initialized)
!     {
!         Script_Clear(pdest, localclear);
!     }
!     pdest->pinterpreter = psrc->pinterpreter;
!     pdest->comment = psrc->comment;
!     pdest->interpreterowner = 0; // dont own it
!     pdest->initialized = psrc->initialized; //just copy, it should be 1
!     execute_init_method(pdest, 1, localclear);
! }
! 
! void Script_Clear(Script *pscript, int localclear)
! {
!     Script *temp;
!     Varlist *pvars;
! 
!     ScriptVariant tempvar;
!     //Execute clear method
!     if(pscript->initialized && pscript->pinterpreter->pClearEntry)
!     {
!         temp = pcurrentscript;
!         pcurrentscript = pscript;
! 
!         ScriptVariant_Init(&tempvar);
!         ScriptVariant_ChangeType(&tempvar, VT_INTEGER);
!         tempvar.lVal = (LONG)localclear;
!         Script_Set_Local_Variant(pscript, "localclear", &tempvar);
!         Interpreter_Reset(pscript->pinterpreter);
!         pscript->pinterpreter->pCurrentInstruction = pscript->pinterpreter->pClearEntry;
!         if(FAILED( Interpreter_EvaluateCall(pscript->pinterpreter)))
!         {
!             borShutdown(1, "Fatal: failed to execute 'clear' in script %s %s", pscript->pinterpreter->theSymbolTable.name, pscript->comment ? pscript->comment : "");
!         }
!         pscript->pinterpreter->bReset = FALSE; // not needed, perhaps
!         ScriptVariant_Clear(&tempvar);
!         Script_Set_Local_Variant(pscript, "localclear", &tempvar);
!         pcurrentscript = temp;
!     }
! 
!     if(localclear && pscript->varlist)
!     {
!         if(localclear == 2)
!         {
!             Varlist_Clear(pscript->varlist);
!             free(pscript->varlist);
!             pscript->varlist = NULL;
!         }
!         else
!         {
!             Varlist_Cleanup(pscript->varlist);
!         }
!     }
!     if(!pscript->initialized)
!     {
!         return;
!     }
! 
!     //if it is the owner, free the interpreter
!     if(pscript->pinterpreter && pscript->interpreterowner)
!     {
!         Interpreter_Clear(pscript->pinterpreter);
!         free(pscript->pinterpreter);
!         pscript->pinterpreter = NULL;
!         if(pscript->comment)
!         {
!             free(pscript->comment);
!         }
!         pscript->comment = NULL;
!     }
!     pvars = pscript->varlist; // in game clear(localclear!=2) just keep this value
!     memset(pscript, 0, sizeof(*pscript));
!     pscript->varlist = pvars; // copy it back
! }
! 
! //append part of the script
! //Because the script might not be initialized in 1 time.
! int Script_AppendText(Script *pscript, char *text, char *path)
! {
!     int success;
! 
!     //printf(text);
!     Interpreter_Reset(pscript->pinterpreter);
! 
!     success = SUCCEEDED(Interpreter_ParseText(pscript->pinterpreter, text, 1, path));
! 
!     return success;
! }
! 
! /* Replace string constants with enum constants at compile time to speed up
!    script execution. */
! int Script_MapStringConstants(Instruction *pInstruction)
! {
!     ScriptVariant **params;
!     int paramCount;
!     int (*pMapstrings)(ScriptVariant **, int);
! 
!     if(pInstruction->functionRef)
!     {
!         params = (ScriptVariant **)pInstruction->theRefList->solidlist;
!         paramCount = (int)pInstruction->theRef->lVal;
!         assert(paramCount <= 32);
!         // Get the pointer to the correct mapstrings function, if one exists.
!         pMapstrings = Script_GetStringMapFunction(pInstruction->functionRef);
!         if(pMapstrings)
!         {
!             // Call the mapstrings function.
!             if(!pMapstrings(params, paramCount))
!             {
!                 return 0;
!             }
!         }
!     }
! 
!     return 1;
! }
! 
! //should be called only once after parsing text
! int Script_Compile(Script *pscript)
! {
!     int result;
!     if(!pscript || !pscript->pinterpreter)
!     {
!         return 1;
!     }
!     //Interpreter_OutputPCode(pscript->pinterpreter, "code");
!     result = SUCCEEDED(Interpreter_CompileInstructions(pscript->pinterpreter));
!     if(!result)
!     {
!         borShutdown(1, "Can't compile script '%s' %s\n", pscript->pinterpreter->theSymbolTable.name, pscript->comment ? pscript->comment : "");
!     }
! 
!     pscript->pinterpreter->bReset = FALSE;
!     execute_init_method(pscript, 0, 1);
!     return result;
! }
! 
! int Script_IsInitialized(Script *pscript)
! {
!     //if(pscript && pscript->initialized) pcurrentscript = pscript; //used by local script functions
!     return pscript->initialized;
! }
! 
! //execute the script
! int Script_Execute(Script *pscript)
! {
!     int result, nested;
!     extern int no_cmd_compatible;
!     Script *temp = pcurrentscript;
!     Interpreter tinter, *pinter;
!     pcurrentscript = pscript; //used by local script functions
!     nested = pscript->pinterpreter->bReset;
!     if(no_nested_script && nested)
!     {
!         result = 1;
!     }
!     else
!     {
!         pinter = pscript->pinterpreter;
!         if(nested && no_cmd_compatible)
!         {
!             tinter = *pinter;
!         }
!         Interpreter_Reset(pinter);
!         result = (int)SUCCEEDED(Interpreter_EvaluateImmediate(pinter));
!         if(nested && no_cmd_compatible)
!         {
!             *pinter = tinter;
!         }
!         else if(nested)
!         {
!             pinter->bReset = FALSE;
!         }
!     }
!     pcurrentscript = temp;
!     if(!result)
!     {
!         borShutdown(1, "There's an exception while executing script '%s' %s", pscript->pinterpreter->theSymbolTable.name, pscript->comment ? pscript->comment : "");
!     }
!     return result;
! }
! 
! static s_collision_attack attack;
! 
! //////////////////////////////////////////////////////////
! ////////////   system functions
! //////////////////////////////////////////////////////////
! //isempty(var);
! HRESULT system_isempty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     if(paramCount != 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     (*pretvar)->lVal = (LONG)( (varlist[0])->vt == VT_EMPTY );
! 
!     return S_OK;
! }
! //NULL();
! HRESULT system_NULL(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant_Clear(*pretvar);
! 
!     return S_OK;
! }
! HRESULT system_exit(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     pcurrentscript->pinterpreter->bReset = FALSE;
!     return S_OK;
! }
! HRESULT system_rand(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)rand32();
!     return S_OK;
! }
! HRESULT system_srand(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
! 
!     *pretvar = NULL;
!     if(paramCount != 1)
!     {
!         return E_FAIL;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         return E_FAIL;
!     }
! 
!     srand32(ltemp);
!     return S_OK;
! }
! //getglobalvar(varname);
! HRESULT system_getglobalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     ScriptVariant *ptmpvar;
! 
!     if(paramCount != 1)
!     {
!         goto ggv_error;
!     }
! 
!     if(varlist[0]->vt == VT_STR)
!     {
!         ptmpvar = Varlist_GetByName(&global_var_list, StrCache_Get(varlist[0]->strVal));
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         ptmpvar = Varlist_GetByIndex(&global_var_list, (LONG)ltemp);
!     }
!     else
!     {
!         goto ggv_error;
!     }
! 
!     if(ptmpvar)
!     {
!         ScriptVariant_Copy(*pretvar,  ptmpvar);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
!     return S_OK;
! 
! ggv_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! //setglobalvar(varname, value);
! HRESULT system_setglobalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     if(paramCount < 2)
!     {
!         goto sgv_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(varlist[0]->vt == VT_STR)
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByName(&global_var_list, StrCache_Get(varlist[0]->strVal), varlist[1]);
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByIndex(&global_var_list, (LONG)ltemp, varlist[1]);
!     }
!     else
!     {
!         goto sgv_error;
!     }
! 
!     return S_OK;
! sgv_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! //getlocalvar(varname);
! HRESULT system_getlocalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     ScriptVariant *ptmpvar;
! 
!     if(paramCount != 1)
!     {
!         goto glv_error;
!     }
! 
!     if(varlist[0]->vt == VT_STR)
!     {
!         ptmpvar = Varlist_GetByName(pcurrentscript->varlist, StrCache_Get(varlist[0]->strVal));
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         ptmpvar = Varlist_GetByIndex(pcurrentscript->varlist, (LONG)ltemp);
!     }
!     else
!     {
!         goto glv_error;
!     }
! 
!     if(ptmpvar)
!     {
!         ScriptVariant_Copy(*pretvar,  ptmpvar);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
!     return S_OK;
! 
! glv_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! //setlocalvar(varname, value);
! HRESULT system_setlocalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     if(paramCount < 2)
!     {
!         goto slv_error;
!     }
! 
      ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(varlist[0]->vt == VT_STR)
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByName(pcurrentscript->varlist, StrCache_Get(varlist[0]->strVal), varlist[1]);
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByIndex(pcurrentscript->varlist, (LONG)ltemp, varlist[1]);
!     }
!     else
!     {
!         goto slv_error;
!     }
! 
!     return S_OK;
! slv_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! //clearlocalvar();
! HRESULT system_clearlocalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     Varlist_Cleanup(pcurrentscript->varlist);
!     return S_OK;
! }
! //clearglobalvar();
! HRESULT system_clearglobalvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     Varlist_Cleanup(&global_var_list);
!     return S_OK;
! }
! 
! //free();
! HRESULT system_free(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         return E_FAIL;
!     }
!     if(List_Includes(&scriptheap, varlist[0]->ptrVal))
!     {
!         _freeheapnode(List_Retrieve(&scriptheap));
!         // a script's ondestroy() may free something else and change the list
!         // position, so set the position to this variant again
!         List_Includes(&scriptheap, varlist[0]->ptrVal);
!         List_Remove(&scriptheap);
!         return S_OK;
!     }
!     return E_FAIL;
! }
! 
! //typeof(v);
! HRESULT system_typeof(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)varlist[0]->vt;
!     return S_OK;
! }
! 
! //////////////////////////////////////////////////////////
! ////////////   openbor functions
! //////////////////////////////////////////////////////////
! 
! //check openborscript.h for systemvariant_enum
! 
! // arranged list, for searching
! static const char *svlist[] =
! {
!     "background",
      "blockade",
!     "bossescount",
!     "branchname",
!     "cheats",
!     "count_enemies",
!     "count_entities",
!     "count_npcs",
!     "count_players",
!     "current_branch",
!     "current_level",
!     "current_palette",
!     "current_scene",
!     "current_set",
!     "current_stage",
!     "effectvol",
!     "elapsed_time",
!     "ent_max",
!     "fps",
!     "freeram",
!     "game_paused",
!     "game_speed",
!     "game_time",
!     "gfx_x_offset",
!     "gfx_y_offset",
!     "gfx_y_offset_adj",
!     "hresolution",
!     "in_cheat_options",
!     "in_control_options",
!     "in_enginecreditsscreen",
!     "in_gameoverscreen",
!     "in_halloffamescreen",
!     "in_level",
!     "in_load_game",
!     "in_menuscreen",
!     "in_new_game",
!     "in_options",
!     //"in_selectscreen",
!     "in_sa_count",
!     "in_showcomplete",
!     "in_sound_options",
!     "in_start_game",
!     "in_system_options",
!     "in_titlescreen",
!     "in_video_options",
!     "lasthita",
!     "lasthitc",
!     "lasthitt",
!     "lasthitx",
!     "lasthity",
!     "lasthitz",
!     "levelheight",
!     "levelpos",
!     "levelwidth",
!     "lightx",
!     "lightz",
!     "maxanimations",
!     "maxattacktypes",
!     "maxentityvars",
!     "maxglobalvars",
!     "maxindexedvars",
!     "maxplayers",
!     "maxscriptvars",
!     "maxsoundchannels",
!     "models_cached",
!     "models_loaded",
!     "musicvol",
!     "nofadeout",
!     "nogameover",
!     "nohof",
!     "nojoin",
!     "nopause",
!     "nosave",
!     "noscreenshot",
!     "noshowcomplete",
      "numbasemaps",
!     "numbosses",
!     "numholes",
!     "numlayers",
!     "numpalettes",
!     "numwalls",
!     "pakname",
!     "pause",
!     "pixelformat",
!     "player",
!     "player1",
!     "player2",
!     "player3",
!     "player4",
!     "player_max_z",
!     "player_min_z",
!     "porting",
!     "sample_play_id",
!     "scrollmaxx",
!     "scrollmaxz",
!     "scrollminx",
!     "scrollminz",
!     "self",
!     "sets_count",
!     "shadowalpha",
!     "shadowcolor",
!     "shadowopacity",
!     "skiptoset",
!     "slowmotion",
!     "slowmotion_duration",
!     "smartbomber",
!     "soundvol",
!     "textbox",
!     "ticks",
!     "totalram",
!     "usedram",
!     "viewporth",
!     "viewportw",
!     "viewportx",
!     "viewporty",
!     "vresolution",
!     "vscreen",
!     "waiting",
!     "xpos",
!     "ypos",
! };
! 
! 
! // ===== openborvariant =====
! int mapstrings_systemvariant(ScriptVariant **varlist, int paramCount)
! {
!     char *propname;
!     int prop;
! 
! 
!     MAPSTRINGS(varlist[0], svlist, _sv_the_end,
!                "openborvariant: System variable name not found: '%s'\n");
! 
!     return 1;
! }
! 
! //sample function, used for getting a system variant
! //openborvariant(varname);
! HRESULT openbor_systemvariant(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     //used for getting the index from the enum of properties
!     int variantindex = -1;
!     //the paramCount used for checking.
!     //check it first so the engine wont crash if the list is empty
!     if(paramCount != 1)
!     {
!         goto systemvariant_error;
!     }
!     //call this function's mapstrings function to map string constants to enum values
!     mapstrings_systemvariant(varlist, paramCount);
!     //the variant name should be here
!     //you can check the argument type if you like
!     if(varlist[0]->vt == VT_INTEGER)
!     {
!         variantindex = varlist[0]->lVal;
!     }
!     else
!     {
!         goto systemvariant_error;
!     }
!     ///////these should be your get method, ///////
!     ScriptVariant_Clear(*pretvar);
!     if(getsyspropertybyindex(*pretvar, variantindex))
!     {
!         return S_OK;
!     }
!     //else if
!     //////////////////////////////////////////////
! systemvariant_error:
!     *pretvar = NULL;
!     // we have finshed, so return
!     return E_FAIL;
! }
! 
! 
! //used for changing a system variant
! //setopenborvariant(varname, value);
! HRESULT openbor_setsystemvariant(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     //used for getting the enum constant corresponding to the desired variable
!     int variantindex = 0;
!     //reference to the arguments
!     ScriptVariant *arg = NULL;
!     //the paramCount used for checking.
!     //check it first so the engine wont crash if the list is empty
!     if(paramCount != 2)
!     {
!         goto changesystemvariant_error;
!     }
!     // map string constants to enum constants for speed
!     mapstrings_systemvariant(varlist, paramCount);
!     //get the 1st argument
!     arg = varlist[0];
!     //the variant name should be here
!     //you can check the argument type if you like
!     if(arg->vt == VT_INTEGER)
!     {
!         variantindex = arg->lVal;
!     }
!     else
!     {
!         goto changesystemvariant_error;
!     }
! 
!     if(changesyspropertybyindex(variantindex, varlist[1]))
!     {
!         return S_OK;
!     }
! changesystemvariant_error:
!     *pretvar = NULL;
!     // we have finshed, so return
!     return E_FAIL;
! 
! }
! 
! // use font_printf to draw string
! //drawstring(x, y, font, string, z);
! HRESULT openbor_drawstring(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     char buf[MAX_BUFFER_LEN];
!     LONG value[4];
!     *pretvar = NULL;
! 
!     if(paramCount < 4)
!     {
!         goto drawstring_error;
!     }
! 
!     for(i = 0; i < 3; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i)))
!         {
!             goto drawstring_error;
!         }
!     }
!     if(paramCount > 4)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[4], value + 3)))
!         {
!             goto drawstring_error;
!         }
!     }
!     else
!     {
!         value[3] = 0;
!     }
!     ScriptVariant_ToString(varlist[3], buf);
!     font_printf((int)value[0], (int)value[1], (int)value[2], (int)value[3], "%s", buf);
!     return S_OK;
! 
! drawstring_error:
!     printf("First 3 values must be integer values and 4th value a string: drawstring(int x, int y, int font, value)\n");
!     return E_FAIL;
! }
! 
! //use screen_printf
! //drawstringtoscreen(screen, x, y, font, string);
! HRESULT openbor_drawstringtoscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     s_screen *scr;
!     char buf[MAX_BUFFER_LEN];
!     LONG value[3];
!     *pretvar = NULL;
! 
!     if(paramCount != 5)
!     {
!         goto drawstring_error;
!     }
! 
!     if(varlist[0]->vt != VT_PTR)
!     {
!         goto drawstring_error;
!     }
!     scr = (s_screen *)varlist[0]->ptrVal;
!     if(!scr)
!     {
!         goto drawstring_error;
!     }
! 
!     for(i = 0; i < 3; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i + 1], value + i)))
!         {
!             goto drawstring_error;
!         }
!     }
! 
!     ScriptVariant_ToString(varlist[4], buf);
!     screen_printf(scr, (int)value[0], (int)value[1], (int)value[2], "%s", buf);
!     return S_OK;
! 
! drawstring_error:
!     printf("Function needs a valid screen handle, 3 integers and a string value: drawstringtoscreen(screen, int font, value)\n");
!     return E_FAIL;
! }
! 
! // debug purpose
! //log(string);
! HRESULT openbor_log(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     char buf[MAX_BUFFER_LEN];
!     *pretvar = NULL;
! 
!     if(paramCount != 1)
!     {
!         goto drawstring_error;
!     }
! 
!     ScriptVariant_ToString(varlist[0], buf);
!     printf("%s", buf);
!     return S_OK;
! 
! drawstring_error:
!     printf("Function needs 1 parameter: log(value)\n");
!     return E_FAIL;
! }
! 
! //drawbox(x, y, width, height, z, color, lut);
! HRESULT openbor_drawbox(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[6], l;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 6)
!     {
!         goto drawbox_error;
!     }
! 
!     for(i = 0; i < 6; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i)))
!         {
!             goto drawbox_error;
!         }
!     }
! 
!     if(paramCount > 6)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[6], &l)))
!         {
!             goto drawbox_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0)
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
!     spriteq_add_box((int)value[0], (int)value[1], (int)value[2], (int)value[3], (int)value[4], (int)value[5], &dm);
! 
!     return S_OK;
! 
! drawbox_error:
!     printf("Function requires 6 integer values: drawbox(int x, int y, int width, int height, int z, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! //drawboxtoscreen(screen, x, y, width, height, color, lut);
! HRESULT openbor_drawboxtoscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     s_screen *s;
!     LONG value[5], l;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 6)
!     {
!         goto drawbox_error;
!     }
! 
!     s = (s_screen *)varlist[0]->ptrVal;
! 
!     if(!s)
!     {
!         goto drawbox_error;
!     }
! 
!     for(i = 1; i < 6; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawbox_error;
!         }
!     }
! 
!     if(paramCount > 6)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[6], &l)))
!         {
!             goto drawbox_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0)
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
! 
!     putbox((int)value[0], (int)value[1], (int)value[2], (int)value[3], (int)value[4], s, &dm);
! 
!     return S_OK;
! 
! drawbox_error:
!     printf("Function requires a screen handle and 5 integer values, 7th integer value is optional: drawboxtoscreen(screen, int x, int y, int width, int height, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! //drawline(x1, y1, x2, y2, z, color, lut);
! HRESULT openbor_drawline(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[6], l;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 6)
!     {
!         goto drawline_error;
!     }
! 
!     for(i = 0; i < 6; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i)))
!         {
!             goto drawline_error;
!         }
!     }
! 
!     if(paramCount > 6)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[6], &l)))
!         {
!             goto drawline_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0 )
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
!     spriteq_add_line((int)value[0], (int)value[1], (int)value[2], (int)value[3], (int)value[4], (int)value[5], &dm);
! 
!     return S_OK;
! 
! drawline_error:
!     printf("Function requires 6 integer values, 7th integer value is optional: drawline(int x1, int y1, int x2, int y2, int z, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! //drawlinetoscreen(screen, x1, y1, x2, y2, color, lut);
! HRESULT openbor_drawlinetoscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[5], l;
!     s_screen *s;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 6)
!     {
!         goto drawline_error;
!     }
! 
!     s = (s_screen *)varlist[0]->ptrVal;
! 
!     if(!s)
!     {
!         goto drawline_error;
!     }
! 
!     for(i = 1; i < 6; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawline_error;
!         }
!     }
! 
!     if(paramCount > 6)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[6], &l)))
!         {
!             goto drawline_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0 )
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
!     putline((int)value[0], (int)value[1], (int)value[2], (int)value[3], (int)value[4], s, &dm);
! 
!     return S_OK;
! drawline_error:
!     printf("Function requires a screen handle and 5 integer values, 7th integer value is optional: drawlinetoscreen(screen, int x1, int y1, int x2, int y2, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! //drawsprite(sprite, x, y, z, sortid);
! HRESULT openbor_drawsprite(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[4];
!     s_sprite *spr;
!     *pretvar = NULL;
! 
!     if(paramCount < 4)
!     {
!         goto drawsprite_error;
!     }
!     if(varlist[0]->vt != VT_PTR)
!     {
!         goto drawsprite_error;
!     }
! 
!     spr = varlist[0]->ptrVal;
!     if(!spr)
!     {
!         goto drawsprite_error;
!     }
! 
!     value[3] = (LONG)0;
!     for(i = 1; i < paramCount && i < 5; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawsprite_error;
!         }
!     }
! 
!     spriteq_add_frame((int)value[0], (int)value[1], (int)value[2], spr, &drawmethod, (int)value[3]);
! 
!     return S_OK;
! 
! drawsprite_error:
!     printf("Function requires a valid sprite handle 3 integer values, 5th integer value is optional: drawsprite(sprite, int x, int y, int z, int sortid)\n");
!     return E_FAIL;
! }
! 
! //drawspritetoscreen(sprite, screen, x, y);
! HRESULT openbor_drawspritetoscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[2];
!     s_sprite *spr;
!     s_screen *scr;
!     *pretvar = NULL;
! 
!     if(paramCount < 4)
!     {
!         goto drawsprite_error;
!     }
!     if(varlist[0]->vt != VT_PTR)
!     {
!         goto drawsprite_error;
!     }
!     spr = varlist[0]->ptrVal;
!     if(!spr)
!     {
!         goto drawsprite_error;
!     }
! 
!     if(varlist[1]->vt != VT_PTR)
!     {
!         goto drawsprite_error;
!     }
!     scr = varlist[1]->ptrVal;
!     if(!scr)
!     {
!         goto drawsprite_error;
!     }
! 
!     for(i = 2; i < paramCount && i < 4; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 2)))
!         {
!             goto drawsprite_error;
!         }
!     }
! 
!     putsprite((int)value[0], (int)value[1], spr, scr, &drawmethod);
! 
!     return S_OK;
! 
! drawsprite_error:
!     printf("Function requires a valid sprite handle, a valid screen handle and 2 integer values: drawspritetoscreen(sprite, screen, int x, int y)\n");
!     return E_FAIL;
! }
! 
! //drawdot(x, y, z, color, lut);
! HRESULT openbor_drawdot(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[4], l;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 4)
!     {
!         goto drawdot_error;
!     }
! 
!     for(i = 0; i < 4; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i)))
!         {
!             goto drawdot_error;
!         }
!     }
! 
!     if(paramCount > 4)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[4], &l)))
!         {
!             goto drawdot_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0 )
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
!     spriteq_add_dot((int)value[0], (int)value[1], (int)value[2], (int)value[3], &dm);
! 
!     return S_OK;
! 
! drawdot_error:
!     printf("Function requires 4 integer values, 5th integer value is optional: drawdot(int x, int y, int z, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! //drawdottoscreen(screen, x, y, color, lut);
! HRESULT openbor_drawdottoscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[3], l;
!     s_screen *s;
!     *pretvar = NULL;
!     s_drawmethod dm;
! 
!     if(paramCount < 4)
!     {
!         goto drawdot_error;
!     }
! 
!     s = (s_screen *)varlist[0]->ptrVal;
! 
!     if(!s)
!     {
!         goto drawdot_error;
!     }
! 
!     for(i = 1; i < 4; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawdot_error;
!         }
!     }
! 
!     if(paramCount > 4)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[4], &l)))
!         {
!             goto drawdot_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0 )
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(drawmethod.flag)
!     {
!         dm = drawmethod;
!     }
!     else
!     {
!         dm = plainmethod;
!     }
!     dm.alpha = l;
! 
!     putpixel((int)value[0], (int)value[1], (int)value[2], s, &dm);
! 
!     return S_OK;
! 
! drawdot_error:
!     printf("Function requires a screen handle and 3 integer values, 5th integer value is optional: dottoscreen(screen, int x, int y, int color, int lut)\n");
!     return E_FAIL;
! }
! 
! 
! //drawscreen(screen, x, y, z, lut);
! HRESULT openbor_drawscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG value[3], l;
!     s_screen *s;
!     s_drawmethod screenmethod;
!     *pretvar = NULL;
! 
!     if(paramCount < 4)
!     {
!         goto drawscreen_error;
!     }
! 
!     s = (s_screen *)varlist[0]->ptrVal;
! 
!     if(!s)
!     {
!         goto drawscreen_error;
!     }
! 
!     for(i = 1; i < 4; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawscreen_error;
!         }
!     }
! 
!     if(paramCount > 4)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[4], &l)))
!         {
!             goto drawscreen_error;
!         }
!     }
!     else
!     {
!         l = -1;
!     }
! 
!     if(l >= 0 )
!     {
!         l %= MAX_BLENDINGS + 1;
!     }
!     if(paramCount <= 4)
!     {
!         screenmethod = drawmethod;
!     }
!     else
!     {
!         screenmethod = plainmethod;
!         screenmethod.alpha = l;
!         screenmethod.transbg = 1;
!     }
! 
!     spriteq_add_screen((int)value[0], (int)value[1], (int)value[2], s, &screenmethod, 0);
! 
!     return S_OK;
! 
! drawscreen_error:
!     printf("Function requires a screen handle and 3 integer values, 5th integer value is optional: drawscreen(screen, int x, int y, int z, int lut)\n");
!     return E_FAIL;
! }
! 
! //getindexedvar(int index);
! HRESULT openbor_getindexedvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     return system_getglobalvar(varlist, pretvar, paramCount);
! }
! 
! //setindexedvar(int index, var);
! HRESULT openbor_setindexedvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     return system_setglobalvar(varlist, pretvar, paramCount);
! }
! 
! //getscriptvar(int index);
! HRESULT openbor_getscriptvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     return system_getlocalvar(varlist, pretvar, paramCount);
! }
! 
! //setscriptvar(int index, var);
! HRESULT openbor_setscriptvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     return system_setlocalvar(varlist, pretvar, paramCount);
! }
! 
! //getentityvar(entity, int index);
! HRESULT openbor_getentityvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     ScriptVariant *ptmpvar;
!     entity *ent;
! 
!     if(paramCount < 2 || varlist[0]->vt != VT_PTR || !varlist[0]->ptrVal)
!     {
!         goto gev_error;
!     }
! 
!     ent = (entity *)varlist[0]->ptrVal;
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         ptmpvar = Varlist_GetByName(ent->varlist, StrCache_Get(varlist[1]->strVal));
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &ltemp)))
!     {
!         ptmpvar = Varlist_GetByIndex(ent->varlist, (LONG)ltemp);
!     }
!     else
!     {
!         goto gev_error;
!     }
! 
!     if(ptmpvar)
!     {
!         ScriptVariant_Copy(*pretvar,  ptmpvar);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
!     return S_OK;
! 
! gev_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //setentityvar(int index, var);
! HRESULT openbor_setentityvar(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     entity *ent;
! 
!     if(paramCount < 3 || varlist[0]->vt != VT_PTR || !varlist[0]->ptrVal)
!     {
!         goto sev_error;
!     }
! 
!     ent = (entity *)varlist[0]->ptrVal;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByName(ent->varlist, StrCache_Get(varlist[1]->strVal), varlist[2]);
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &ltemp)))
!     {
!         (*pretvar)->lVal = (LONG)Varlist_SetByIndex(ent->varlist, (LONG)ltemp, varlist[2]);
!     }
!     else
!     {
!         goto sev_error;
!     }
! 
!     return S_OK;
! sev_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! HRESULT openbor_getmodelproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int iArg;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     if((varlist[0]->vt != VT_INTEGER && varlist[0]->vt != VT_STR) || varlist[1]->vt != VT_INTEGER)
!     {
!         printf("\n Error, getmodelproperty({model}, {property}): Invalid or missing parameter. Getmodelproperty must be passed valid {model} and {property} indexes.\n");
!     }
! 
!     iArg = varlist[0]->vt == VT_INTEGER ? varlist[0]->lVal : get_cached_model_index(StrCache_Get(varlist[0]->strVal));
! 
!     if(iArg < 0 || iArg >= models_cached)
!     {
!         return E_FAIL;
!     }
! 
!     switch (varlist[1]->lVal)
!     {
!     case 0:                                                    //Loaded?
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)model_cache[iArg].loadflag;
!         break;
!     }
!     case 1:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)model_cache[iArg].model;
!     }
!     case 2:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(model_cache[iArg].name);
!         break;
!     }
!     case 3:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(model_cache[iArg].path);
!         break;
!     }
!     case 4:                                                    //Loaded?
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)model_cache[iArg].selectable;
!         break;
!     }
!     }
! 
!     return S_OK;
! }
! 
! HRESULT openbor_changemodelproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int iArg;
!     LONG ltemp;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     if((varlist[0]->vt != VT_INTEGER && varlist[0]->vt != VT_STR) || varlist[1]->vt != VT_INTEGER)
!     {
!         printf("\n Error, changemodelproperty({model}, {property}, {value}): Invalid or missing parameter. Changemodelproperty must be passed valid {model}, {property} and {value}.\n");
!     }
! 
!     iArg = varlist[0]->vt == VT_INTEGER ? varlist[0]->lVal : get_cached_model_index(StrCache_Get(varlist[0]->strVal));
! 
!     if(iArg < 0 || iArg >= models_cached)
!     {
!         return E_FAIL;
!     }
! 
!     switch (varlist[1]->lVal)
!     {
!     case 0:                                                    //Loaded?
!     {
!         /*
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         	model_cache[iArg].loadflag = (LONG)ltemp;
!         else (*pretvar)->lVal = (LONG)0;
!         break;
!         */
!     }
!     case 1:
!     {
!         /*
!         if(varlist[2]->vt != VT_STR)
!         {
!         	printf("You must give a string value for {value}.\n");
!         	goto changeentityproperty_error;
!         }
!         strcpy(model_cache[iArg].model, (char*)StrCache_Get(varlist[2]->strVal));
!         (*pretvar)->lVal = (LONG)1;
!         break;
!         */
!     }
!     case 2:
!     {
!         /*
!         if(varlist[2]->vt != VT_STR)
!         {
!         	printf("You must give a string value for {value}.\n");
!         	goto changeentityproperty_error;
!         }
!         strcpy(model_cache[iArg].name, (char*)StrCache_Get(varlist[2]->strVal));
!         (*pretvar)->lVal = (LONG)1;
!         break;
!         */
!     }
!     case 3:
!     {
!         /*
!         if(varlist[2]->vt != VT_STR)
!         {
!         	printf("You must give a string value for {value}.\n");
!         	goto changeentityproperty_error;
!         }
!         strcpy(model_cache[iArg].path, (char*)StrCache_Get(varlist[2]->strVal));
!         (*pretvar)->lVal = (LONG)1;
!         break;
!         */
!     }
!     case 4:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             model_cache[iArg].selectable = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     }
!     }
! 
!     return S_OK;
! }
! 
! // ===== getentityproperty =====
! enum entityproperty_enum
! {
!     _ep_a,
!     _ep_aggression,
!     _ep_aiattack,
!     _ep_aiflag,
!     _ep_aimove,
!     _ep_alpha,
!     _ep_animal,
!     _ep_animating,
!     _ep_animation,
!     _ep_animation_handle,
!     _ep_animationid,
!     _ep_animheight,
!     _ep_animhits,
!     _ep_animnum,
!     _ep_animpos,
!     _ep_animvalid,
!     _ep_antigrab,
!     _ep_antigravity,
!     _ep_attackid,
!     _ep_attacking,
!     _ep_attackthrottle,
!     _ep_attackthrottletime,
!     _ep_autokill,
!     _ep_base,
      _ep_bbox,
!     _ep_binding,
!     _ep_blink,
!     _ep_blockback,
!     _ep_blockodds,
!     _ep_blockpain,
!     _ep_boomerang,
!     _ep_boss,
!     _ep_bounce,
!     _ep_bound,
!     _ep_candamage,
!     _ep_chargerate,
!     _ep_colourmap,
!     _ep_colourtable,
!     _ep_combostep,
!     _ep_combotime,
!     _ep_custom_target,
!     _ep_damage_on_landing,
!     _ep_dead,
!     _ep_defaultmodel,
!     _ep_defaultname,
!     _ep_defense,
!     _ep_destx,
!     _ep_destz,
      _ep_detect,
!     _ep_die_on_landing,
!     _ep_direction,
!     _ep_dot,
!     _ep_dropframe,
      _ep_edelay,
      _ep_edge,
!     _ep_edgerange,
!     _ep_energycost,
!     _ep_escapecount,
!     _ep_escapehits,
!     _ep_exists,
!     _ep_facing,
!     _ep_falldie,
!     _ep_flash,
!     _ep_freezetime,
!     _ep_frozen,
!     _ep_gfxshadow,
!     _ep_grabbing,
!     _ep_grabforce,
!     _ep_guardpoints,
!     _ep_hasplatforms,
!     _ep_health,
!     _ep_height,
!     _ep_hitbyid,
!     _ep_hitheadplatform,
!     _ep_hitwall,
!     _ep_hmapl,
!     _ep_hmapu,
!     _ep_hostile,
!     _ep_icon,
!     _ep_iconposition,
!     _ep_invincible,
!     _ep_invinctime,
!     _ep_jugglepoints,
!     _ep_jumpheight,
!     _ep_jumpmovex,
!     _ep_jumpmovez,
!     _ep_jumpspeed,
!     _ep_knockdowncount,
!     _ep_komap,
!     _ep_landedplatform,
!     _ep_landframe,
!     _ep_lifeposition,
!     _ep_lifespancountdown,
!     _ep_link,
!     _ep_map,
!     _ep_mapcount,
!     _ep_mapdefault,
!     _ep_maps,
!     _ep_maptime,
!     _ep_maxguardpoints,
!     _ep_maxhealth,
!     _ep_maxjugglepoints,
!     _ep_maxmp,
!     _ep_model,
!     _ep_mp,
!     _ep_mpdroprate,
!     _ep_mprate,
!     _ep_mpset,
!     _ep_mpstable,
!     _ep_mpstableval,
!     _ep_name,
!     _ep_nameposition,
!     _ep_nextanim,
!     _ep_nextmove,
!     _ep_nextthink,
!     _ep_no_adjust_base,
!     _ep_noaicontrol,
!     _ep_nodieblink,
!     _ep_nodrop,
!     _ep_nograb,
!     _ep_nohithead,
!     _ep_nolife,
!     _ep_nopain,
!     _ep_numweapons,
!     _ep_offense,
!     _ep_offscreen_noatk_factor,
!     _ep_offscreenkill,
!     _ep_opponent,
!     _ep_owner,
!     _ep_pain_time,
!     _ep_parent,
!     _ep_path,
!     _ep_pathfindstep,
!     _ep_playerindex,
      _ep_position,
!     _ep_prevanimationid,
!     _ep_projectile,
!     _ep_projectilehit,
!     _ep_range,
!     _ep_releasetime,
!     _ep_running,
!     _ep_rush_count,
!     _ep_rush_tally,
!     _ep_rush_time,
!     _ep_score,
!     _ep_scroll,
!     _ep_seal,
!     _ep_sealtime,
!     _ep_setlayer,
!     _ep_shadowbase,
!     _ep_sortid,
!     _ep_spawntype,
!     _ep_speed,
!     _ep_sprite,
!     _ep_spritea,
!     _ep_stalltime,
!     _ep_staydown,
!     _ep_staydownatk,
!     _ep_stealth,
!     _ep_subentity,
!     _ep_subject_to_basemap,
!     _ep_subject_to_gravity,
!     _ep_subject_to_hole,
!     _ep_subject_to_maxz,
!     _ep_subject_to_minz,
!     _ep_subject_to_obstacle,
!     _ep_subject_to_platform,
!     _ep_subject_to_screen,
!     _ep_subject_to_wall,
!     _ep_subtype,
!     _ep_takeaction,
!     _ep_think,
!     _ep_thold,
!     _ep_throwdamage,
!     _ep_throwdist,
!     _ep_throwframewait,
!     _ep_throwheight,
!     _ep_tosstime,
!     _ep_tossv,
!     _ep_trymove,
!     _ep_type,
!     _ep_velocity,
!     _ep_vulnerable,
!     _ep_walkoffmovex,
!     _ep_walkoffmovez,
!     _ep_weapent,
!     _ep_weaploss,
!     _ep_weapnum,
!     _ep_weapon,
!     _ep_x,
!     _ep_xdir,
!     _ep_y,
!     _ep_z,
!     _ep_zdir,
!     _ep_the_end,
! };
! 
! // arranged list, for searching
! static const char *eplist[] =
! {
!     "a",
!     "aggression",
!     "aiattack",
!     "aiflag",
!     "aimove",
!     "alpha",
!     "animal",
!     "animating",
!     "animation",
!     "animation.handle",
!     "animationid",
!     "animheight",
!     "animhits",
!     "animnum",
!     "animpos",
!     "animvalid",
!     "antigrab",
!     "antigravity",
!     "attackid",
!     "attacking",
!     "attackthrottle",
!     "attackthrottletime",
!     "autokill",
!     "base",
      "bbox",
!     "binding",
!     "blink",
!     "blockback",
!     "blockodds",
!     "blockpain",
!     "boomerang",
!     "boss",
!     "bounce",
!     "bound",
!     "candamage",
!     "chargerate",
!     "colourmap",
!     "colourtable",
!     "combostep",
!     "combotime",
!     "custom_target",
!     "damage_on_landing",
!     "dead",
!     "defaultmodel",
!     "defaultname",
!     "defense",
!     "destx",
!     "destz",
      "detect",
!     "die_on_landing",
!     "direction",
!     "dot",
!     "dropframe",
      "edelay",
      "edge",
!     "edgerange",
!     "energycost",
!     "escapecount",
!     "escapehits",
!     "exists",
!     "facing",
!     "falldie",
!     "flash",
!     "freezetime",
!     "frozen",
!     "gfxshadow",
!     "grabbing",
!     "grabforce",
!     "guardpoints",
!     "hasplatforms",
!     "health",
!     "height",
!     "hitbyid",
!     "hitheadplatform",
!     "hitwall",
!     "hmapl",
!     "hmapu",
!     "hostile",
!     "icon",
!     "iconposition",
!     "invincible",
!     "invinctime",
!     "jugglepoints",
!     "jumpheight",
!     "jumpmovex",
!     "jumpmovez",
!     "jumpspeed",
!     "knockdowncount",
!     "komap",
!     "landedplatform",
!     "landframe",
!     "lifeposition",
!     "lifespancountdown",
!     "link",
!     "map",
!     "mapcount",
!     "mapdefault",
!     "maps",
!     "maptime",
!     "maxguardpoints",
!     "maxhealth",
!     "maxjugglepoints",
!     "maxmp",
!     "model",
!     "mp",
!     "mpdroprate",
!     "mprate",
!     "mpset",
!     "mpstable",
!     "mpstableval",
!     "name",
!     "nameposition",
!     "nextanim",
!     "nextmove",
!     "nextthink",
!     "no_adjust_base",
!     "noaicontrol",
!     "nodieblink",
!     "nodrop",
!     "nograb",
!     "nohithead",
!     "nolife",
!     "nopain",
!     "numweapons",
!     "offense",
!     "offscreennoatkfactor",
!     "offscreenkill",
!     "opponent",
!     "owner",
!     "pain_time",
!     "parent",
!     "path",
!     "pathfindstep",
!     "playerindex",
      "position",
!     "prevanimationid",
!     "projectile",
!     "projectilehit",
!     "range",
!     "releasetime",
!     "running",
!     "rush_count",
!     "rush_tally",
!     "rush_time",
!     "score",
!     "scroll",
!     "seal",
!     "sealtime",
!     "setlayer",
!     "shadowbase",
!     "sortid",
!     "spawntype",
!     "speed",
!     "sprite",
!     "spritea",
!     "stalltime",
!     "staydown",
!     "staydownatk",
!     "stealth",
!     "subentity",
!     "subject_to_basemap",
!     "subject_to_gravity",
!     "subject_to_hole",
!     "subject_to_maxz",
!     "subject_to_minz",
!     "subject_to_obstacle",
!     "subject_to_platform",
!     "subject_to_screen",
!     "subject_to_wall",
!     "subtype",
!     "takeaction",
!     "think",
!     "thold",
!     "throwdamage",
!     "throwdist",
!     "throwframewait",
!     "throwheight",
!     "tosstime",
!     "tossv",
!     "trymove",
!     "type",
!     "velocity",
!     "vulnerable",
!     "walkoffmovex",
!     "walkoffmovez",
!     "weapent",
!     "weaploss",
!     "weapnum",
!     "weapon",
!     "x",
!     "xdir",
!     "y",
!     "z",
!     "zdir",
! };
! 
! enum aiflag_enum
! {
!     _ep_aiflag_animating,
!     _ep_aiflag_attacking,
!     _ep_aiflag_autokill,
!     _ep_aiflag_blink,
!     _ep_aiflag_blocking,
!     _ep_aiflag_charging,
!     _ep_aiflag_dead,
      _ep_aiflag_drop,
!     _ep_aiflag_ducking,
!     _ep_aiflag_falling,
!     _ep_aiflag_frozen,
!     _ep_aiflag_getting,
!     _ep_aiflag_idlemode,
!     _ep_aiflag_idling,
!     _ep_aiflag_inbackpain,
!     _ep_aiflag_inpain,
!     _ep_aiflag_invincible,
!     _ep_aiflag_jumpid,
!     _ep_aiflag_jumping,
      _ep_aiflag_projectile,
      _ep_aiflag_riseattacking,
!     _ep_aiflag_rising,
!     _ep_aiflag_running,
!     _ep_aiflag_toexplode,
!     _ep_aiflag_turning,
!     _ep_aiflag_walking,
!     _ep_aiflag_walkmode,
!     _ep_aiflag_the_end,
! };
! 
! 
! static const char *eplist_aiflag[] =
! {
!     "animating",
!     "attacking",
!     "autokill",
!     "blink",
!     "blocking",
!     "charging",
!     "dead",
      "drop",
!     "ducking",
!     "falling",
!     "frozen",
!     "getting",
!     "idlemode",
!     "idling",
!     "inbackpain",
!     "inpain",
!     "invincible",
!     "jumpid",
!     "jumping",
      "projectile",
      "riseattacking",
!     "rising",
!     "running",
!     "toexplode",
!     "turning",
!     "walking",
!     "walkmode",
! };
! 
! enum boomerang_enum
! {
!     _ep_boomerang_acceleration,
!     _ep_boomerang_hdistance,
!     _ep_boomerang_the_end,
! };
! 
! static const char *eplist_boomerang[] =
! {
!     "acceleration",
!     "hdistance",
! };
! 
! enum edgerange_enum
! {
!     _ep_edgerange_x,
!     _ep_edgerange_z,
!     _ep_edgerange_the_end,
! };
! 
! static const char *eplist_edgerange[] =
! {
!     "x",
!     "z",
! };
! 
! // ===== changedrawmethod ======
! enum drawmethod_enum
! {
!     _dm_alpha,
!     _dm_amplitude,
!     _dm_beginsize,
!     _dm_centerx,
!     _dm_centery,
!     _dm_channelb,
!     _dm_channelg,
!     _dm_channelr,
!     _dm_clip,
!     _dm_cliph,
!     _dm_clipw,
!     _dm_clipx,
!     _dm_clipy,
!     _dm_enabled,
!     _dm_endsize,
!     _dm_fillcolor,
!     _dm_flag,
!     _dm_fliprotate,
!     _dm_flipx,
!     _dm_flipy,
!     _dm_perspective,
!     _dm_remap,
!     _dm_reset,
!     _dm_rotate,
!     _dm_scalex,
!     _dm_scaley,
!     _dm_shiftx,
!     _dm_table,
!     _dm_tintcolor,
!     _dm_tintmode,
!     _dm_transbg,
!     _dm_watermode,
!     _dm_wavelength,
!     _dm_wavespeed,
!     _dm_wavetime,
!     _dm_xrepeat,
!     _dm_xspan,
!     _dm_yrepeat,
!     _dm_yspan,
!     _dm_the_end,
! };
! 
! enum _prop_dropframe_enum
! {
!     _PROP_DROPFRAME_FRAME,
!     _PROP_DROPFRAME_VELOCITY_X,
!     _PROP_DROPFRAME_VELOCITY_Y,
!     _PROP_DROPFRAME_VELOCITY_Z,
!     _PROP_DROPFRAME_THE_END
! };
! 
! enum _prop_followup_enum
! {
!     _PROP_FOLLOWUP_ANIMATION,
!     _PROP_FOLLOWUP_CONDITION,
!     _PROP_FOLLOWUP_THE_END
! };
! 
! enum _prop_jumpframe_enum
! {
!     _PROP_JUMPFRAME_FRAME,
!     _PROP_JUMPFRAME_VELOCITY_X,
!     _PROP_JUMPFRAME_VELOCITY_Y,
!     _PROP_JUMPFRAME_VELOCITY_Z,
!     _PROP_JUMPFRAME_THE_END
! };
! 
! enum _prop_landframe_enum
! {
!     _PROP_LANDFRAME_FRAME,
!     _PROP_LANDFRAME_VELOCITY_X,
!     _PROP_LANDFRAME_VELOCITY_Y,
!     _PROP_LANDFRAME_VELOCITY_Z,
!     _PROP_LANDFRAME_THE_END
! };
! 
! enum _prop_loop_enum
! {
!     _PROP_LOOP_FRAME_MAX,
!     _PROP_LOOP_FRAME_MIN,
!     _PROP_LOOP_MODE,
!     _PROP_LOOP_THE_END
! };
! 
!  enum _prop_move_enum
! {
!     _PROP_MOVE_BASE,
!     _PROP_MOVE_X,
!     _PROP_MOVE_Y,
!     _PROP_MOVE_Z,
!     _PROP_MOVE_THE_END
! };
! 
!  enum _prop_offset_enum
! {
!     _PROP_OFFSET_X,
!     _PROP_OFFSET_Y,
!     _PROP_OFFSET_THE_END
! };
! 
!  enum _prop_platform_enum
! {
!     _PROP_PLATFORM_ALT,
!     _PROP_PLATFORM_DEPTH,
!     _PROP_PLATFORM_LOWERLEFT,
!     _PROP_PLATFORM_LOWERRIGHT,
!     _PROP_PLATFORM_UPPERLEFT,
!     _PROP_PLATFORM_UPPERRIGHT,
!     _PROP_PLATFORM_X,
!     _PROP_PLATFORM_Z,
!     _PROP_PLATFORM_THE_END
! };
! 
! enum _prop_projectile_enum
! {
!     _PROP_PROJECTILE_BOMB,
!     _PROP_PROJECTILE_FLASH,
!     _PROP_PROJECTILE_KNIFE,
!     _PROP_PROJECTILE_SHOOTFRAME,
!     _PROP_PROJECTILE_STAR,
!     _PROP_PROJECTILE_THROWFRAME,
!     _PROP_PROJECTILE_THROWPOSITION_BASE,
!     _PROP_PROJECTILE_THROWPOSITION_X,
!     _PROP_PROJECTILE_THROWPOSITION_Y,
!     _PROP_PROJECTILE_THROWPOSITION_Z,
!     _PROP_PROJECTILE_TOSSFRAME,
!     _PROP_PROJECTILE_THE_END
! };
! 
! enum _prop_quakeframe_enum
! {
!     _PROP_QUAKEFRAME_FRAMESTART,
!     _PROP_QUAKEFRAME_INTENSITY,
!     _PROP_QUAKEFRAME_REPEAT,
!     _PROP_QUAKEFRAME_THE_END
! };
! 
! enum _prop_range_enum
! {
!     _PROP_RANGEA_MAX,
!     _PROP_RANGEA_MIN,
!     _PROP_RANGEB_MAX,
!     _PROP_RANGEB_MIN,
!     _PROP_RANGEX_MAX,
!     _PROP_RANGEX_MIN,
!     _PROP_RANGEZ_MAX,
!     _PROP_RANGEZ_MIN,
!     _PROP_RANGE_THE_END
! };
! 
! enum _prop_size_enum
! {
!     _PROP_SIZE_BASE,
!     _PROP_SIZE_X,
!     _PROP_SIZE_Y,
!     _PROP_SIZE_Z,
!     _PROP_SIZE_THE_END
! };
! 
!  enum _prop_shadow_enum
! {
!     _PROP_FSHADOW,
!     _PROP_SHADOW_COORDS_X,
!     _PROP_SHADOW_COORDS_Y,
!     _PROP_SHADOW_THE_END
! };
! 
! enum _prop_spawnframe_enum
! {
!     _PROP_SPAWNFRAME_FRAME,
!     _PROP_SPAWNFRAME_RELATIVE,
!     _PROP_SPAWNFRAME_X,
!     _PROP_SPAWNFRAME_Y,
!     _PROP_SPAWNFRAME_Z,
!     _PROP_SPAWNFRAME_THE_END
! };
! 
! enum _prop_spritea_enum
! {
!     _PROP_SPRITEA_CENTERX,
!     _PROP_SPRITEA_CENTERY,
!     _PROP_SPRITEA_FILE,
!     _PROP_SPRITEA_OFFSETX,
!     _PROP_SPRITEA_OFFSETY,
!     _PROP_SPRITEA_SPRITE,
!     _PROP_SPRITEA_THE_END
! };
! 
! enum _prop_summonframe_enum
! {
!     _PROP_SUMMONFRAME_FRAME,
!     _PROP_SUMMONFRAME_RELATIVE,
!     _PROP_SUMMONFRAME_X,
!     _PROP_SUMMONFRAME_Y,
!     _PROP_SUMMONFRAME_Z,
!     _PROP_SUMMONFRAME_THE_END
! };
! 
! enum _prop_starvelocity_enum
! {
!     _PROP_STARVELOCITY_1,
!     _PROP_STARVELOCITY_2,
!     _PROP_STARVELOCITY_3,
!     _PROP_STARVELOCITY_THE_END
! };
! 
! enum _prop_weaponframe_enum
! {
!     _PROP_WEAPONFRAME_FRAME,
!     _PROP_WEAPONFRAME_WEAPON,
!     _PROP_WEAPONFRAME_THE_END
! };
! 
! enum _ep_defense_enum
! {
!     _ep_defense_blockpower,
!     _ep_defense_blockratio,
!     _ep_defense_blockthreshold,
!     _ep_defense_blocktype,
!     _ep_defense_factor,
!     _ep_defense_knockdown,
!     _ep_defense_pain,
!     _ep_defense_the_end,
! };
! 
! enum gep_dot_enum
! {
!     _ep_dot_force,
!     _ep_dot_mode,
!     _ep_dot_owner,
!     _ep_dot_rate,
!     _ep_dot_time,
!     _ep_dot_type,
!     _ep_dot_the_end,
! };
! 
! enum gep_edelay_enum
! {
!     _ep_edelay_cap_max,
!     _ep_edelay_cap_min,
!     _ep_edelay_factor,
!     _ep_edelay_mode,
!     _ep_edelay_range_max,
!     _ep_edelay_range_min,
!     _ep_edelay_the_end,
! };
! 
! enum gep_energycost_enum
! {
!     _ep_energycost_cost,
!     _ep_energycost_disable,
!     _ep_energycost_mponly,
!     _ep_energycost_the_end,
! };
! 
! enum gep_flash_enum
! {
!     _ep_flash_block,
!     _ep_flash_def,
!     _ep_flash_noattack,
!     _ep_flash_the_end,
! };
! 
! enum gep_icon_enum
! {
!     _ep_icon_def,
!     _ep_icon_die,
!     _ep_icon_get,
!     _ep_icon_mphigh,
!     _ep_icon_mplow,
!     _ep_icon_mpmed,
!     _ep_icon_pain,
!     _ep_icon_weapon,
!     _ep_icon_x,
!     _ep_icon_y,
!     _ep_icon_the_end,
! };
! 
! enum _ep_knockdowncount_enum
! {
!     _ep_knockdowncount_current,
!     _ep_knockdowncount_max,
!     _ep_knockdowncount_time,
!     _ep_knockdowncount_the_end,
! };
! 
! enum gep_landframe_enum
! {
!     _ep_landframe_ent,
!     _ep_landframe_frame,
!     _ep_landframe_the_end,
! };
! 
! enum gep_maps_enum
! {
!     _ep_maps_count,
!     _ep_maps_current,
!     _ep_maps_default,
!     _ep_maps_dying,
!     _ep_maps_dying_critical,
!     _ep_maps_dying_low,
!     _ep_maps_frozen,
!     _ep_maps_hide_end,
!     _ep_maps_hide_start,
!     _ep_maps_ko,
!     _ep_maps_kotype,
!     _ep_maps_table,
!     _ep_maps_time,
!     _ep_maps_the_end,
! };
! 
! enum gep_range_enum
! {
!     _ep_range_amax,
!     _ep_range_amin,
!     _ep_range_bmax,
!     _ep_range_bmin,
!     _ep_range_xmax,
!     _ep_range_xmin,
!     _ep_range_zmax,
!     _ep_range_zmin,
!     _ep_range_the_end,
! };
! 
! enum gep_running_enum
! {
!     _ep_running_jumpx,
!     _ep_running_jumpy,
!     _ep_running_land,
!     _ep_running_movez,
!     _ep_running_speed,
!     _ep_running_the_end,
! };
! 
! enum gep_spritea_enum
! {
!     _ep_spritea_centerx,
!     _ep_spritea_centery,
!     _ep_spritea_file,
!     _ep_spritea_offsetx,
!     _ep_spritea_offsety,
!     _ep_spritea_sprite,
!     _ep_spritea_the_end,
! };
! 
! enum gep_staydown_enum
! {
!     _ep_staydown_rise,
!     _ep_staydown_riseattack,
!     _ep_staydown_riseattack_stall,
!     _ep_staydown_the_end,
! };
! 
! enum cep_hostile_candamage_enum
! {
!     _ep_hcd_ground,
!     _ep_hcd_type_enemy,
!     _ep_hcd_type_npc,
!     _ep_hcd_type_obstacle,
!     _ep_hcd_type_player,
!     _ep_hcd_type_shot,
!     _ep_hcd_the_end,
! };
! 
! enum cep_takeaction_enum
! {
!     _ep_ta_bomb_explode,
!     _ep_ta_common_animation_normal,
!     _ep_ta_common_attack_proc,
!     _ep_ta_common_block,
!     _ep_ta_common_drop,
!     _ep_ta_common_fall,
!     _ep_ta_common_get,
!     _ep_ta_common_grab,
!     _ep_ta_common_grabattack,
!     _ep_ta_common_grabbed,
!     _ep_ta_common_jump,
!     _ep_ta_common_land,
!     _ep_ta_common_lie,
!     _ep_ta_common_pain,
!     _ep_ta_common_prejump,
!     _ep_ta_common_rise,
!     _ep_ta_common_spawn,
!     _ep_ta_common_turn,
!     _ep_ta_normal_prepare,
!     _ep_ta_npc_warp,
!     _ep_ta_player_blink,
!     _ep_ta_suicide,
!     _ep_ta_the_end,
! };
! 
! enum cep_think_enum   // 2011_03_03, DC: Think types.
! {
!     _ep_th_common_think,
!     _ep_th_player_think,
!     _ep_th_steam_think,
!     _ep_th_steamer_think,
!     _ep_th_text_think,
!     _ep_th_trap_think,
!     _ep_th_the_end,
! };
! 
! int mapstrings_animationproperty(ScriptVariant **varlist, int paramCount)
! {
!     return 0;
! //    char *propname;
! //    const char *aps;
! //    int prop, ap; //int prop, i, ep, t;
! //    int result = 1;
! //
! //    MAPSTRINGS(varlist[1], list_animation_prop, ANI_PROP_THE_END,
! //               "Property name '%s' is not a supported animation property.\n");
! //
! //    if(paramCount < 3 || varlist[1]->vt != VT_INTEGER)
! //    {
! //        return result;
! //    }
! //    else
! //    {
! //        ap = varlist[1]->lVal;
! //        aps = (ap < ANI_PROP_THE_END && ap >= 0) ? list_animation_prop[ap] : "";
! //    }
! //
! //    return result;
! }
! 
! int mapstrings_entityproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname;
!     const char *eps;
!     int prop, i, ep, t;
! 
!     static const char *proplist_defense[] =
!     {
!         "blockpower",
!         "blockratio",
!         "blockthreshold",
!         "blocktype",
!         "factor",
!         "knockdown",
!         "pain",
!     };
! 
!     static const char *proplist_dot[] =
!     {
!         "force",
!         "mode",
!         "owner",
!         "rate",
!         "time",
!         "type",
!     };
! 
!     static const char *proplist_edelay[] =
!     {
!         "cap_max",
!         "cap_min",
!         "factor",
!         "mode",
!         "range_max",
!         "range_min",
!     };
! 
!     static const char *proplist_energycost[] =
!     {
!         "cost",
!         "disable",
!         "mponly",
!     };
! 
!     static const char *proplist_flash[] =
!     {
!         "block",
!         "default",
!         "noattack",
!     };
! 
!     static const char *proplist_icon[] =
!     {
!         "default",
!         "die",
!         "get",
!         "mphigh",
!         "mplow",
!         "mpmed",
!         "pain",
!         "weapon",
!         "x",
!         "y",
!     };
! 
!     static const char *proplist_knockdowncount[] =
!     {
!         "current",
!         "max",
!         "time",
!     };
! 
!     static const char *proplist_landframe[] =
!     {
!         "ent",
!         "frame",
!     };
! 
!     static const char *proplist_maps[] =
!     {
!         "count",
!         "current",
!         "default",
!         "dying",
!         "dying_critical",
!         "dying_low",
!         "frozen",
!         "hide_end",
!         "hide_start",
!         "ko",
!         "kotype",
!         "table",
!         "time",
!     };
! 
!     static const char *proplist_range[] =
!     {
!         "amax",
!         "amin",
!         "bmax",
!         "bmin",
!         "xmax",
!         "xmin",
!         "zmax",
!         "zmin",
!     };
! 
!     static const char *proplist_running[] =
!     {
!         "jumpx",
!         "jumpy",
!         "land",
!         "movez",
!         "speed",
!     };
! 
!     static const char *proplist_spritea[] =
!     {
!         "centerx",
!         "centery",
!         "file",
!         "offsetx",
!         "offsety",
!         "sprite",
!     };
! 
!     static const char *proplist_staydown[] =
!     {
!         "rise",
!         "riseattack",
!         "riseattack_stall",
!     };
! 
!     static const char *proplist_hostile_candamage[] =
!     {
!         "ground",
!         "type_enemy",
!         "type_npc",
!         "type_obstacle",
!         "type_player",
!         "type_shot",
!     };
! 
!     static const char *proplist_takeaction[] =
!     {
!         "bomb_explode",
!         "common_animation_normal",
!         "common_attack_proc",
!         "common_block",
!         "common_drop",
!         "common_fall",
!         "common_get",
!         "common_grab",
!         "common_grabattack",
!         "common_grabbed",
!         "common_jump",
!         "common_land",
!         "common_lie",
!         "common_pain",
!         "common_prejump",
!         "common_rise",
!         "common_spawn",
!         "common_turn",
!         "normal_prepare",
!         "npc_warp",
!         "player_blink",
!         "suicide",
!     };
! 
!     static const char *proplist_think[] =   // 2011_03_03, DC: Think types.
!     {
!         "common_think",
!         "player_think",
!         "steam_think",
!         "steamer_think",
!         "text_think",
!         "trap_think",
!     };
! 
!     if(paramCount < 2)
!     {
!         return 1;
!     }
! 
!     // map entity properties
!     MAPSTRINGS(varlist[1], eplist, _ep_the_end,
!                "Property name '%s' is not supported by function getentityproperty.\n");
! 
!     if(paramCount < 3 || varlist[1]->vt != VT_INTEGER)
!     {
!         return 1;
!     }
! 
!     ep = varlist[1]->lVal;
!     eps = (ep < _ep_the_end && ep >= 0) ? eplist[ep] : "";
! 
!     switch (ep)
!     {
!     // deprecation warning for "a" property
!     case _ep_a:
!     {
!         printf("\nNote: Property 'a' has been deprecated. Use 'y' to access the Y (vertical) axis property.\n");
!         break;
!     }
!     // map subproperties of aiflag property
!     case _ep_aiflag:
!     {
!         MAPSTRINGS(varlist[2], eplist_aiflag, _ep_aiflag_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of boomerang property
!     case _ep_boomerang:
!     {
!         MAPSTRINGS(varlist[2], eplist_boomerang, _ep_boomerang_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of edgerange property
!     case _ep_edgerange:
!     {
!         MAPSTRINGS(varlist[2], eplist_edgerange, _ep_edgerange_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of defense property
!     case _ep_defense:
!     {
!         if(paramCount >= 4)
!         {
!             MAPSTRINGS(varlist[3], proplist_defense, _ep_defense_the_end,
!                        _is_not_a_known_subproperty_of_, eps);
!         }
!         break;
!     }
!     // map subproperties of DOT
!     case _ep_dot:
!     {
!         MAPSTRINGS(varlist[2], proplist_dot, _ep_dot_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Edelay property
!     case _ep_edelay:
!     {
!         MAPSTRINGS(varlist[2], proplist_edelay, _ep_edelay_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Energycost
!     case _ep_energycost:
!     {
!         MAPSTRINGS(varlist[2], proplist_energycost, _ep_energycost_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Flash
!     case _ep_flash:
!     {
!         MAPSTRINGS(varlist[2], proplist_flash, _ep_flash_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Icon
!     case _ep_icon:
!     {
!         MAPSTRINGS(varlist[2], proplist_icon, _ep_icon_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
! 
!     // map subproperties of Knockdowncount
!     case _ep_knockdowncount:
!     {
!         MAPSTRINGS(varlist[2], proplist_knockdowncount, _ep_knockdowncount_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Landframe
!     case _ep_landframe:
!     {
!         MAPSTRINGS(varlist[2], proplist_landframe, _ep_landframe_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Maps
!     case  _ep_maps:
!     {
!         MAPSTRINGS(varlist[2], proplist_maps, _ep_maps_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Range
!     case _ep_range:
!     {
!         MAPSTRINGS(varlist[2], proplist_range, _ep_range_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Running
!     case _ep_running:
!     {
!         MAPSTRINGS(varlist[2], proplist_running, _ep_running_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
! 
!     // map subproperties of Spritea
!     case _ep_spritea:
!     {
!         MAPSTRINGS(varlist[2], proplist_spritea, _ep_spritea_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     // map subproperties of Staydown
!     case _ep_staydown:
!     {
!         MAPSTRINGS(varlist[2], proplist_staydown, _ep_running_the_end,
!                    _is_not_a_known_subproperty_of_, eps);
!         break;
!     }
!     //hostile, candamage, projectilehit
!     case _ep_hostile:
!     case _ep_candamage:
!     case _ep_projectilehit:
!     {
!         for(i = 2; i < paramCount; i++)
!         {
!             t = varlist[i]->vt;
!             MAPSTRINGS(varlist[i], proplist_hostile_candamage, _ep_hcd_the_end,
!                        _is_not_supported_by_, eps);
! 
!             if(varlist[i]->vt == VT_INTEGER && t == VT_STR)
!             {
!                 varlist[i]->lVal |= 0x80000000;    //flag it
!             }
!         }
!         break;
!     }
!     // action for takeaction
!     case _ep_takeaction:
!     {
!         MAPSTRINGS(varlist[2], proplist_takeaction, _ep_ta_the_end,
!                    _is_not_supported_by_, eps);
!         break;
!     }
!     // 2011_03_13, DC: Think sets for think.
!     case _ep_think:
!     {
!         MAPSTRINGS(varlist[2], proplist_think, _ep_th_the_end,
!                    _is_not_supported_by_, eps);
!         break;
!     }
!     }
! 
!     return 1;
! }
! 
! //getentityproperty(pentity, propname);
! HRESULT openbor_getentityproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent			= NULL;
!     ScriptVariant *arg	= NULL;
!     ScriptVariant *arg1	= NULL;
!     s_sprite *spr;
!     LONG ltemp, ltemp2;
!     int i				= 0;
!     int propind ;
!     int tempint			= 0;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_Clear(*pretvar);
!     mapstrings_entityproperty(varlist, paramCount);
! 
!     arg = varlist[0];
!     if(arg->vt != VT_PTR && arg->vt != VT_EMPTY)
!     {
!         printf("Function getentityproperty must have a valid entity handle.\n");
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     ent = (entity *)arg->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(arg->vt != VT_INTEGER)
!     {
!         printf("Function getentityproperty must have a string property name.\n");
!     }
! 
!     propind = arg->lVal;
! 
!     switch(propind)
!     {
!     case _ep_a:
!     case _ep_y:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->position.y;
!         break;
!     }
!     case _ep_aggression:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.aggression;
!         break;
!     }
!     case _ep_aiattack:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.aiattack;
!         break;
!     }
!     case _ep_aiflag:
!     {
!         if(paramCount < 3)
!         {
!             break;
!         }
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must give a string name for aiflag.\n");
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         switch(ltemp)
!         {
!         case _ep_aiflag_dead:
!             (*pretvar)->lVal = (LONG)ent->dead;
!             break;
!         case _ep_aiflag_jumpid:
!             (*pretvar)->lVal = (LONG)ent->jump.animation_id;
!             break;
!         case _ep_aiflag_jumping:
!             (*pretvar)->lVal = (LONG)ent->jumping;
!             break;
!         case _ep_aiflag_idling:
!             (*pretvar)->lVal = (LONG)ent->idling;
!             break;
!         case _ep_aiflag_drop:
!             (*pretvar)->lVal = (LONG)ent->drop;
!             break;
!         case _ep_aiflag_attacking:
!             (*pretvar)->lVal = (LONG)ent->attacking;
!             break;
!         case _ep_aiflag_getting:
!             (*pretvar)->lVal = (LONG)ent->getting;
!             break;
!         case _ep_aiflag_turning:
!             (*pretvar)->lVal = (LONG)ent->turning;
!             break;
!         case _ep_aiflag_charging:
!             (*pretvar)->lVal = (LONG)ent->charging;
!             break;
!         case _ep_aiflag_blocking:
!             (*pretvar)->lVal = (LONG)ent->blocking;
!             break;
!         case _ep_aiflag_ducking:
!             (*pretvar)->lVal = (LONG)ent->ducking;
!             break;
!         case _ep_aiflag_falling:
!             (*pretvar)->lVal = (LONG)ent->falling;
!             break;
!         case _ep_aiflag_running:
!             (*pretvar)->lVal = (LONG)ent->running;
!             break;
!         case _ep_aiflag_inpain:
!             (*pretvar)->lVal = (LONG)ent->inpain;
!             break;
!         case _ep_aiflag_rising:
!             (*pretvar)->lVal = (LONG)ent->rising;
!             break;
!         case _ep_aiflag_riseattacking:
!             (*pretvar)->lVal = (LONG)ent->riseattacking;
!             break;
!         case _ep_aiflag_inbackpain:
!             (*pretvar)->lVal = (LONG)ent->inbackpain;
!             break;
!         case _ep_aiflag_projectile:
!             (*pretvar)->lVal = (LONG)ent->projectile;
!             break;
!         case _ep_aiflag_frozen:
!             (*pretvar)->lVal = (LONG)ent->frozen;
!             break;
!         case _ep_aiflag_toexplode:
!             (*pretvar)->lVal = (LONG)ent->toexplode;
!             break;
!         case _ep_aiflag_animating:
!             (*pretvar)->lVal = (LONG)ent->animating;
!             break;
!         case _ep_aiflag_blink:
!             (*pretvar)->lVal = (LONG)ent->blink;
!             break;
!         case _ep_aiflag_invincible:
!             (*pretvar)->lVal = (LONG)ent->invincible;
!             break;
!         case _ep_aiflag_autokill:
!             (*pretvar)->lVal = (LONG)ent->autokill;
!             break;
!         case _ep_aiflag_idlemode:
!             (*pretvar)->lVal = (LONG)ent->idlemode;
!             break;
!         case _ep_aiflag_walkmode:
!             (*pretvar)->lVal = (LONG)ent->walkmode;
!             break;
!         case _ep_aiflag_walking:
!             (*pretvar)->lVal = (LONG)ent->walking;
!             break;
!         default:
!             ScriptVariant_Clear(*pretvar);
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_aimove:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.aimove;
!         break;
!     }
!     case _ep_alpha:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.alpha;
!         break;
!     }
!     case _ep_animal:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.animal;
!         break;
!     }
!     case _ep_animating:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->animating;
!         break;
!     }
!     case _ep_animation_handle:
!     {
!         #define ARG_ANIMATION_ID 2
! 
!         // Did the user provide an animation id?
!         if(paramCount > 2)
!         {
!             arg = varlist[ARG_ANIMATION_ID];
! 
!             // If the argument is invalid, use current animation ID instead.
!             if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!             {
!                 ltemp = (LONG)ent->animnum;
!             }
!         }
!         else
!         {
!             ltemp = (LONG)ent->animnum;
!         }
! 
!         // If the animation exists, get the handle.
!         if(validanim(ent, ltemp))
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->modeldata.animation[ltemp];
!         }
! 
!         break;
! 
!         #undef ARG_ANIMATION_ID
!     }
!     /*
!     case _ep_animationid: See animnum.
!     */
!     case _ep_animheight:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->animation->size.x;
!         break;
!     }
!     case _ep_animhits:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->animation->animhits;
!         break;
!     }
!     case _ep_animnum:
!     case _ep_animationid:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->animnum;
!         break;
!     }
!     case _ep_prevanimationid:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->prevanimnum;
!         break;
!     }
!     case _ep_animpos:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->animpos;
!         break;
!     }
!     case _ep_animvalid:
!     {
!         ltemp = 0;
!         if(paramCount == 3)
!         {
!             arg = varlist[2];
!             if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!             {
!                 ltemp = (LONG)0;
!             }
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)validanim(ent, ltemp);
!         break;
!     }
!     case _ep_antigrab:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.antigrab;
!         break;
!     }
!     case _ep_antigravity:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.antigravity;
!         break;
!     }
!     case _ep_attacking:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->attacking;
!         break;
!     }
!     case _ep_attackid:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->attack_id_outgoing;
!         break;
!     }
!     case _ep_autokill:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->autokill;
!         break;
!     }
!     case _ep_base:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->base;
!         break;
!     }
!     case _ep_vulnerable:
!     {
!         if(paramCount == 2)
!         {
!             i		= ent->animnum;
!             tempint	= ent->animpos;
!         }
!         else if(paramCount < 4
!                 || varlist[2]->vt != VT_INTEGER
!                 || varlist[3]->vt != VT_INTEGER)
!         {
!             printf("\n Error, getentityproperty({ent}, \"vulnerable\", {animation}, {frame}): parameters missing or invalid. \n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         else
!         {
!             i		= varlist[2]->lVal;												//Animation parameter.
!             tempint	= varlist[3]->lVal;												//Frame parameter.
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->vulnerable[tempint];
!         break;
!     }
!     case _ep_blink:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->blink;
!         break;
!     }
!     case _ep_blockback:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.blockback;
!         break;
!     }
!     case _ep_blockodds:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.blockodds;
!         break;
!     }
!     case _ep_blockpain:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.blockpain;
!         break;
!     }
!     case _ep_boomerang:
      {
          if(paramCount < 3)
          {
***************
*** 3659,4019 ****
              return E_FAIL;
          }
          break;
!     }
!     case _ep_boss:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->boss;
!         break;
!     }
!     case _ep_bounce:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.bounce;
!         break;
!     }
!     case _ep_bound:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)ent->binding.ent;
!         break;
!     }
!     case _ep_binding:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)&ent->binding;
!         break;
!     }
!     case _ep_candamage:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.candamage;
!         break;
!     }
!     case _ep_combostep:
!     {
!         if(paramCount >= 3)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!             {
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!         }
!         else
!         {
!             ltemp2 = 0;
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->combostep[(LONG)ltemp2];
!         break;
!     }
!     case _ep_combotime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->combotime;
!         break;
!     }
!     case _ep_hostile:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.hostile;
!         break;
!     }
!     case _ep_projectilehit:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.projectilehit;
!         break;
!     }
!     case _ep_chargerate:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.chargerate;
!         break;
!     }
!     case _ep_colourmap:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)(ent->colourmap);
!         break;
!     }
!     case _ep_colourtable:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)model_get_colourmap(&(ent->modeldata), varlist[2]->lVal + 1);
!         break;
!     }
!     case _ep_damage_on_landing:
!     {
          ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
          (*pretvar)->lVal = (LONG)ent->damage_on_landing.attack_force;
  
! 
!         break;
!     }
!     case _ep_dead:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->dead;
!         break;
!     }
!     case _ep_defaultmodel:
!     case _ep_defaultname:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(ent->defaultmodel->name);
!         break;
!     }
!     case _ep_defense:
!     {
!         ltemp = 0;
!         if(paramCount >= 3)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!             {
!                 printf("You must specify an attack type for your defense property.\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!             ltemp2 = _ep_defense_factor;
!         }
! 
!         if(paramCount >= 4)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!             {
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
! 
!         switch(ltemp2)
!         {
!         case _ep_defense_factor:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].factor;
!             break;
!         }
!         case _ep_defense_blockpower:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].blockpower;
!             break;
!         }
!         case _ep_defense_blockratio:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].blockratio;
!             break;
!         }
!         case _ep_defense_blockthreshold:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].blockthreshold;
!             break;
!         }
!         case _ep_defense_blocktype:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].blocktype;
!             break;
!         }
!         case _ep_defense_knockdown:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].knockdown;
!             break;
!         }
!         case _ep_defense_pain:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].pain;
!             break;
!         }
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_destx:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->destx;
!         break;
!     }
!     case _ep_destz:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->destz;
!         break;
!     }
!     case _ep_detect:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.stealth.detect;
!         break;
!     }
!     case _ep_die_on_landing:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->die_on_landing;
!         break;
!     }
!     case _ep_direction:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->direction;
!         break;
!     }
!     case _ep_dot:
!     {
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             i = (LONG)ltemp;
!         }
! 
!         arg = varlist[3];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must provide a string name for dot subproperty.\n\
! 	~'time'\n\
! 	~'mode'\n\
! 	~'force'\n\
! 	~'rate'\n\
! 	~'type'\n\
! 	~'owner'\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         switch(arg->lVal)
!         {
!         case _ep_dot_time:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->dot_time[i];
!             break;
!         }
!         case _ep_dot_mode:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->dot[i];
!             break;
!         }
!         case _ep_dot_force:
! 
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->dot_force[i];
!             break;
!         }
!         case _ep_dot_rate:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->dot_rate[i];
!             break;
!         }
!         case _ep_dot_type:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->dot_atk[i];
!             break;
!         }
!         case _ep_dot_owner:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->dot_owner[i];
!             break;
!         }
!         break;
!         }
!     }
!     case _ep_dropframe:
!     {
!         ltemp = 0;
!         if(paramCount == 3)
!         {
!             arg = varlist[2];
!             if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!             {
!                 ltemp = 0;
!             }
!         }
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         if(ent->modeldata.animation[ltemp]->dropframe)
!         {
!             (*pretvar)->lVal = ent->modeldata.animation[ltemp]->dropframe->frame;
!         }
! 
!         break;
!     }
!     case _ep_edelay:
!     {
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must provide a string name for edelay subproperty.\n\
! 	~'cap_max'\n\
! 	~'cap_min'\n\
! 	~'factor'\n\
! 	~'mode'\n\
! 	~'range_max'\n\
! 	~'range_min'\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         switch(ltemp)
!         {
!         case _ep_edelay_mode:
!         {
!             (*pretvar)->lVal = (LONG)ent->modeldata.edelay.mode;
!             break;
!         }
!         case _ep_edelay_factor:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->modeldata.edelay.factor;
!             break;
!         }
!         case _ep_edelay_cap_min:
!         {
!             (*pretvar)->lVal = (LONG)ent->modeldata.edelay.cap.min;
!             break;
!         }
!         case _ep_edelay_cap_max:
!         {
!             (*pretvar)->lVal = (LONG)ent->modeldata.edelay.cap.max;
!             break;
!         }
!         case _ep_edelay_range_min:
!         {
!             (*pretvar)->lVal = (LONG)ent->modeldata.edelay.range.min;
!             break;
!         }
!         case _ep_edelay_range_max:
!         {
!             (*pretvar)->lVal = (LONG)ent->modeldata.edelay.range.max;
!             break;
!         }
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_edge:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->edge;
!         break;
      }
!     case _ep_edgerange:
      {
          if(paramCount < 3)
          {
--- 3661,4021 ----
              return E_FAIL;
          }
          break;
!     }
!     case _ep_boss:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->boss;
!         break;
!     }
!     case _ep_bounce:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.bounce;
!         break;
!     }
!     case _ep_bound:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)ent->binding.ent;
!         break;
!     }
!     case _ep_binding:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)&ent->binding;
!         break;
!     }
!     case _ep_candamage:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.candamage;
!         break;
!     }
!     case _ep_combostep:
!     {
!         if(paramCount >= 3)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!             {
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!         }
!         else
!         {
!             ltemp2 = 0;
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->combostep[(LONG)ltemp2];
!         break;
!     }
!     case _ep_combotime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->combotime;
!         break;
!     }
!     case _ep_hostile:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.hostile;
!         break;
!     }
!     case _ep_projectilehit:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.projectilehit;
!         break;
!     }
!     case _ep_chargerate:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.chargerate;
!         break;
!     }
!     case _ep_colourmap:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)(ent->colourmap);
!         break;
!     }
!     case _ep_colourtable:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)model_get_colourmap(&(ent->modeldata), varlist[2]->lVal + 1);
!         break;
!     }
!     case _ep_damage_on_landing:
!     {
          ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
          (*pretvar)->lVal = (LONG)ent->damage_on_landing.attack_force;
  
! 
!         break;
!     }
!     case _ep_dead:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->dead;
!         break;
!     }
!     case _ep_defaultmodel:
!     case _ep_defaultname:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(ent->defaultmodel->name);
!         break;
!     }
!     case _ep_defense:
!     {
!         ltemp = 0;
!         if(paramCount >= 3)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!             {
!                 printf("You must specify an attack type for your defense property.\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!             ltemp2 = _ep_defense_factor;
!         }
! 
!         if(paramCount >= 4)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!             {
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
! 
!         switch(ltemp2)
!         {
!         case _ep_defense_factor:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].factor;
!             break;
!         }
!         case _ep_defense_blockpower:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].blockpower;
!             break;
!         }
!         case _ep_defense_blockratio:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].blockratio;
!             break;
!         }
!         case _ep_defense_blockthreshold:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].blockthreshold;
!             break;
!         }
!         case _ep_defense_blocktype:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].blocktype;
!             break;
!         }
!         case _ep_defense_knockdown:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].knockdown;
!             break;
!         }
!         case _ep_defense_pain:
!         {
!             (*pretvar)->dblVal = (DOUBLE)ent->defense[(LONG)ltemp].pain;
!             break;
!         }
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_destx:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->destx;
!         break;
!     }
!     case _ep_destz:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->destz;
!         break;
!     }
!     case _ep_detect:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.stealth.detect;
!         break;
!     }
!     case _ep_die_on_landing:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->die_on_landing;
!         break;
!     }
!     case _ep_direction:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->direction;
!         break;
!     }
!     case _ep_dot:
!     {
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             i = (LONG)ltemp;
!         }
! 
!         arg = varlist[3];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must provide a string name for dot subproperty.\n\
! 	~'time'\n\
! 	~'mode'\n\
! 	~'force'\n\
! 	~'rate'\n\
! 	~'type'\n\
! 	~'owner'\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         switch(arg->lVal)
!         {
!         case _ep_dot_time:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->dot_time[i];
!             break;
!         }
!         case _ep_dot_mode:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->dot[i];
!             break;
!         }
!         case _ep_dot_force:
! 
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->dot_force[i];
!             break;
!         }
!         case _ep_dot_rate:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->dot_rate[i];
!             break;
!         }
!         case _ep_dot_type:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->dot_atk[i];
!             break;
!         }
!         case _ep_dot_owner:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->dot_owner[i];
!             break;
!         }
!         break;
!         }
      }
!     case _ep_dropframe:
!     {
!         ltemp = 0;
!         if(paramCount == 3)
!         {
!             arg = varlist[2];
!             if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!             {
!                 ltemp = 0;
!             }
!         }
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         if(ent->modeldata.animation[ltemp]->dropframe)
!         {
!             (*pretvar)->lVal = ent->modeldata.animation[ltemp]->dropframe->frame;
!         }
! 
!         break;
!     }
!     case _ep_edelay:
!     {
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must provide a string name for edelay subproperty.\n\
! 	~'cap_max'\n\
! 	~'cap_min'\n\
! 	~'factor'\n\
! 	~'mode'\n\
! 	~'range_max'\n\
! 	~'range_min'\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         switch(ltemp)
!         {
!         case _ep_edelay_mode:
!         {
!             (*pretvar)->lVal = (LONG)ent->modeldata.edelay.mode;
!             break;
!         }
!         case _ep_edelay_factor:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->modeldata.edelay.factor;
!             break;
!         }
!         case _ep_edelay_cap_min:
!         {
!             (*pretvar)->lVal = (LONG)ent->modeldata.edelay.cap.min;
!             break;
!         }
!         case _ep_edelay_cap_max:
!         {
!             (*pretvar)->lVal = (LONG)ent->modeldata.edelay.cap.max;
!             break;
!         }
!         case _ep_edelay_range_min:
!         {
!             (*pretvar)->lVal = (LONG)ent->modeldata.edelay.range.min;
!             break;
!         }
!         case _ep_edelay_range_max:
!         {
!             (*pretvar)->lVal = (LONG)ent->modeldata.edelay.range.max;
!             break;
!         }
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_edge:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->edge;
!         break;
!     }
!     case _ep_edgerange:
      {
          if(paramCount < 3)
          {
***************
*** 4041,5775 ****
              return E_FAIL;
          }
          break;
!     }
!     case _ep_energycost:
!     {
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             printf("You must provide a string name for energycost.\n\
! 	~'cost'\n\
! 	~'disable'\n\
! 	~'mponly'\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp	= varlist[2]->lVal;												//Subproperty.
!         i		= varlist[3]->lVal;												//Animation.
! 
!         if(!validanim(ent, i))													//Verify animation.
!         {
!             break;
!         }
! 
!         switch(ltemp)
!         {
!         case _ep_energycost_cost:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             if(ent->modeldata.animation[i]->energycost)
!             {
!                 (*pretvar)->lVal = ent->modeldata.animation[i]->energycost->cost;
!             }
! 
!             break;
!         case _ep_energycost_disable:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             if(ent->modeldata.animation[i]->energycost)
!             {
!                 (*pretvar)->lVal = ent->modeldata.animation[i]->energycost->disable;
!             }
!             break;
!         case _ep_energycost_mponly:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             if(ent->modeldata.animation[i]->energycost)
!             {
!                 (*pretvar)->lVal = ent->modeldata.animation[i]->energycost->mponly;
!             }
!             break;
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_escapecount:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->escapecount;
!         break;
!     }
!     case _ep_escapehits:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.escapehits;
!         break;
!     }
!     case _ep_exists:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->exists;
!         break;
!     }
!     case _ep_facing:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.facing;
!         break;
!     }
!     case _ep_falldie:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.falldie;
!         break;
!     }
!     case _ep_flash:
!     {
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must give a string name for flash property.\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         switch(ltemp)
!         {
!         case _ep_flash_block:
!         {
!             i = ent->modeldata.bflash;
!             break;
!         }
!         case _ep_flash_def:
!         {
!             i = ent->modeldata.flash;
!             break;
!         }
!         case _ep_flash_noattack:
!         {
!             i = ent->modeldata.noatflash;
!             break;
!         }
!         default:
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)i;
!         break;
!     }
!     case _ep_pain_time:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->pain_time;
!         break;
!     }
!     case _ep_freezetime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->freezetime;
!         break;
!     }
!     case _ep_frozen:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->frozen;
!         break;
!     }
!     case _ep_gfxshadow:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.gfxshadow;
!         break;
!     }
!     case _ep_shadowbase:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.shadowbase;
!         break;
!     }
!     case _ep_grabbing:
!     {
!         if(ent->grabbing) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->grabbing;
!         }
!         break;
!     }
!     case _ep_grabforce:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.grabforce;
!         break;
!     }
!     case _ep_guardpoints:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.guardpoints.current;
!         break;
!     }
!     case _ep_hasplatforms:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.hasPlatforms;
!         break;
!     }
!     case _ep_health:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->energy_status.health_current;
!         break;
!     }
!     case _ep_height:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.size.y;
!         break;
!     }
!     case _ep_hitbyid:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->attack_id_incoming;
!         break;
!     }
!     case _ep_hitheadplatform:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)ent->hithead;
!         break;
!     }
!     case _ep_landedplatform:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)ent->landed_on_platform;
!         break;
!     }
!     case _ep_hitwall:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->hitwall;
!         break;
!     }
!     case _ep_hmapl:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.maps.hide_start;
!         break;
!     }
!     case _ep_hmapu:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.maps.hide_end;
!         break;
!     }
!     case _ep_icon:
!     {
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must provide a string name for icon subproperty:\n\
! 	getentityproperty({ent}, 'icon', {subproperty});\n\
! 	~'default'\n\
! 	~'die'\n\
! 	~'get'\n\
! 	~'mphigh'\n\
! 	~'mplow'\n\
! 	~'mpmed'\n\
! 	~'pain'\n\
! 	~'weapon'\n\
! 	~'x'\n\
! 	~'y'\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         switch(ltemp)
!         {
!         case _ep_icon_def:
!         {
!             i = ent->modeldata.icon.def;
!             break;
!         }
!         case _ep_icon_die:
!         {
!             i = ent->modeldata.icon.die;
!             break;
!         }
!         case _ep_icon_get:
!         {
!             i = ent->modeldata.icon.get;
!             break;
!         }
!         case _ep_icon_mphigh:
!         {
!             i = ent->modeldata.icon.mphigh;
!             break;
!         }
!         case _ep_icon_mplow:
!         {
!             i = ent->modeldata.icon.mplow;
!             break;
!         }
!         case _ep_icon_mpmed:
!         {
!             i = ent->modeldata.icon.mpmed;
!             break;
!         }
!         case _ep_icon_pain:
!         {
!             i = ent->modeldata.icon.pain;
!             break;
!         }
!         case _ep_icon_weapon:
!         {
!             i = ent->modeldata.icon.weapon;
!             break;
!         }
!         case _ep_icon_x:
!         {
!             i = ent->modeldata.icon.position.x;
!             break;
!         }
!         case _ep_icon_y:
!         {
!             i = ent->modeldata.icon.position.y;
!             break;
!         }
!         default:
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         }
! 
!         if (i >= 0)
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             spr = sprite_map[i].node->sprite;
!             spr->centerx = sprite_map[i].centerx;
!             spr->centery = sprite_map[i].centery;
!             (*pretvar)->ptrVal = (VOID *)(spr);
!         }
!         else
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = -1;
!         }
!         break;
!     }
!     case _ep_invincible:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->invincible;
!         break;
!     }
!     case _ep_invinctime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->invinctime;
!         break;
!     }
!     case _ep_jugglepoints:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.jugglepoints.current;
!         break;
!     }
!     case _ep_jumpheight:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.jumpheight;
!         break;
!     }
!     case _ep_jumpmovex:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.jumpmovex;
!         break;
!     }
!     case _ep_jumpmovez:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.jumpmovez;
!         break;
!     }
!     case _ep_jumpspeed:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.jumpspeed;
!         break;
!     }
!     case _ep_knockdowncount:
!     {
!         /*
!         2011_04_14, DC: Backward compatability; default to current if subproperty not provided.
!         */
!         if(paramCount < 3)
!         {
!             ltemp = _ep_knockdowncount_current;
!         }
!         else
!         {
!             arg = varlist[2];
! 
!             if(arg->vt != VT_INTEGER)
!             {
!                 printf("You must provide a string name for knockdowncount subproperty:\n\
! 		getentityproperty({ent}, 'knockdowncount', {subproperty})\n\
! 		~'current'\n\
! 		~'max'\n\
! 		~'time'\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
! 
!             ltemp = arg->lVal;
!         }
! 
!         switch(ltemp)
!         {
!         case _ep_knockdowncount_current:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->knockdowncount;
!             break;
!         case _ep_knockdowncount_max:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->modeldata.knockdowncount;
!             break;
!         case _ep_knockdowncount_time:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->knockdowncount;
!             break;
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_komap:
!     {
!         if(paramCount < 2)
!         {
!             break;
!         }
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.maps.ko;
!         break;
!     }
!     case _ep_landframe:
!     {
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         if(varlist[2]->vt != VT_INTEGER
!                 || varlist[3]->vt != VT_INTEGER)
!         {
!             printf("\n Error, getentityproperty({ent}, 'landframe', {sub property}, {animation}): {Sub property} or {Animation} parameter is missing or invalid. \n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp	= varlist[2]->lVal;												//Subproperty.
!         i		= varlist[3]->lVal;												//Animation.
! 
!         if(!validanim(ent, i))													//Verify animation.
!         {
!             break;
!         }
  
          // entity must have a land frame set.
          if(!ent->modeldata.animation[i]->landframe)
          {
              break;
          }
! 
!         switch(ltemp)
!         {
!         case _ep_landframe_ent:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->landframe->ent;
!             break;
!         case _ep_landframe_frame:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->landframe->frame;
!             break;
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_lifespancountdown:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->lifespancountdown;
!         break;
!     }
!     case _ep_attackthrottle:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.attackthrottle;
!         break;
!     }
!     case _ep_attackthrottletime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.attackthrottletime;
!         break;
!     }
!     case _ep_link:
!     {
!         if(ent->link) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->link;
!         }
!         break;
!     }
!     case _ep_map:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)0;
!         for(i = 0; i < ent->modeldata.maps_loaded; i++)
!         {
!             if(ent->colourmap == ent->modeldata.colourmap[i])
!             {
!                 (*pretvar)->lVal = (LONG)(i + 1);
!                 break;
!             }
!         }
!         break;
!     }
!     case _ep_mapcount:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)(ent->modeldata.maps_loaded + 1);
!         break;
!     }
!     case _ep_mapdefault:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)(ent->map);
!         break;
!     }
!     case _ep_maps:
!     {
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must give a string name for maps property.\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         switch(ltemp)
!         {
!         case _ep_maps_count:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps_loaded + 1);
!             break;
!         }
! 
!         case _ep_maps_current:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)0;
!             for(i = 0; i < ent->modeldata.maps_loaded; i++)
!             {
!                 if(ent->colourmap == ent->modeldata.colourmap[i])
!                 {
!                     (*pretvar)->lVal = (LONG)(i + 1);
!                     break;
!                 }
!             }
!             break;
!         }
!         case _ep_maps_dying:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             if(paramCount >= 3)
!             {
!                 if(FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!                 {
!                     printf("You must specify the integer value for remap.\n");
!                     *pretvar = NULL;
!                     return E_FAIL;
!                 }
!                 else
!                 {
!                     if (ltemp == 0) (*pretvar)->lVal = (LONG)(ent->dying);
!                     else (*pretvar)->lVal = (LONG)(ent->dying2);
!                 }
!             }
!             else
!             {
!                 (*pretvar)->lVal = (LONG)(ent->dying);
!             }
!             break;
!         }
!         case _ep_maps_dying_critical:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->per2);
!             break;
!         }
!         case _ep_maps_dying_low:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->per1);
!             break;
!         }
!         case _ep_maps_frozen:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps.frozen);
!             break;
!         }
!         case _ep_maps_hide_end:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps.hide_end);
!             break;
!         }
!         case _ep_maps_hide_start:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps.hide_start);
!             break;
!         }
!         case _ep_maps_ko:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps.ko);
!             break;
!         }
!         case _ep_maps_kotype:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps.kotype);
!             break;
!         }
!         case _ep_maps_table:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)(ent->colourmap);
!             break;
!         }
!         case _ep_maps_time:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->maptime);
!             break;
!         }
!         default:
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         }
!         break;
!     }
!     case _ep_maxguardpoints:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.guardpoints.max;
!         break;
!     }
!     case _ep_maxhealth:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.health;
!         break;
!     }
!     case _ep_maxjugglepoints:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.jugglepoints.max;
!         break;
!     }
!     case _ep_maxmp:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.mp;
!         break;
!     }
!     case _ep_model:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(ent->model->name);
!         break;
!     }
!     case _ep_mp:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->energy_status.mp_current;
!         break;
!     }
!     case _ep_mpdroprate:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.mpdroprate;
!         break;
!     }
!     case _ep_mprate:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.mprate;
!         break;
!     }
!     case _ep_mpstable:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.mpstable;
!         break;
!     }
!     case _ep_mpstableval:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.mpstableval;
!         break;
!     }
!     case _ep_name:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(ent->name);
!         break;
!     }
!     case _ep_nextanim:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->nextanim;
!         break;
!     }
!     case _ep_nextmove:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->nextmove;
!         break;
!     }
!     case _ep_nextthink:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->nextthink;
!         break;
!     }
!     case _ep_no_adjust_base:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.no_adjust_base;
!         break;
!     }
!     case _ep_noaicontrol:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->noaicontrol;
!         break;
!     }
!     case _ep_nodieblink:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.nodieblink;
!         break;
!     }
!     case _ep_nodrop:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.nodrop;
!         break;
!     }
!     case _ep_nograb:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->nograb;
!         break;
!     }
!     case _ep_nohithead:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.nohithead;
!         break;
!     }
!     case _ep_nolife:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.nolife;
!         break;
!     }
!     case _ep_nopain:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.nopain;
!         break;
!     }
!     case _ep_offense:
!     {
!         ltemp = 0;
!         if(paramCount >= 3)
!         {
!             arg = varlist[2];
!             if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!             {
!                 ltemp = (LONG)0;
!             }
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->offense_factors[(LONG)ltemp];
!         break;
!     }
!     case _ep_offscreen_noatk_factor:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.offscreen_noatk_factor;
!         break;
!     }
!     case _ep_offscreenkill:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.offscreenkill;
!         break;
!     }
!     case _ep_opponent:
!     {
!         if(ent->opponent) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->opponent;
!         }
!         break;
!     }
!     case _ep_custom_target:
!     {
!         if(ent->custom_target) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->custom_target;
!         }
!         break;
!     }
!     case _ep_owner:
!     {
!         if(ent->owner) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->owner;
!         }
!         break;
!     }
!     case _ep_parent:
!     {
!         if(ent->parent) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->parent;
!         }
!         break;
!     }
!     case _ep_path:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(ent->modeldata.path);
!         break;
!     }
!     case _ep_pathfindstep:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.pathfindstep;
!         //printf("%d %s %d\n", ent->sortid, ent->name, ent->playerindex);
!         break;
!     }
!     case _ep_playerindex:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->playerindex;
!         //printf("%d %s %d\n", ent->sortid, ent->name, ent->playerindex);
!         break;
!     }
!     case _ep_projectile:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->projectile;
!         break;
!     }
!     case _ep_range:
!     {
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         if(varlist[2]->vt != VT_INTEGER
!                 || varlist[3]->vt != VT_INTEGER)
!         {
!             printf("\n Error, getentityproperty({ent}, 'range', {sub property}, {animation}): {Sub property} or {Animation} parameter is missing or invalid. \n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp	= varlist[2]->lVal;												//Subproperty.
!         i		= varlist[3]->lVal;												//Animation.
! 
!         if(!validanim(ent, i))													//Verify animation.
!         {
!             break;
!         }
! 
!         switch(ltemp)
!         {
!         case _ep_range_amax:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.y.max;
!             break;
!         case _ep_range_amin:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.y.min;
!             break;
!         case _ep_range_bmax:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.base.max;
!             break;
!         case _ep_range_bmin:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.base.min;
!             break;
!         case _ep_range_xmax:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.x.max;
!             break;
!         case _ep_range_xmin:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.x.min;
!             break;
!         case _ep_range_zmax:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.z.max;
!             break;
!         case _ep_range_zmin:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.z.min;
!             break;
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_running:
!     {
!         if(paramCount < 3)
!         {
!             break;
!         }
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must give a string name for running property.\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         switch(ltemp)
!         {
!         case _ep_running_speed:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->modeldata.runspeed;
!             break;
!         }
!         case _ep_running_jumpy:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->modeldata.runjumpheight;
!             break;
!         }
!         case _ep_running_jumpx:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->modeldata.runjumpdist;
!             break;
!         }
!         case _ep_running_land:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.runhold;
!             break;
!         }
!         case _ep_running_movez:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.runupdown;
!             break;
!         }
!         }
!         break;
!     }
!     case _ep_rush_count:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->rush.count.current;
!         break;
!     }
!     case _ep_rush_tally:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->rush.count.max;
!         break;
!     }
!     case _ep_rush_time:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->rush.time;
!         break;
!     }
!     case _ep_score:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.score;
!         break;
!     }
!     case _ep_scroll:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.scroll;
!         break;
!     }
!     case _ep_seal:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->seal;
!         break;
!     }
!     case _ep_sealtime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->sealtime;
!         break;
!     }
!     case _ep_setlayer:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.setlayer;
!         break;
!     }
!     case _ep_sortid:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->sortid;
!         break;
!     }
!     case _ep_spawntype:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->spawntype;
!         break;
!     }
!     case _ep_speed:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.speed;
!         break;
!     }
!     case _ep_sprite:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         i = ent->animation->sprite[ent->animpos];
!         spr = sprite_map[i].node->sprite;
!         spr->centerx = sprite_map[i].centerx;
!         spr->centery = sprite_map[i].centery;
!         (*pretvar)->ptrVal = (VOID *)(spr);
!         break;
!     }
!     case _ep_spritea:
!     {
!         /*
!         2011_04_17, DC: Modder can now specify animation and frame to return sprite from.
!         To retain backward compatibility, sprite from current animation/frame is returned
!         when animation and/or frame parameters are not provided.
!         */
! 
!         ltemp   = varlist[2]->lVal;
!         arg     = varlist[3];
!         arg1    = varlist[4];
! 
!         /*
!         Request from animation or frame that doesn't exist = shutdown.
!         Let's be more user friendly then that; return empty so modder can evaluate
!         and take action accordingly.*/
!         if(!validanim(ent, arg->lVal) || !(ent->modeldata.animation[arg->lVal]->numframes >= arg1->lVal))
!         {
!             break;
!         }
! 
!         i = ent->modeldata.animation[arg->lVal]->sprite[arg1->lVal];
! 
!         switch(ltemp)
!         {
!         case _ep_spritea_centerx:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)sprite_map[i].centerx;
!             break;
!         }
!         case _ep_spritea_centery:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)sprite_map[i].centery;
!             break;
!         }
!         case _ep_spritea_file:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_STR);
!             (*pretvar)->strVal = StrCache_CreateNewFrom(sprite_map[i].node->filename);
!             break;
!         }
!         case _ep_spritea_offsetx:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)sprite_map[i].node->sprite->offsetx;
!             break;
!         }
!         case _ep_spritea_offsety:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)sprite_map[i].node->sprite->offsety;
!             break;
!         }
!         case _ep_spritea_sprite:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             spr = sprite_map[i].node->sprite;
!             spr->centerx = sprite_map[i].centery;
!             spr->centery = sprite_map[i].centery;
!             (*pretvar)->ptrVal = (VOID *)(spr);
!             break;
!         }
!         default:
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         }
! 
!         break;
! 
!     }
!     case _ep_stalltime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->stalltime;
!         break;
!     }
!     case _ep_releasetime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->releasetime;
!         break;
!     }
!     case _ep_staydown:
!     {
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
! 
!             printf("You must provide a string name for staydown property:\n\
! 	getentityproperty({ent}, 'staydown', {subproperty})\n\
! 	~'rise'\n\
! 	~'riseattack'\n\
! 	~'riseattack_stall' \n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         switch(ltemp)
!         {
!         case _ep_staydown_rise:
!         {
!             i = ent->staydown.rise;
!             break;
!         }
!         case _ep_staydown_riseattack:
!         {
!             i = ent->staydown.riseattack;
!             break;
!         }
!         case _ep_staydown_riseattack_stall:
!         {
!             i = ent->staydown.riseattack_stall;
!             break;
!         }
!         default:
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)i;
!         break;
!     }
!     case _ep_stealth:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.stealth.hide;
!         break;
!     }
!     case _ep_subentity:
!     {
!         if(ent->subentity) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->subentity;
!         }
!         break;
!     }
!     case _ep_subject_to_basemap:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_basemap;
!         break;
!     }
!     case _ep_subject_to_gravity:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_gravity;
!         break;
!     }
!     case _ep_subject_to_hole:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_hole;
!         break;
!     }
!     case _ep_subject_to_maxz:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_maxz;
!         break;
!     }
!     case _ep_subject_to_minz:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_minz;
!         break;
!     }
!     case _ep_subject_to_obstacle:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_obstacle;
!         break;
!     }
!     case _ep_subject_to_platform:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_platform;
!         break;
!     }
!     case _ep_subject_to_screen:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_screen;
!         break;
!     }
!     case _ep_subject_to_wall:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_wall;
!         break;
!     }
!     case _ep_subtype:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subtype;
!         break;
!     }
!     case _ep_thold:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.thold;
!         break;
!     }
!     case _ep_throwdamage:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.throwdamage;
!         break;
!     }
!     case _ep_throwdist:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.throwdist;
!         break;
!     }
!     case _ep_throwframewait:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.throwframewait;
!         break;
!     }
!     case _ep_throwheight:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.throwheight;
!         break;
!     }
!     case _ep_tosstime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->toss_time;
!         break;
!     }
!     case _ep_tossv:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->velocity.y;
!         break;
!     }
!     case _ep_type:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.type;
!         break;
!     }
!     case _ep_walkoffmovex:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.walkoffmovex;
!         break;
!     }
!     case _ep_walkoffmovez:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.walkoffmovez;
!         break;
!     }
!     case _ep_weapent:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)ent->weapent;
!         break;
!     }
!     case _ep_numweapons:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.numweapons;
!         break;
!     }
!     case _ep_weapnum:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.weapnum;
!         break;
!     }
!     case _ep_weaploss:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         if(paramCount >= 3)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!             {
!                 printf("You must specify the flag value.\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
! 
!             if (ltemp == 0) (*pretvar)->lVal = (LONG)ent->modeldata.weaploss[0];
!             else (*pretvar)->lVal = (LONG)ent->modeldata.weaploss[1];
!         }
!         else (*pretvar)->lVal = (LONG)ent->modeldata.weaploss[0];
! 
!         break;
!     }
!     case _ep_x:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->position.x;
!         break;
!     }
!     case _ep_xdir:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->velocity.x;
!         break;
!     }
!     case _ep_z:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->position.z;
!         break;
!     }
!     case _ep_zdir:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->velocity.z;
!         break;
!     }
!     default:
!         //printf("Property name '%s' is not supported by function getentityproperty.\n", propname);
!         *pretvar = NULL;
!         return E_FAIL;
!         break;
!     }
! 
!     return S_OK;
! }
! 
! 
! //changeentityproperty(pentity, propname, value1[ ,value2, value3, ...]);
! HRESULT openbor_changeentityproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL;
!     s_model *tempmodel ;
!     char *tempstr = NULL;
!     LONG ltemp, ltemp2;
!     DOUBLE dbltemp;
!     int propind;
!     int i = 0;
! 
!     static const void *actions[] =   // for takeaction
!     {
!         bomb_explode,
!         common_animation_normal,
!         common_attack_proc,
!         common_block,
!         common_drop,
!         common_fall,
!         common_get,
!         common_grab,
!         common_grabattack,
!         common_grabbed,
!         common_jump,
!         common_land,
!         common_lie,
!         common_pain,
!         common_prejump,
!         common_rise,
!         common_spawn,
!         common_turn,
!         normal_prepare,
!         npc_warp,
!         player_blink,
!         suicide,
!     };
! 
!     static const int entitytypes[] =
!     {
!         0, // "ground"; not a real entity type
!         TYPE_ENEMY,
!         TYPE_NPC,
!         TYPE_OBSTACLE,
!         TYPE_PLAYER,
!         TYPE_SHOT,
! 
!     };
! 
!     static const void *think[] =   // 2011_03_03, DC: Think types.
!     {
!         common_think,
!         player_think,
!         steam_think,
!         steamer_think,
!         text_think,
!         trap_think,
!     };
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 3)
!     {
!         printf("Function changeentityproperty must have have at least 3 parameters.");
!         goto changeentityproperty_error;
!     }
! 
!     mapstrings_entityproperty(varlist, paramCount);
! 
!     if(varlist[0]->vt != VT_PTR && varlist[0]->vt != VT_EMPTY)
!     {
!         printf("Function changeentityproperty must have a valid entity handle.");
!         goto changeentityproperty_error;
!     }
!     ent = (entity *)varlist[0]->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         return S_OK;
!     }
! 
!     if(varlist[1]->vt != VT_INTEGER)
!     {
!         if(varlist[1]->vt != VT_STR)
!         {
!             printf("Function changeentityproperty must have a string property name.\n");
!         }
!         goto changeentityproperty_error;
!     }
! 
!     propind = varlist[1]->lVal;
! 
!     switch(propind)
!     {
!     case _ep_aggression:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.aggression = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_aiattack:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.aiattack = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_aiflag:
!     {
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             if(varlist[2]->vt != VT_STR)
!             {
!                 printf("You must give a string value for AI flag name.\n");
!             }
!             goto changeentityproperty_error;
!         }
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             switch(varlist[2]->lVal)
!             {
!             case _ep_aiflag_dead:
!                 ent->dead = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_jumpid:
!                 ent->jump.animation_id = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_jumping:
!                 ent->jumping = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_idling:
!                 ent->idling = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_drop:
!                 ent->drop = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_attacking:
!                 ent->attacking = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_getting:
!                 ent->getting = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_turning:
!                 ent->turning = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_charging:
!                 ent->charging = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_blocking:
!                 ent->blocking = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_ducking:
!                 ent->ducking = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_falling:
!                 ent->falling = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_running:
!                 ent->running = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_inpain:
!                 ent->inpain = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_rising:
!                 ent->rising = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_riseattacking:
!                 ent->riseattacking = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_inbackpain:
!                 ent->inbackpain = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_projectile:
!                 ent->projectile = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_frozen:
!                 ent->frozen = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_toexplode:
!                 ent->toexplode = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_animating:
!                 ent->animating = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_blink:
!                 ent->blink = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_invincible:
!                 ent->invincible = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_autokill:
!                 ent->autokill = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_idlemode:
!                 ent->idlemode = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_walkmode:
!                 ent->walkmode = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_walking:
!                 ent->walking = (LONG)ltemp;
!                 break;
!             default:
!                 printf("Unknown AI flag.\n");
!                 goto changeentityproperty_error;
!             }
!         }
!         break;
!     }
!     case _ep_aimove:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.aimove = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_alpha:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.alpha = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_animation:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ltemp2 = (LONG)1;
!             if(paramCount < 4 || SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!             {
!                 ent_set_anim(ent, (LONG)ltemp, (LONG)ltemp2);
!             }
!         }
!         break;
!     }
!     case _ep_animhits:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->animation->animhits = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_animpos:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->animpos = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_antigrab:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.antigrab = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_antigravity:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.antigravity = (DOUBLE)dbltemp;
!         }
!         break;
!     }
! 
!     case _ep_attacking:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->attacking = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_attackid:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->attack_id_outgoing = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_autokill:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->autokill = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_base:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->base = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_blink:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->blink = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_blockback:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.blockback = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_blockodds:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.blockodds = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_blockpain:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.blockpain = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_boomerang:
      {
          if(varlist[2]->vt != VT_INTEGER)
          {
--- 4043,5777 ----
              return E_FAIL;
          }
          break;
!     }
!     case _ep_energycost:
!     {
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             printf("You must provide a string name for energycost.\n\
! 	~'cost'\n\
! 	~'disable'\n\
! 	~'mponly'\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp	= varlist[2]->lVal;												//Subproperty.
!         i		= varlist[3]->lVal;												//Animation.
! 
!         if(!validanim(ent, i))													//Verify animation.
!         {
!             break;
!         }
! 
!         switch(ltemp)
!         {
!         case _ep_energycost_cost:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             if(ent->modeldata.animation[i]->energycost)
!             {
!                 (*pretvar)->lVal = ent->modeldata.animation[i]->energycost->cost;
!             }
! 
!             break;
!         case _ep_energycost_disable:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             if(ent->modeldata.animation[i]->energycost)
!             {
!                 (*pretvar)->lVal = ent->modeldata.animation[i]->energycost->disable;
!             }
!             break;
!         case _ep_energycost_mponly:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             if(ent->modeldata.animation[i]->energycost)
!             {
!                 (*pretvar)->lVal = ent->modeldata.animation[i]->energycost->mponly;
!             }
!             break;
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_escapecount:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->escapecount;
!         break;
!     }
!     case _ep_escapehits:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.escapehits;
!         break;
!     }
!     case _ep_exists:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->exists;
!         break;
!     }
!     case _ep_facing:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.facing;
!         break;
!     }
!     case _ep_falldie:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.falldie;
!         break;
!     }
!     case _ep_flash:
!     {
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must give a string name for flash property.\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         switch(ltemp)
!         {
!         case _ep_flash_block:
!         {
!             i = ent->modeldata.bflash;
!             break;
!         }
!         case _ep_flash_def:
!         {
!             i = ent->modeldata.flash;
!             break;
!         }
!         case _ep_flash_noattack:
!         {
!             i = ent->modeldata.noatflash;
!             break;
!         }
!         default:
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)i;
!         break;
!     }
!     case _ep_pain_time:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->pain_time;
!         break;
!     }
!     case _ep_freezetime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->freezetime;
!         break;
!     }
!     case _ep_frozen:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->frozen;
!         break;
!     }
!     case _ep_gfxshadow:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.gfxshadow;
!         break;
!     }
!     case _ep_shadowbase:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.shadowbase;
!         break;
!     }
!     case _ep_grabbing:
!     {
!         if(ent->grabbing) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->grabbing;
!         }
!         break;
!     }
!     case _ep_grabforce:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.grabforce;
!         break;
!     }
!     case _ep_guardpoints:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.guardpoints.current;
!         break;
!     }
!     case _ep_hasplatforms:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.hasPlatforms;
!         break;
!     }
!     case _ep_health:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->energy_status.health_current;
!         break;
!     }
!     case _ep_height:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.size.y;
!         break;
!     }
!     case _ep_hitbyid:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->attack_id_incoming;
!         break;
!     }
!     case _ep_hitheadplatform:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)ent->hithead;
!         break;
!     }
!     case _ep_landedplatform:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)ent->landed_on_platform;
!         break;
!     }
!     case _ep_hitwall:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->hitwall;
!         break;
!     }
!     case _ep_hmapl:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.maps.hide_start;
!         break;
!     }
!     case _ep_hmapu:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.maps.hide_end;
!         break;
!     }
!     case _ep_icon:
!     {
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must provide a string name for icon subproperty:\n\
! 	getentityproperty({ent}, 'icon', {subproperty});\n\
! 	~'default'\n\
! 	~'die'\n\
! 	~'get'\n\
! 	~'mphigh'\n\
! 	~'mplow'\n\
! 	~'mpmed'\n\
! 	~'pain'\n\
! 	~'weapon'\n\
! 	~'x'\n\
! 	~'y'\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         switch(ltemp)
!         {
!         case _ep_icon_def:
!         {
!             i = ent->modeldata.icon.def;
!             break;
!         }
!         case _ep_icon_die:
!         {
!             i = ent->modeldata.icon.die;
!             break;
!         }
!         case _ep_icon_get:
!         {
!             i = ent->modeldata.icon.get;
!             break;
!         }
!         case _ep_icon_mphigh:
!         {
!             i = ent->modeldata.icon.mphigh;
!             break;
!         }
!         case _ep_icon_mplow:
!         {
!             i = ent->modeldata.icon.mplow;
!             break;
!         }
!         case _ep_icon_mpmed:
!         {
!             i = ent->modeldata.icon.mpmed;
!             break;
!         }
!         case _ep_icon_pain:
!         {
!             i = ent->modeldata.icon.pain;
!             break;
!         }
!         case _ep_icon_weapon:
!         {
!             i = ent->modeldata.icon.weapon;
!             break;
!         }
!         case _ep_icon_x:
!         {
!             i = ent->modeldata.icon.position.x;
!             break;
!         }
!         case _ep_icon_y:
!         {
!             i = ent->modeldata.icon.position.y;
!             break;
!         }
!         default:
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         }
! 
!         if (i >= 0)
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             spr = sprite_map[i].node->sprite;
!             spr->centerx = sprite_map[i].centerx;
!             spr->centery = sprite_map[i].centery;
!             (*pretvar)->ptrVal = (VOID *)(spr);
!         }
!         else
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = -1;
!         }
!         break;
!     }
!     case _ep_invincible:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->invincible;
!         break;
!     }
!     case _ep_invinctime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->invinctime;
!         break;
!     }
!     case _ep_jugglepoints:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.jugglepoints.current;
!         break;
!     }
!     case _ep_jumpheight:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.jumpheight;
!         break;
!     }
!     case _ep_jumpmovex:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.jumpmovex;
!         break;
!     }
!     case _ep_jumpmovez:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.jumpmovez;
!         break;
!     }
!     case _ep_jumpspeed:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.jumpspeed;
!         break;
!     }
!     case _ep_knockdowncount:
!     {
!         /*
!         2011_04_14, DC: Backward compatability; default to current if subproperty not provided.
!         */
!         if(paramCount < 3)
!         {
!             ltemp = _ep_knockdowncount_current;
!         }
!         else
!         {
!             arg = varlist[2];
! 
!             if(arg->vt != VT_INTEGER)
!             {
!                 printf("You must provide a string name for knockdowncount subproperty:\n\
! 		getentityproperty({ent}, 'knockdowncount', {subproperty})\n\
! 		~'current'\n\
! 		~'max'\n\
! 		~'time'\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
! 
!             ltemp = arg->lVal;
!         }
! 
!         switch(ltemp)
!         {
!         case _ep_knockdowncount_current:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->knockdowncount;
!             break;
!         case _ep_knockdowncount_max:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->modeldata.knockdowncount;
!             break;
!         case _ep_knockdowncount_time:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->knockdowncount;
!             break;
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_komap:
!     {
!         if(paramCount < 2)
!         {
!             break;
!         }
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.maps.ko;
!         break;
!     }
!     case _ep_landframe:
!     {
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         if(varlist[2]->vt != VT_INTEGER
!                 || varlist[3]->vt != VT_INTEGER)
!         {
!             printf("\n Error, getentityproperty({ent}, 'landframe', {sub property}, {animation}): {Sub property} or {Animation} parameter is missing or invalid. \n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp	= varlist[2]->lVal;												//Subproperty.
!         i		= varlist[3]->lVal;												//Animation.
! 
!         if(!validanim(ent, i))													//Verify animation.
!         {
!             break;
!         }
  
          // entity must have a land frame set.
          if(!ent->modeldata.animation[i]->landframe)
          {
              break;
          }
! 
!         switch(ltemp)
!         {
!         case _ep_landframe_ent:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->landframe->ent;
!             break;
!         case _ep_landframe_frame:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->landframe->frame;
!             break;
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_lifespancountdown:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->lifespancountdown;
!         break;
!     }
!     case _ep_attackthrottle:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.attackthrottle;
!         break;
!     }
!     case _ep_attackthrottletime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.attackthrottletime;
!         break;
!     }
!     case _ep_link:
!     {
!         if(ent->link) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->link;
!         }
!         break;
!     }
!     case _ep_map:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)0;
!         for(i = 0; i < ent->modeldata.maps_loaded; i++)
!         {
!             if(ent->colourmap == ent->modeldata.colourmap[i])
!             {
!                 (*pretvar)->lVal = (LONG)(i + 1);
!                 break;
!             }
!         }
!         break;
!     }
!     case _ep_mapcount:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)(ent->modeldata.maps_loaded + 1);
!         break;
!     }
!     case _ep_mapdefault:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)(ent->map);
!         break;
!     }
!     case _ep_maps:
!     {
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must give a string name for maps property.\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         switch(ltemp)
!         {
!         case _ep_maps_count:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps_loaded + 1);
!             break;
!         }
! 
!         case _ep_maps_current:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)0;
!             for(i = 0; i < ent->modeldata.maps_loaded; i++)
!             {
!                 if(ent->colourmap == ent->modeldata.colourmap[i])
!                 {
!                     (*pretvar)->lVal = (LONG)(i + 1);
!                     break;
!                 }
!             }
!             break;
!         }
!         case _ep_maps_dying:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             if(paramCount >= 3)
!             {
!                 if(FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!                 {
!                     printf("You must specify the integer value for remap.\n");
!                     *pretvar = NULL;
!                     return E_FAIL;
!                 }
!                 else
!                 {
!                     if (ltemp == 0) (*pretvar)->lVal = (LONG)(ent->dying);
!                     else (*pretvar)->lVal = (LONG)(ent->dying2);
!                 }
!             }
!             else
!             {
!                 (*pretvar)->lVal = (LONG)(ent->dying);
!             }
!             break;
!         }
!         case _ep_maps_dying_critical:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->per2);
!             break;
!         }
!         case _ep_maps_dying_low:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->per1);
!             break;
!         }
!         case _ep_maps_frozen:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps.frozen);
!             break;
!         }
!         case _ep_maps_hide_end:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps.hide_end);
!             break;
!         }
!         case _ep_maps_hide_start:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps.hide_start);
!             break;
!         }
!         case _ep_maps_ko:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps.ko);
!             break;
!         }
!         case _ep_maps_kotype:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->modeldata.maps.kotype);
!             break;
!         }
!         case _ep_maps_table:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)(ent->colourmap);
!             break;
!         }
!         case _ep_maps_time:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)(ent->maptime);
!             break;
!         }
!         default:
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         }
!         break;
!     }
!     case _ep_maxguardpoints:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.guardpoints.max;
!         break;
!     }
!     case _ep_maxhealth:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.health;
!         break;
!     }
!     case _ep_maxjugglepoints:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.jugglepoints.max;
!         break;
!     }
!     case _ep_maxmp:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.mp;
!         break;
!     }
!     case _ep_model:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(ent->model->name);
!         break;
!     }
!     case _ep_mp:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->energy_status.mp_current;
!         break;
!     }
!     case _ep_mpdroprate:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.mpdroprate;
!         break;
!     }
!     case _ep_mprate:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.mprate;
!         break;
!     }
!     case _ep_mpstable:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.mpstable;
!         break;
!     }
!     case _ep_mpstableval:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.mpstableval;
!         break;
!     }
!     case _ep_name:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(ent->name);
!         break;
!     }
!     case _ep_nextanim:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->nextanim;
!         break;
!     }
!     case _ep_nextmove:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->nextmove;
!         break;
!     }
!     case _ep_nextthink:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->nextthink;
!         break;
!     }
!     case _ep_no_adjust_base:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.no_adjust_base;
!         break;
!     }
!     case _ep_noaicontrol:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->noaicontrol;
!         break;
!     }
!     case _ep_nodieblink:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.nodieblink;
!         break;
!     }
!     case _ep_nodrop:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.nodrop;
!         break;
!     }
!     case _ep_nograb:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->nograb;
!         break;
!     }
!     case _ep_nohithead:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.nohithead;
!         break;
!     }
!     case _ep_nolife:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.nolife;
!         break;
!     }
!     case _ep_nopain:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.nopain;
!         break;
!     }
!     case _ep_offense:
!     {
!         ltemp = 0;
!         if(paramCount >= 3)
!         {
!             arg = varlist[2];
!             if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!             {
!                 ltemp = (LONG)0;
!             }
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->offense_factors[(LONG)ltemp];
!         break;
!     }
!     case _ep_offscreen_noatk_factor:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.offscreen_noatk_factor;
!         break;
!     }
!     case _ep_offscreenkill:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.offscreenkill;
!         break;
!     }
!     case _ep_opponent:
!     {
!         if(ent->opponent) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->opponent;
!         }
!         break;
!     }
!     case _ep_custom_target:
!     {
!         if(ent->custom_target) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->custom_target;
!         }
!         break;
!     }
!     case _ep_owner:
!     {
!         if(ent->owner) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->owner;
!         }
!         break;
!     }
!     case _ep_parent:
!     {
!         if(ent->parent) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->parent;
!         }
!         break;
!     }
!     case _ep_path:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(ent->modeldata.path);
!         break;
!     }
!     case _ep_pathfindstep:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.pathfindstep;
!         //printf("%d %s %d\n", ent->sortid, ent->name, ent->playerindex);
!         break;
!     }
!     case _ep_playerindex:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->playerindex;
!         //printf("%d %s %d\n", ent->sortid, ent->name, ent->playerindex);
!         break;
!     }
!     case _ep_projectile:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->projectile;
!         break;
!     }
!     case _ep_range:
!     {
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         if(varlist[2]->vt != VT_INTEGER
!                 || varlist[3]->vt != VT_INTEGER)
!         {
!             printf("\n Error, getentityproperty({ent}, 'range', {sub property}, {animation}): {Sub property} or {Animation} parameter is missing or invalid. \n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp	= varlist[2]->lVal;												//Subproperty.
!         i		= varlist[3]->lVal;												//Animation.
! 
!         if(!validanim(ent, i))													//Verify animation.
!         {
!             break;
!         }
! 
!         switch(ltemp)
!         {
!         case _ep_range_amax:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.y.max;
!             break;
!         case _ep_range_amin:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.y.min;
!             break;
!         case _ep_range_bmax:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.base.max;
!             break;
!         case _ep_range_bmin:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.base.min;
!             break;
!         case _ep_range_xmax:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.x.max;
!             break;
!         case _ep_range_xmin:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.x.min;
!             break;
!         case _ep_range_zmax:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.z.max;
!             break;
!         case _ep_range_zmin:
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.animation[i]->range.z.min;
!             break;
!         default:
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         break;
!     }
!     case _ep_running:
!     {
!         if(paramCount < 3)
!         {
!             break;
!         }
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
!             printf("You must give a string name for running property.\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         switch(ltemp)
!         {
!         case _ep_running_speed:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->modeldata.runspeed;
!             break;
!         }
!         case _ep_running_jumpy:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->modeldata.runjumpheight;
!             break;
!         }
!         case _ep_running_jumpx:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (DOUBLE)ent->modeldata.runjumpdist;
!             break;
!         }
!         case _ep_running_land:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.runhold;
!             break;
!         }
!         case _ep_running_movez:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)ent->modeldata.runupdown;
!             break;
!         }
!         }
!         break;
!     }
!     case _ep_rush_count:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->rush.count.current;
!         break;
!     }
!     case _ep_rush_tally:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->rush.count.max;
!         break;
!     }
!     case _ep_rush_time:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->rush.time;
!         break;
!     }
!     case _ep_score:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.score;
!         break;
!     }
!     case _ep_scroll:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.scroll;
!         break;
!     }
!     case _ep_seal:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->seal;
!         break;
!     }
!     case _ep_sealtime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->sealtime;
!         break;
!     }
!     case _ep_setlayer:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.setlayer;
!         break;
!     }
!     case _ep_sortid:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->sortid;
!         break;
!     }
!     case _ep_spawntype:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->spawntype;
!         break;
!     }
!     case _ep_speed:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.speed;
!         break;
!     }
!     case _ep_sprite:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         i = ent->animation->sprite[ent->animpos];
!         spr = sprite_map[i].node->sprite;
!         spr->centerx = sprite_map[i].centerx;
!         spr->centery = sprite_map[i].centery;
!         (*pretvar)->ptrVal = (VOID *)(spr);
!         break;
!     }
!     case _ep_spritea:
!     {
!         /*
!         2011_04_17, DC: Modder can now specify animation and frame to return sprite from.
!         To retain backward compatibility, sprite from current animation/frame is returned
!         when animation and/or frame parameters are not provided.
!         */
! 
!         ltemp   = varlist[2]->lVal;
!         arg     = varlist[3];
!         arg1    = varlist[4];
! 
!         /*
!         Request from animation or frame that doesn't exist = shutdown.
!         Let's be more user friendly then that; return empty so modder can evaluate
!         and take action accordingly.*/
!         if(!validanim(ent, arg->lVal) || !(ent->modeldata.animation[arg->lVal]->numframes >= arg1->lVal))
!         {
!             break;
!         }
! 
!         i = ent->modeldata.animation[arg->lVal]->sprite[arg1->lVal];
! 
!         switch(ltemp)
!         {
!         case _ep_spritea_centerx:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)sprite_map[i].centerx;
!             break;
!         }
!         case _ep_spritea_centery:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)sprite_map[i].centery;
!             break;
!         }
!         case _ep_spritea_file:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_STR);
!             (*pretvar)->strVal = StrCache_CreateNewFrom(sprite_map[i].node->filename);
!             break;
!         }
!         case _ep_spritea_offsetx:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)sprite_map[i].node->sprite->offsetx;
!             break;
!         }
!         case _ep_spritea_offsety:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!             (*pretvar)->lVal = (LONG)sprite_map[i].node->sprite->offsety;
!             break;
!         }
!         case _ep_spritea_sprite:
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             spr = sprite_map[i].node->sprite;
!             spr->centerx = sprite_map[i].centery;
!             spr->centery = sprite_map[i].centery;
!             (*pretvar)->ptrVal = (VOID *)(spr);
!             break;
!         }
!         default:
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         }
! 
!         break;
! 
!     }
!     case _ep_stalltime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->stalltime;
!         break;
!     }
!     case _ep_releasetime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->releasetime;
!         break;
!     }
!     case _ep_staydown:
!     {
!         arg = varlist[2];
!         if(arg->vt != VT_INTEGER)
!         {
! 
!             printf("You must provide a string name for staydown property:\n\
! 	getentityproperty({ent}, 'staydown', {subproperty})\n\
! 	~'rise'\n\
! 	~'riseattack'\n\
! 	~'riseattack_stall' \n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ltemp = arg->lVal;
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         switch(ltemp)
!         {
!         case _ep_staydown_rise:
!         {
!             i = ent->staydown.rise;
!             break;
!         }
!         case _ep_staydown_riseattack:
!         {
!             i = ent->staydown.riseattack;
!             break;
!         }
!         case _ep_staydown_riseattack_stall:
!         {
!             i = ent->staydown.riseattack_stall;
!             break;
!         }
!         default:
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)i;
!         break;
!     }
!     case _ep_stealth:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.stealth.hide;
!         break;
!     }
!     case _ep_subentity:
!     {
!         if(ent->subentity) // always return an empty var if it is NULL
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent->subentity;
!         }
!         break;
!     }
!     case _ep_subject_to_basemap:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_basemap;
!         break;
!     }
!     case _ep_subject_to_gravity:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_gravity;
!         break;
!     }
!     case _ep_subject_to_hole:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_hole;
!         break;
!     }
!     case _ep_subject_to_maxz:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_maxz;
!         break;
!     }
!     case _ep_subject_to_minz:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_minz;
!         break;
!     }
!     case _ep_subject_to_obstacle:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_obstacle;
!         break;
!     }
!     case _ep_subject_to_platform:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_platform;
!         break;
!     }
!     case _ep_subject_to_screen:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_screen;
!         break;
!     }
!     case _ep_subject_to_wall:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subject_to_wall;
!         break;
!     }
!     case _ep_subtype:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.subtype;
!         break;
!     }
!     case _ep_thold:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.thold;
!         break;
!     }
!     case _ep_throwdamage:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.throwdamage;
!         break;
!     }
!     case _ep_throwdist:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.throwdist;
!         break;
!     }
!     case _ep_throwframewait:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.throwframewait;
!         break;
!     }
!     case _ep_throwheight:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->modeldata.throwheight;
!         break;
!     }
!     case _ep_tosstime:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->toss_time;
!         break;
!     }
!     case _ep_tossv:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->velocity.y;
!         break;
!     }
!     case _ep_type:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.type;
!         break;
!     }
!     case _ep_walkoffmovex:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.walkoffmovex;
!         break;
!     }
!     case _ep_walkoffmovez:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.walkoffmovez;
!         break;
!     }
!     case _ep_weapent:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)ent->weapent;
!         break;
!     }
!     case _ep_numweapons:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.numweapons;
!         break;
!     }
!     case _ep_weapnum:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)ent->modeldata.weapnum;
!         break;
!     }
!     case _ep_weaploss:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         if(paramCount >= 3)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!             {
!                 printf("You must specify the flag value.\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
! 
!             if (ltemp == 0) (*pretvar)->lVal = (LONG)ent->modeldata.weaploss[0];
!             else (*pretvar)->lVal = (LONG)ent->modeldata.weaploss[1];
!         }
!         else (*pretvar)->lVal = (LONG)ent->modeldata.weaploss[0];
! 
!         break;
!     }
!     case _ep_x:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->position.x;
!         break;
!     }
!     case _ep_xdir:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->velocity.x;
!         break;
!     }
!     case _ep_z:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->position.z;
!         break;
!     }
!     case _ep_zdir:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)ent->velocity.z;
!         break;
!     }
!     default:
!         //printf("Property name '%s' is not supported by function getentityproperty.\n", propname);
!         *pretvar = NULL;
!         return E_FAIL;
!         break;
!     }
! 
!     return S_OK;
! }
! 
! 
! //changeentityproperty(pentity, propname, value1[ ,value2, value3, ...]);
! HRESULT openbor_changeentityproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL;
!     s_model *tempmodel ;
!     char *tempstr = NULL;
!     LONG ltemp, ltemp2;
!     DOUBLE dbltemp;
!     int propind;
!     int i = 0;
! 
!     static const void *actions[] =   // for takeaction
!     {
!         bomb_explode,
!         common_animation_normal,
!         common_attack_proc,
!         common_block,
!         common_drop,
!         common_fall,
!         common_get,
!         common_grab,
!         common_grabattack,
!         common_grabbed,
!         common_jump,
!         common_land,
!         common_lie,
!         common_pain,
!         common_prejump,
!         common_rise,
!         common_spawn,
!         common_turn,
!         normal_prepare,
!         npc_warp,
!         player_blink,
!         suicide,
!     };
! 
!     static const int entitytypes[] =
!     {
!         0, // "ground"; not a real entity type
!         TYPE_ENEMY,
!         TYPE_NPC,
!         TYPE_OBSTACLE,
!         TYPE_PLAYER,
!         TYPE_SHOT,
! 
!     };
! 
!     static const void *think[] =   // 2011_03_03, DC: Think types.
!     {
!         common_think,
!         player_think,
!         steam_think,
!         steamer_think,
!         text_think,
!         trap_think,
!     };
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 3)
!     {
!         printf("Function changeentityproperty must have have at least 3 parameters.");
!         goto changeentityproperty_error;
!     }
! 
!     mapstrings_entityproperty(varlist, paramCount);
! 
!     if(varlist[0]->vt != VT_PTR && varlist[0]->vt != VT_EMPTY)
!     {
!         printf("Function changeentityproperty must have a valid entity handle.");
!         goto changeentityproperty_error;
!     }
!     ent = (entity *)varlist[0]->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         return S_OK;
!     }
! 
!     if(varlist[1]->vt != VT_INTEGER)
!     {
!         if(varlist[1]->vt != VT_STR)
!         {
!             printf("Function changeentityproperty must have a string property name.\n");
!         }
!         goto changeentityproperty_error;
!     }
! 
!     propind = varlist[1]->lVal;
! 
!     switch(propind)
!     {
!     case _ep_aggression:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.aggression = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_aiattack:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.aiattack = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_aiflag:
!     {
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             if(varlist[2]->vt != VT_STR)
!             {
!                 printf("You must give a string value for AI flag name.\n");
!             }
!             goto changeentityproperty_error;
!         }
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             switch(varlist[2]->lVal)
!             {
!             case _ep_aiflag_dead:
!                 ent->dead = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_jumpid:
!                 ent->jump.animation_id = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_jumping:
!                 ent->jumping = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_idling:
!                 ent->idling = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_drop:
!                 ent->drop = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_attacking:
!                 ent->attacking = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_getting:
!                 ent->getting = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_turning:
!                 ent->turning = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_charging:
!                 ent->charging = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_blocking:
!                 ent->blocking = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_ducking:
!                 ent->ducking = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_falling:
!                 ent->falling = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_running:
!                 ent->running = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_inpain:
!                 ent->inpain = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_rising:
!                 ent->rising = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_riseattacking:
!                 ent->riseattacking = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_inbackpain:
!                 ent->inbackpain = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_projectile:
!                 ent->projectile = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_frozen:
!                 ent->frozen = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_toexplode:
!                 ent->toexplode = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_animating:
!                 ent->animating = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_blink:
!                 ent->blink = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_invincible:
!                 ent->invincible = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_autokill:
!                 ent->autokill = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_idlemode:
!                 ent->idlemode = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_walkmode:
!                 ent->walkmode = (LONG)ltemp;
!                 break;
!             case _ep_aiflag_walking:
!                 ent->walking = (LONG)ltemp;
!                 break;
!             default:
!                 printf("Unknown AI flag.\n");
!                 goto changeentityproperty_error;
!             }
!         }
!         break;
!     }
!     case _ep_aimove:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.aimove = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_alpha:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.alpha = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_animation:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ltemp2 = (LONG)1;
!             if(paramCount < 4 || SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!             {
!                 ent_set_anim(ent, (LONG)ltemp, (LONG)ltemp2);
!             }
!         }
!         break;
!     }
!     case _ep_animhits:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->animation->animhits = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_animpos:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->animpos = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_antigrab:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.antigrab = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_antigravity:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.antigravity = (DOUBLE)dbltemp;
!         }
!         break;
!     }
! 
!     case _ep_attacking:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->attacking = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_attackid:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->attack_id_outgoing = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_autokill:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->autokill = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_base:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->base = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_blink:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->blink = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_blockback:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.blockback = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_blockodds:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.blockodds = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_blockpain:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.blockpain = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_boomerang:
      {
          if(varlist[2]->vt != VT_INTEGER)
          {
***************
*** 5800,6051 ****
              }
          }
          break;
-     }
-     case _ep_boss:
-     {
-         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
-         {
-             ent->boss = (LONG)ltemp;
-         }
-         break;
-     }
-     case _ep_bounce:
-     {
-         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
-         {
-             ent->modeldata.bounce = (LONG)ltemp;
-         }
-         break;
-     }
-     case _ep_candamage:
-     {
-         ent->modeldata.candamage = 0;
- 
-         for(i = 2; i < paramCount; i++)
-         {
-             if(varlist[i]->vt == VT_INTEGER) // known entity type
-             {
-                 ltemp = varlist[i]->lVal;
-                 if(ltemp == (_ep_hcd_ground | 0x80000000)) // "ground" - not needed?
-                 {
-                     ent->modeldata.ground = 1;
-                 }
-                 else if(ltemp & 0x80000000)
-                 {
-                     ent->modeldata.candamage |= entitytypes[ltemp & 0x7fffffff];
-                 }
-                 else
-                 {
-                     ent->modeldata.candamage |= ltemp;
-                 }
-             }
-             else
-             {
-                 printf("You must pass one or more string constants for candamage entity type.\n");
-                 goto changeentityproperty_error;
-             }
-         }
-         break;
-     }
-     case _ep_combostep:
-     {
-         if(paramCount >= 4 &&
-                 SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) &&
-                 SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
-         {
-             ent->combostep[(LONG)ltemp] = (LONG)ltemp2;
-         }
-         break;
-     }
-     case _ep_combotime:
-     {
-         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
-         {
-             ent->combotime = (LONG)ltemp;
-         }
-         break;
-     }
-     case _ep_colourmap:
-     {
-         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
-         {
-             ent->colourmap = (VOID *)model_get_colourmap(&(ent->modeldata), ltemp);
-         }
-         break;
-     }
-     case _ep_damage_on_landing:
-     {
-         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
-         {
-             ent->damage_on_landing.attack_force = (LONG)ltemp;
-         }
-         break;
-     }
-     case _ep_dead:
-     {
-         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
-         {
-             ent->dead = (LONG)ltemp;
-         }
-         break;
-     }
-     case _ep_defaultname:
-     {
-         if(varlist[2]->vt != VT_STR)
-         {
-             printf("You must give a string value for entity name.\n");
-             goto changeentityproperty_error;
-         }
-         tempmodel = findmodel((char *)StrCache_Get(varlist[2]->strVal));
-         if(!tempmodel)
-         {
-             printf("Use must give an existing model's name for entity's default model name.\n");
-             goto changeentityproperty_error;
-         }
-         ent->defaultmodel = tempmodel;
-         break;
-     }
-     case _ep_defense:
-     {
-         if((ltemp2 =
-                     (paramCount >= 4 &&
-                      SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) &&
-                      ltemp < (LONG)MAX_ATKS && ltemp >= (LONG)0 &&
-                      SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
-            ))
-         {
-             ent->defense[(LONG)ltemp].factor = (DOUBLE)dbltemp;
-         }
- 
-         if(paramCount >= 5 && ltemp2 && (ltemp2 = SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp))))
-         {
-             ent->defense[(LONG)ltemp].pain = (DOUBLE)dbltemp;
-         }
-         if(paramCount >= 6 && ltemp2 && (ltemp2 = SUCCEEDED(ScriptVariant_DecimalValue(varlist[5], &dbltemp))))
-         {
-             ent->defense[(LONG)ltemp].knockdown = (DOUBLE)dbltemp;
-         }
-         if(paramCount >= 7 && ltemp2 && (ltemp2 = SUCCEEDED(ScriptVariant_DecimalValue(varlist[6], &dbltemp))))
-         {
-             ent->defense[(LONG)ltemp].blockpower = (DOUBLE)dbltemp;
-         }
-         if(paramCount >= 8 && ltemp2 && (ltemp2 = SUCCEEDED(ScriptVariant_DecimalValue(varlist[7], &dbltemp))))
-         {
-             ent->defense[(LONG)ltemp].blockthreshold = (DOUBLE)dbltemp;
-         }
-         if(paramCount >= 9 && ltemp2 && (ltemp2 = SUCCEEDED(ScriptVariant_DecimalValue(varlist[8], &dbltemp))))
-         {
-             ent->defense[(LONG)ltemp].blockratio = (DOUBLE)dbltemp;
-         }
-         if(paramCount >= 10 && ltemp2 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[9], &dbltemp)))
-         {
-             ent->defense[(LONG)ltemp].blocktype = dbltemp;
-         }
- 
-         break;
-     }
-     case _ep_destx:
-     {
-         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
-         {
-             ent->destx = (DOUBLE)dbltemp;
-         }
-         break;
-     }
-     case _ep_destz:
-     {
-         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
-         {
-             ent->destz = (DOUBLE)dbltemp;
-         }
-         break;
-     }
-     case _ep_detect:
-     {
-         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
-         {
-             ent->modeldata.stealth.detect = (LONG)ltemp;
-         }
-         break;
-     }
-     case _ep_direction:
-     {
-         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
-         {
-             ent->direction = (LONG)ltemp;
-         }
-         break;
-     }
-     case _ep_dot:
-     {
-         if((SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp))))
-         {
-             i = (LONG)ltemp;
-             if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
-             {
-                 ent->dot_time[i] = (int)dbltemp;
-             }
-             if(paramCount >= 5 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp)))
-             {
-                 ent->dot[i] = (int)dbltemp;
-             }
-             if(paramCount >= 6 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[5], &dbltemp)))
-             {
-                 ent->dot_force[i] = (int)dbltemp;
-             }
-             if(paramCount >= 7 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[6], &dbltemp)))
-             {
-                 ent->dot_rate[i] = (int)dbltemp;
-             }
-             if(paramCount >= 8 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[7], &dbltemp)))
-             {
-                 ent->dot_atk[i] = (int)dbltemp;
-             }
-             if(paramCount >= 9)
-             {
-                 ent->dot_owner[i] = (entity *)varlist[8]->ptrVal;
-             }
-         }
-         break;
-     }
-     case _ep_edelay:
-     {
-         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
-         {
-             ent->modeldata.edelay.mode = (LONG)ltemp;
-         }
-         if(paramCount >= 3 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
-         {
-             ent->modeldata.edelay.factor = (DOUBLE)dbltemp;
-         }
-         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[4], &ltemp)))
-         {
-             ent->modeldata.edelay.cap.min = (LONG)ltemp;
-         }
-         if(paramCount >= 5 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[5], &ltemp)))
-         {
-             ent->modeldata.edelay.cap.max = (LONG)ltemp;
-         }
-         if(paramCount >= 6 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[6], &ltemp)))
-         {
-             ent->modeldata.edelay.range.min = (LONG)ltemp;
-         }
-         if(paramCount >= 7 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[7], &ltemp)))
-         {
-             ent->modeldata.edelay.range.max = (LONG)ltemp;
-         }
- 
-         break;
-     }
-     case _ep_edge:
-     {
-         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
-         {
-             ent->edge = (LONG)ltemp;
-         }
-         break;
      }
!     case _ep_edgerange:
      {
          if(varlist[2]->vt != VT_INTEGER)
          {
--- 5802,6053 ----
              }
          }
          break;
      }
!     case _ep_boss:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->boss = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_bounce:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.bounce = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_candamage:
!     {
!         ent->modeldata.candamage = 0;
! 
!         for(i = 2; i < paramCount; i++)
!         {
!             if(varlist[i]->vt == VT_INTEGER) // known entity type
!             {
!                 ltemp = varlist[i]->lVal;
!                 if(ltemp == (_ep_hcd_ground | 0x80000000)) // "ground" - not needed?
!                 {
!                     ent->modeldata.ground = 1;
!                 }
!                 else if(ltemp & 0x80000000)
!                 {
!                     ent->modeldata.candamage |= entitytypes[ltemp & 0x7fffffff];
!                 }
!                 else
!                 {
!                     ent->modeldata.candamage |= ltemp;
!                 }
!             }
!             else
!             {
!                 printf("You must pass one or more string constants for candamage entity type.\n");
!                 goto changeentityproperty_error;
!             }
!         }
!         break;
!     }
!     case _ep_combostep:
!     {
!         if(paramCount >= 4 &&
!                 SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) &&
!                 SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!         {
!             ent->combostep[(LONG)ltemp] = (LONG)ltemp2;
!         }
!         break;
!     }
!     case _ep_combotime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->combotime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_colourmap:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->colourmap = (VOID *)model_get_colourmap(&(ent->modeldata), ltemp);
!         }
!         break;
!     }
!     case _ep_damage_on_landing:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->damage_on_landing.attack_force = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_dead:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->dead = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_defaultname:
!     {
!         if(varlist[2]->vt != VT_STR)
!         {
!             printf("You must give a string value for entity name.\n");
!             goto changeentityproperty_error;
!         }
!         tempmodel = findmodel((char *)StrCache_Get(varlist[2]->strVal));
!         if(!tempmodel)
!         {
!             printf("Use must give an existing model's name for entity's default model name.\n");
!             goto changeentityproperty_error;
!         }
!         ent->defaultmodel = tempmodel;
!         break;
!     }
!     case _ep_defense:
!     {
!         if((ltemp2 =
!                     (paramCount >= 4 &&
!                      SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) &&
!                      ltemp < (LONG)MAX_ATKS && ltemp >= (LONG)0 &&
!                      SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!            ))
!         {
!             ent->defense[(LONG)ltemp].factor = (DOUBLE)dbltemp;
!         }
! 
!         if(paramCount >= 5 && ltemp2 && (ltemp2 = SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp))))
!         {
!             ent->defense[(LONG)ltemp].pain = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 6 && ltemp2 && (ltemp2 = SUCCEEDED(ScriptVariant_DecimalValue(varlist[5], &dbltemp))))
!         {
!             ent->defense[(LONG)ltemp].knockdown = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 7 && ltemp2 && (ltemp2 = SUCCEEDED(ScriptVariant_DecimalValue(varlist[6], &dbltemp))))
!         {
!             ent->defense[(LONG)ltemp].blockpower = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 8 && ltemp2 && (ltemp2 = SUCCEEDED(ScriptVariant_DecimalValue(varlist[7], &dbltemp))))
!         {
!             ent->defense[(LONG)ltemp].blockthreshold = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 9 && ltemp2 && (ltemp2 = SUCCEEDED(ScriptVariant_DecimalValue(varlist[8], &dbltemp))))
!         {
!             ent->defense[(LONG)ltemp].blockratio = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 10 && ltemp2 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[9], &dbltemp)))
!         {
!             ent->defense[(LONG)ltemp].blocktype = dbltemp;
!         }
! 
!         break;
!     }
!     case _ep_destx:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->destx = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_destz:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->destz = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_detect:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.stealth.detect = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_direction:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->direction = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_dot:
!     {
!         if((SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp))))
!         {
!             i = (LONG)ltemp;
!             if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!             {
!                 ent->dot_time[i] = (int)dbltemp;
!             }
!             if(paramCount >= 5 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp)))
!             {
!                 ent->dot[i] = (int)dbltemp;
!             }
!             if(paramCount >= 6 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[5], &dbltemp)))
!             {
!                 ent->dot_force[i] = (int)dbltemp;
!             }
!             if(paramCount >= 7 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[6], &dbltemp)))
!             {
!                 ent->dot_rate[i] = (int)dbltemp;
!             }
!             if(paramCount >= 8 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[7], &dbltemp)))
!             {
!                 ent->dot_atk[i] = (int)dbltemp;
!             }
!             if(paramCount >= 9)
!             {
!                 ent->dot_owner[i] = (entity *)varlist[8]->ptrVal;
!             }
!         }
!         break;
!     }
!     case _ep_edelay:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.edelay.mode = (LONG)ltemp;
!         }
!         if(paramCount >= 3 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->modeldata.edelay.factor = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[4], &ltemp)))
!         {
!             ent->modeldata.edelay.cap.min = (LONG)ltemp;
!         }
!         if(paramCount >= 5 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[5], &ltemp)))
!         {
!             ent->modeldata.edelay.cap.max = (LONG)ltemp;
!         }
!         if(paramCount >= 6 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[6], &ltemp)))
!         {
!             ent->modeldata.edelay.range.min = (LONG)ltemp;
!         }
!         if(paramCount >= 7 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[7], &ltemp)))
!         {
!             ent->modeldata.edelay.range.max = (LONG)ltemp;
!         }
! 
!         break;
!     }
!     case _ep_edge:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->edge = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_edgerange:
      {
          if(varlist[2]->vt != VT_INTEGER)
          {
***************
*** 6076,8181 ****
              }
          }
          break;
!     }
!     case _ep_energycost:
!     {
!         if(paramCount != 5)
!         {
!             printf("\n Error, changeentityproperty({ent}, 'energycost', {subproperty}, {animation}, {value}): Invalid or missing parameter. \n");
!             goto changeentityproperty_error;
!         }
! 
!         if(FAILED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             printf("\n Error, changeentityproperty has invalid animation id.\n");
!             goto changeentityproperty_error;
!         }
! 
!         i = (LONG)ltemp;
! 
!         if(!validanim(ent, i))
!         {
!             printf("\n Error, changeentityproperty({ent}, 'energycost', {subproperty}, {animation}, {value}): {animation} parameter invalid. Make sure the animation exists. \n");
!             goto changeentityproperty_error;
!         }
! 
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             printf("You must give a string value for energycost flag name.\n");
!             goto changeentityproperty_error;
!         }
! 
!         switch(varlist[2]->lVal)
!         {
!         case _ep_energycost_cost:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[4], &ltemp)))
!             {
!                 if(ent->modeldata.animation[i]->energycost)
!                 {
!                     ent->modeldata.animation[i]->energycost->cost = ltemp;
!                 }
! 
!             }
!             break;
!         }
!         case _ep_energycost_disable:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[4], &ltemp)))
!             {
!                 if(ent->modeldata.animation[i]->energycost)
!                 {
!                     ent->modeldata.animation[i]->energycost->disable = ltemp;
!                 }
!             }
!             break;
!         }
!         case _ep_energycost_mponly:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[4], &ltemp)))
!             {
!                 if(ent->modeldata.animation[i]->energycost)
!                 {
!                     ent->modeldata.animation[i]->energycost->mponly = ltemp;
!                 }
!             }
!             break;
!         }
!         default:
!             printf("Unknown Energycost flag.\n");
!             goto changeentityproperty_error;
!         }
!         break;
!     }
!     case _ep_escapecount:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->escapecount = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_escapehits:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.escapehits = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_facing:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.facing = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_falldie:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.falldie = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_playerindex:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->playerindex = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_pain_time:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->pain_time = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_freezetime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->freezetime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_frozen:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->frozen = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_gfxshadow:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.gfxshadow = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_shadowbase:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.shadowbase = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_grabforce:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.grabforce = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_guardpoints:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.guardpoints.current = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_hasplatforms:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.hasPlatforms = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_health:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->energy_status.health_current = (LONG)ltemp;
!             if(ent->energy_status.health_current > ent->modeldata.health)
!             {
!                 ent->energy_status.health_current = ent->modeldata.health;
!             }
!             else if(ent->energy_status.health_current < 0)
!             {
!                 ent->energy_status.health_current = 0;
!             }
!         }
!         break;
!     }
!     case _ep_hitbyid:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->attack_id_incoming = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_hitheadplatform:
!     {
!         ent->hithead = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_landedplatform:
!     {
!         ent->landed_on_platform = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_hitwall:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->hitwall = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_hmapl:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.maps.hide_start = ltemp;
!         }
!         break;
!     }
!     case _ep_hmapu:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.maps.hide_end = ltemp;
!         }
!         break;
!     }
!     case _ep_hostile:
!     {
!         ent->modeldata.hostile = 0;
!         for(i = 2; i < paramCount; i++)
!         {
!             if(varlist[i]->vt == VT_INTEGER) // known entity type
!             {
!                 ltemp = varlist[i]->lVal;
!                 if(ltemp & 0x80000000)
!                 {
!                     ent->modeldata.hostile |= entitytypes[ltemp & 0x7fffffff];
!                 }
!                 else
!                 {
!                     ent->modeldata.hostile |= ltemp;
!                 }
!             }
!             else
!             {
!                 printf("You must pass one or more string constants for hostile entity type.\n");
!                 goto changeentityproperty_error;
!             }
!         }
! 
!         break;
!     }
!     case _ep_iconposition:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.icon.position.x = (LONG)ltemp;
!         }
!         if(paramCount > 3 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             ent->modeldata.icon.position.y = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_invincible:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->invincible = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_invinctime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->invinctime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_jugglepoints:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.jugglepoints.current = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_jumpheight:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.jumpheight = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_jumpmovex:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.jumpmovex = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_jumpmovez:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.jumpmovex = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_jumpspeed:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.jumpspeed = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_knockdowncount:
!     {
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             if(varlist[2]->vt != VT_STR)
!                 printf("You must provide a string value for Knockdowncount subproperty:\n\
!                     changeentityproperty({ent}, 'knockdowncount', {subproperty}, {value})\n\
!                     ~'current'\n\
!                     ~'max'\n\
!                     ~'time'\n");
!             goto changeentityproperty_error;
!         }
! 
!         switch(varlist[2]->lVal)
!         {
!         case _ep_knockdowncount_current:
!         {
!             if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!             {
!                 ent->knockdowncount = (DOUBLE)dbltemp;
!             }
!             break;
!         }
!         case _ep_knockdowncount_max:
!         {
!             if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!             {
!                 ent->modeldata.knockdowncount = (DOUBLE)dbltemp;
!             }
!             break;
!             case _ep_knockdowncount_time:
!                 if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!                 {
!                     ent->knockdowntime = (LONG)ltemp;
!                 }
!                 break;
!             }
!         default:
!             printf("Unknown knockdowncount subproperty.\n");
!             goto changeentityproperty_error;
!         }
!         break;
!     }
!     case _ep_komap:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.maps.ko = (LONG)ltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             ent->modeldata.maps.kotype = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_lifeposition:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.hpx = (LONG)ltemp;
!         }
!         if(paramCount > 3 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             ent->modeldata.hpy = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_lifespancountdown:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->lifespancountdown = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_attackthrottle:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.attackthrottle = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_attackthrottletime:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.attackthrottletime = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_map:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent_set_colourmap(ent, (LONG)ltemp);
!         }
!         break;
!     }
!     case _ep_maptime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->maptime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_maxguardpoints:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.guardpoints.max = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_maxhealth:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.health = (LONG)ltemp;
!             if(ent->modeldata.health < 0)
!             {
!                 ent->modeldata.health = 0;    //OK, no need to have ot below 0
!             }
!         }
!         break;
!     }
!     case _ep_maxjugglepoints:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.jugglepoints.max = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_maxmp:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.mp = (LONG)ltemp;
!             if(ent->modeldata.mp < 0)
!             {
!                 ent->modeldata.mp = 0;    //OK, no need to have ot below 0
!             }
!         }
!         break;
!     }
!     case _ep_model:
!     {
!         if(varlist[2]->vt != VT_STR)
!         {
!             printf("You must give a string value for model name.\n");
!             goto changeentityproperty_error;
!         }
!         tempstr = (char *)StrCache_Get(varlist[2]->strVal);
!         if(paramCount > 3 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             set_model_ex(ent, tempstr, -1, NULL, (LONG)ltemp);
!             if(!ent->weapent)
!             {
!                 ent->weapent = ent;
!             }
!         }
!         break;
!     }
!     case _ep_mp:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->energy_status.mp_current = (LONG)ltemp;
!             if(ent->energy_status.mp_current > ent->modeldata.mp)
!             {
!                 ent->energy_status.mp_current = ent->modeldata.mp;
!             }
!             else if(ent->energy_status.mp_current < 0)
!             {
!                 ent->energy_status.mp_current = 0;
!             }
!         }
!         break;
!     }
!     case _ep_mpset:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.mp = (int)dbltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->modeldata.mpstable = (int)dbltemp;
!         }
!         if(paramCount >= 5 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp)))
!         {
!             ent->modeldata.mpstableval = (int)dbltemp;
!         }
!         if(paramCount >= 6 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[5], &dbltemp)))
!         {
!             ent->modeldata.mprate = (int)dbltemp;
!         }
!         if(paramCount >= 7 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[6], &dbltemp)))
!         {
!             ent->modeldata.mpdroprate = (int)dbltemp;
!         }
!         if(paramCount >= 8 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[7], &dbltemp)))
!         {
!             ent->modeldata.chargerate = (int)dbltemp;
!         }
!         break;
!     }
!     case _ep_name:
!     {
!         if(varlist[2]->vt != VT_STR)
!         {
!             printf("You must give a string value for entity name.\n");
!             goto changeentityproperty_error;
!         }
!         strcpy(ent->name, (char *)StrCache_Get(varlist[2]->strVal));
!         break;
!     }
!     case _ep_nameposition:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.namex = (LONG)ltemp;
!         }
!         if(paramCount > 3 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             ent->modeldata.namey = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nextanim:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->nextanim = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nextmove:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->nextmove = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nextthink:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->nextthink = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_no_adjust_base:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.no_adjust_base = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_noaicontrol:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->noaicontrol = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nodieblink:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.nodieblink = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nodrop:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.nodrop = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nograb:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->nograb = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nohithead:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.nohithead = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nolife:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.nolife = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nopain:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.nopain = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_offense:
!     {
!         if(paramCount >= 4 &&
!                 SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) &&
!                 ltemp < (LONG)MAX_ATKS && ltemp >= (LONG)0 &&
!                 SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->offense_factors[(LONG)ltemp] = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_offscreen_noatk_factor:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.offscreen_noatk_factor = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_offscreenkill:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.offscreenkill = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_opponent:
!     {
!         ent->opponent = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_custom_target:
!     {
!         ent->custom_target = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_owner:
!     {
!         ent->owner = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_parent:
!     {
!         ent->parent = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_pathfindstep:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.pathfindstep = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_position:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->position.x = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->position.z = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 5 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp)))
!         {
!             ent->position.y = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_x:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->position.x = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_z:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->position.z = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_a:
!     case _ep_y:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->position.y = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_projectile:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->projectile = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_projectilehit:
!     {
!         ent->modeldata.projectilehit = 0;
! 
!         for(i = 2; i < paramCount; i++)
!         {
!             if(varlist[i]->vt == VT_INTEGER) // known entity type
!             {
!                 ltemp = varlist[i]->lVal;
!                 if(ltemp & 0x80000000)
!                 {
!                     ent->modeldata.projectilehit |= entitytypes[ltemp & 0x7fffffff];
!                 }
!                 else
!                 {
!                     ent->modeldata.projectilehit |= ltemp;
!                 }
!             }
!             else
!             {
!                 printf("You must pass one or more string constants for projectilehit entity type.\n");
!                 goto changeentityproperty_error;
!             }
!         }
! 
!         break;
!     }
!     case _ep_running:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.runspeed = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->modeldata.runjumpheight = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 5 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp)))
!         {
!             ent->modeldata.runjumpdist = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 6 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[5], &dbltemp)))
!         {
!             ent->modeldata.runhold = (int)dbltemp;
!         }
!         if(paramCount >= 7 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[6], &dbltemp)))
!         {
!             ent->modeldata.runupdown = (int)dbltemp;
!         }
! 
!         break;
!     }
!     case _ep_rush_count:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->rush.count.current = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_rush_tally:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->rush.count.max = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_rush_time:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->rush.time = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_score:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.score = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_scroll:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.scroll = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_seal:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->seal = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_sealtime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->sealtime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_setlayer:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.setlayer = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_sortid:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->sortid = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_speed:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.speed = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_spritea:
!     {
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             if(varlist[2]->vt != VT_STR)
!                 printf("You must provide a string value for Sprite Array subproperty:\n\
!                     changeentityproperty({ent}, 'spritea', {subproperty}, {animation ID}, {frame}, {value})\n\
!                     ~'centerx'\n\
!                     ~'centery'\n\
!                     ~'file'\n\
!                     ~'offsetx'\n\
!                     ~'sprite'\n");
!             goto changeentityproperty_error;
!         }
! 
!         ltemp   = varlist[2]->lVal;
! 
!         /*
!         Failsafe checks. Any attempt to access a sprite property on invalid frame would cause instant shutdown.
!         */
!         if(!validanim(ent, varlist[3]->lVal) || !(ent->modeldata.animation[varlist[3]->lVal]->numframes >= varlist[4]->lVal) || paramCount < 5)
!         {
!             break;
!         }
! 
!         i = ent->modeldata.animation[varlist[3]->lVal]->sprite[varlist[4]->lVal];   //Get sprite index.
! 
!         switch(ltemp)
!         {
!         case _ep_spritea_centerx:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[5], &ltemp)))
!             {
!                 sprite_map[i].centerx = (LONG)ltemp;
!             }
! 
!             break;
!         }
!         case _ep_spritea_centery:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[5], &ltemp)))
!             {
!                 sprite_map[i].centery = (LONG)ltemp;
!             }
!             break;
!         }
!         case _ep_spritea_file:
!         {
!             if(varlist[5]->vt != VT_STR)
!             {
!                 printf("You must provide a string value for file name.\n");
!                 goto changeentityproperty_error;
!             }
!             strcpy(sprite_map[i].node->filename, (char *)StrCache_Get(varlist[5]->strVal));
!             break;
!         }
!         /*
!         case _ep_spritea_offsetx:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[5], &ltemp)))
!             {
!                 sprite_map[i].ofsx = (LONG)ltemp;
!                 (*pretvar)->lVal = (LONG)1;
!             }
!             break;
!         }
!         case _ep_spritea_offsety:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!             {
!                 sprite_map[i].ofsy = (LONG)ltemp;
!                 (*pretvar)->lVal = (LONG)1;
!             }
!             break;
!         }*/
!         case _ep_spritea_sprite:
!         {
!             sprite_map[i].node->sprite = (VOID *)varlist[5]->ptrVal;
! 
!             break;
!         }
!         default:
!             printf("Unknown Sprite Array subproperty.\n");
!             goto changeentityproperty_error;
!         }
!         break;
!     }
!     case _ep_stalltime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->stalltime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_releasetime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->releasetime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_staydown:
!     {
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             if(varlist[2]->vt != VT_STR)
!                 printf("You must provide a string value for Staydown subproperty:\n\
!                     changeentityproperty({ent}, 'staydown', {subproperty}, {value})\n\
!                     ~'rise'\n\
!                     ~'riseattack'\n\
!                     ~'riseattack_stall'\n");
!             goto changeentityproperty_error;
!         }
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         switch(varlist[2]->lVal)
!         {
!         case _ep_staydown_rise:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!             {
!                 ent->staydown.rise = (LONG)ltemp;
!             }
!             break;
!         }
!         case _ep_staydown_riseattack:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!             {
!                 ent->staydown.riseattack = (LONG)ltemp;
!             }
!             break;
!         }
!         case _ep_staydown_riseattack_stall:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!             {
!                 ent->staydown.riseattack_stall = (LONG)ltemp;
!             }
!             break;
!         }
!         default:
!             printf("Unknown Staydown subproperty.\n");
!             goto changeentityproperty_error;
!         }
!         break;
!     }
!     case _ep_stealth:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.stealth.hide = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subentity:
!     {
!         if(ent->subentity)
!         {
!             ent->subentity->parent = NULL;
!         }
!         ent->subentity = (entity *)varlist[2]->ptrVal;
!         if(ent->subentity)
!         {
!             ent->subentity->parent = ent;
!         }
!         break;
!     }
!     case _ep_subject_to_basemap:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_basemap = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_gravity:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_gravity = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_hole:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_hole = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_maxz:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_maxz = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_minz:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_minz = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_obstacle:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_obstacle = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_platform:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_platform = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_screen:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_screen = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_wall:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_wall = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subtype:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subtype = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_takeaction:
!     {
!         //if(varlist[2]->vt == VT_STRING)
!         if(varlist[2]->vt == VT_EMPTY)
!         {
!             // UT: changed this to only accept NULL(), otherwise the log file is filled with warnings
!             ent->takeaction = NULL;
!             break;
!         }
!         else if(varlist[2]->vt != VT_INTEGER)
!         {
!             printf("You must give a string value for action type.\n");
!             goto changeentityproperty_error;
!         }
! 
!         // otherwise, the parameter is a known action
!         ltemp = varlist[2]->lVal;
!         if((ltemp >= 0) && (ltemp < _ep_ta_the_end))
!         {
!             ent->takeaction = actions[(LONG)ltemp];
!         }
! 
!         break;
!     }
!     case _ep_think:
!     {
!         //if(varlist[2]->vt == VT_STRING)
!         if(varlist[2]->vt == VT_EMPTY)
!         {
!             // UT: changed this to only accept NULL(), otherwise the log file is filled with warnings
!             break;
!         }
!         else if(varlist[2]->vt != VT_INTEGER)
!         {
!             printf("You must give a string value for think type.\n");
!             goto changeentityproperty_error;
!         }
! 
!         // otherwise, the parameter is a known action
!         ltemp = varlist[2]->lVal;
!         if((ltemp >= 0) && (ltemp < _ep_th_the_end))
!         {
!             ent->think = think[(LONG)ltemp];
!         }
! 
!         break;
!     }
!     case _ep_thold:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.thold = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_throwdamage:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.throwdamage = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_throwdist:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.throwdist = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_throwframewait:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.throwframewait = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_throwheight:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.throwheight = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_tosstime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->toss_time = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_trymove:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             if(ltemp == 1)
!             {
!                 ent->trymove = common_trymove;
!             }
!             else if(ltemp == 2)
!             {
!                 ent->trymove = player_trymove;
!             }
!             else
!             {
!                 ent->trymove = NULL;
!             }
!         }
!         break;
!     }
!     case _ep_type:
!     {
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             printf("You must provide a type constant for type.\n");
!             goto changeentityproperty_error;
!         }
! 
!         ltemp = varlist[2]->lVal;
!         ent->modeldata.type = (LONG)ltemp;
! 
!         break;
!     }
!     case _ep_velocity:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->velocity.x = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->velocity.z = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 5 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp)))
!         {
!             ent->velocity.y = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_walkoffmovex:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.walkoffmovex = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_walkoffmovez:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.walkoffmovez = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_weapnum:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.weapnum = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_weaploss:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.weaploss[0] = (LONG)ltemp;
!         }
! 
!         if(paramCount >= 4)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!             {
!                 printf("You must specify the flag value.\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!             ent->modeldata.weaploss[1] = (LONG)ltemp2;
!         }
!         break;
!     }
!     case _ep_weapon:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ltemp2 = (LONG)0;
!             if(paramCount < 4 ||  SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!             {
!                 set_weapon(ent, (LONG)ltemp, (LONG)ltemp2);
!             }
!         }
!         break;
!     }
!     default:
!         //printf("Property name '%s' is not supported by function changeentityproperty.\n", propname);
!         goto changeentityproperty_error;
!         break;
!     }
! 
!     return S_OK;
! changeentityproperty_error:
!     return E_FAIL;
! }
! 
! //tossentity(entity, height, speedx, speedz)
! HRESULT openbor_tossentity(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL;
!     DOUBLE height = 0, speedx = 0, speedz = 0;
! 
!     if(paramCount < 1)
!     {
!         goto toss_error;
!     }
! 
!     ent = (entity *)varlist[0]->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         goto toss_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)1;
! 
!     if(paramCount >= 2)
!     {
!         ScriptVariant_DecimalValue(varlist[1], &height);
!     }
!     if(paramCount >= 3)
!     {
!         ScriptVariant_DecimalValue(varlist[2], &speedx);
!     }
!     if(paramCount >= 4)
!     {
!         ScriptVariant_DecimalValue(varlist[3], &speedz);
!     }
! 
!     ent->velocity.x = (float)speedx;
!     ent->velocity.z = (float)speedz;
!     toss(ent, (float)height);
!     return S_OK;
! 
! toss_error:
!     printf("Function tossentity(entity,height, speedx, speedz) requires at least a valid entity handle.\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // ===== getplayerproperty =====
! enum playerproperty_enum
! {
!     _pp_colourmap,
!     _pp_combokey,
!     _pp_combostep,
!     _pp_credits,
!     _pp_disablekeys,
!     _pp_ent,
!     _pp_entity,
!     _pp_hasplayed,
!     _pp_hmapl,
!     _pp_hmapu,
!     _pp_inputtime,
!     _pp_joining,
!     _pp_keys,
!     _pp_lives,
!     _pp_mapcount,
!     _pp_name,
!     _pp_newkeys,
!     _pp_numweapons,
!     _pp_playkeys,
!     _pp_releasekeys,
!     _pp_score,
!     _pp_spawnhealth,
!     _pp_spawnmp,
!     _pp_weapnum,
!     _pp_weapon,
!     _pp_the_end
! };
! 
! int mapstrings_playerproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname;
!     int prop;
! 
!     static const char *proplist[] =
!     {
!         "colourmap",
!         "combokey",
!         "combostep",
!         "credits",
!         "disablekeys",
!         "ent",
!         "entity",
!         "hasplayed",
!         "hmapl",
!         "hmapu",
!         "inputtime",
!         "joining",
!         "keys",
!         "lives",
!         "mapcount",
!         "name",
!         "newkeys",
!         "numweapons",
!         "playkeys",
!         "releasekeys",
!         "score",
!         "spawnhealth",
!         "spawnmp",
!         "weapnum",
!         "weapon",
!     };
! 
!     if(paramCount < 2)
!     {
!         return 1;
!     }
! 
!     // property name
!     MAPSTRINGS(varlist[1], proplist, _pp_the_end,
!                "Player property name '%s' is not supported yet.\n");
! 
!     return 1;
! }
! 
! //getplayerproperty(index, propname);
! HRESULT openbor_getplayerproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     int index;
!     entity *ent = NULL;
!     int prop = -1;
!     ScriptVariant *arg = NULL;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     mapstrings_playerproperty(varlist, paramCount);
!     ScriptVariant_Clear(*pretvar);
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!     {
!         index = 0;
!     }
!     else
!     {
!         index = (LONG)ltemp;
!     }
! 
! 
!     ent = player[index].ent;
! 
!     arg = varlist[1];
!     if(arg->vt != VT_INTEGER)
!     {
!         if(arg->vt != VT_STR)
!         {
!             printf("Function call getplayerproperty has invalid propery name parameter, it must be a string value.\n");
!         }
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     prop = arg->lVal;
! 
!     switch(prop)
!     {
!     case _pp_ent:
!     case _pp_entity:
!     {
!         if(!ent)
!         {
!             ScriptVariant_Clear(*pretvar);    // player not spawned
!         }
!         else
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent;
!         }
!         break;
!     }
!     case _pp_name:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(player[index].name);
!         break;
!     }
!     case _pp_colourmap:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].colourmap;
!         break;
!     }
!     case _pp_score:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].score;
!         break;
!     }
!     case _pp_hasplayed:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].hasplayed;
!         break;
!     }
!     case _pp_spawnhealth:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].spawnhealth;
!         break;
!     }
!     case _pp_spawnmp:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].spawnmp;
!         break;
!     }
!     case _pp_lives:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].lives;
!         break;
!     }
!     case _pp_disablekeys:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].disablekeys;
!         break;
!     }
!     case _pp_playkeys:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].playkeys;
!         break;
!     }
!     case _pp_keys:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].keys;
!         break;
!     }
!     case _pp_newkeys:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].newkeys;
!         break;
!     }
!     case _pp_releasekeys:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].releasekeys;
!         break;
!     }
!     case _pp_credits:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         if(noshare)
!         {
!             (*pretvar)->lVal = (LONG)player[index].credits;
!         }
!         else
!         {
!             (*pretvar)->lVal = credits;
!         }
!         break;
!     }
!     case _pp_weapnum:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].weapnum;
!         break;
!     }
!     case _pp_numweapons:
!     {
!         int cacheindex;
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         if ( stricmp(player[index].name,"") != 0 ) {
!             cacheindex = get_cached_model_index(player[index].name);
!             if ( cacheindex == -1 )
!             {
!                (*pretvar)->lVal = (LONG)0;
!                break;
!             }
!         } else
!         {
!            (*pretvar)->lVal = (LONG)0;
!            break;
!         }
! 
!         (*pretvar)->lVal = (LONG)model_cache[cacheindex].model->numweapons;
!         break;
!     }
!     case _pp_joining:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].joining;
!         break;
!     }
!     case _pp_combokey:
!     {
!         ScriptVariant *frm = NULL;
!         frm = varlist[2];
!         if(frm->vt != VT_INTEGER)
!         {
!             printf("Need a combostep value number for this property.\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].combokey[frm->lVal];
!         break;
!     }
!     case _pp_combostep:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].combostep;
!         break;
!     }
!     case _pp_inputtime:
!     {
!         ScriptVariant *frm = NULL;
!         frm = varlist[2];
!         if(frm->vt != VT_INTEGER)
!         {
!             printf("Need a combostep value number for this property.\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].inputtime[frm->lVal];
!         break;
!     }
!     case _pp_hmapl:
!     {
!         int cacheindex;
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         if ( stricmp(player[index].name,"") != 0 ) {
!             cacheindex = get_cached_model_index(player[index].name);
!             if ( cacheindex == -1 )
!             {
!                (*pretvar)->lVal = (LONG)0;
!                break;
!             }
!         } else
!         {
!            (*pretvar)->lVal = (LONG)0;
!            break;
!         }
! 
!         (*pretvar)->lVal = (LONG)model_cache[cacheindex].model->maps.hide_start;
!         break;
!     }
!     case _pp_hmapu:
!     {
!         int cacheindex;
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         if ( stricmp(player[index].name,"") != 0 ) {
!             cacheindex = get_cached_model_index(player[index].name);
!             if ( cacheindex == -1 )
!             {
!                (*pretvar)->lVal = (LONG)0;
!                break;
!             }
!         } else
!         {
!            (*pretvar)->lVal = (LONG)0;
!            break;
!         }
! 
!         (*pretvar)->lVal = (LONG)model_cache[cacheindex].model->maps.hide_end;
!         break;
!     }
!     case _pp_mapcount:
!     {
!         int cacheindex;
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         if ( stricmp(player[index].name,"") != 0 ) {
!             cacheindex = get_cached_model_index(player[index].name);
!             if ( cacheindex == -1 )
!             {
!                (*pretvar)->lVal = (LONG)0;
!                break;
!             }
!         } else
!         {
!            (*pretvar)->lVal = (LONG)0;
!            break;
!         }
! 
!         (*pretvar)->lVal = (LONG)(model_cache[cacheindex].model->maps_loaded + 1);
!         break;
      }
      default:
!     {
!         //printf("Property name '%s' is not supported by function getplayerproperty.\n", propname);
!         *pretvar = NULL;
!         return E_FAIL;
!         break;
!     }
!     //this property is not known
!     //default:{
!     //  .....
!     //}
!     }
!     return S_OK;
! }
! 
! 
! //changeplayerproperty(index, propname, value[, value2, value3,...]);
! HRESULT openbor_changeplayerproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp, ltemp2;
!     int index;
!     entity *ent = NULL;
!     int prop = -1;
!     char *tempstr = NULL;
!     static char buffer[64];
!     ScriptVariant *arg = NULL;
! 
!     *pretvar = NULL;
!     if(paramCount < 3)
!     {
!         printf("Function changeplayerproperty must have at least 3 arguments.\n");
!         return E_FAIL;
!     }
! 
!     mapstrings_playerproperty(varlist, paramCount);
!     arg = varlist[0];
! 
!     if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!     {
!         index = 0;
!     }
!     else
!     {
!         index = (LONG)ltemp;
!     }
! 
!     ent = player[index].ent;
! 
!     if(varlist[1]->vt != VT_INTEGER)
!     {
!         if(varlist[1]->vt != VT_STR)
!         {
!             printf("You must give a string value for player property name.\n");
!         }
!         return E_FAIL;
!     }
!     prop = varlist[1]->lVal;
! 
!     arg = varlist[2];
! 
!     //change the model
!     switch(prop)
!     {
!     case _pp_ent:
!     case _pp_entity:
!     {
!         if(arg->vt == VT_PTR || arg->vt == VT_EMPTY)
!         {
!             player[index].ent = (entity *)arg->ptrVal;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_weapon:
!     {
!         if(ent)
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!             {
!                 if(paramCount > 3)
!                 {
!                     if(FAILED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!                     {
!                         goto cpperror;
!                     }
!                 }
!                 else
!                 {
!                     ltemp2 = (LONG)0;
!                 }
!                 set_weapon(player[index].ent, (LONG)ltemp, (LONG)ltemp2);
!             }
!             else
!             {
!                 goto cpperror;
!             }
!         }
!         break;
!     }
!     case _pp_weapnum:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].weapnum = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_name:
!     {
!         if(arg->vt != VT_STR)
!         {
!             goto cpperror;
!         }
!         tempstr = (char *)StrCache_Get(arg->strVal);
!         strcpy(player[index].name, tempstr);
!         break;
!     }
!     case _pp_colourmap:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].colourmap = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_score:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             if(ltemp < 0)
!             {
!                 ltemp = 0;
!             }
!             else if(ltemp > 999999999)
!             {
!                 ltemp = 999999999;
!             }
!             player[index].score = (unsigned int)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_hasplayed:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].hasplayed = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_spawnhealth:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].spawnhealth = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_spawnmp:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].spawnmp = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_lives:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].lives = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_disablekeys:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].disablekeys = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_playkeys:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].playkeys = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_keys:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].keys = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_newkeys:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             player[index].newkeys = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_credits:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             if(noshare)
!             {
!                 player[index].credits = (LONG)ltemp;
!             }
!             else
!             {
!                 credits = (LONG)ltemp;
!             }
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_joining:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             player[index].joining = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_releasekeys:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             player[index].releasekeys = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_combokey:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             ScriptVariant *value = NULL;
!             value = varlist[3];
!             if(value->vt != VT_INTEGER)
!             {
!                 printf("Need a value and combostep value for this property.\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!             player[index].combokey[ltemp] = (int)value->lVal;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_combostep:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             player[index].combostep = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_inputtime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             ScriptVariant *value = NULL;
!             value = varlist[3];
!             if(value->vt != VT_INTEGER)
!             {
!                 printf("Need a value and combostep value number for this property.\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!             player[index].inputtime[ltemp] = (int)value->lVal;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     default:
!         printf("Invalid property name for function changeplayerproperty.\n");
!         return E_FAIL;
!     }
! 
!     return S_OK;
! cpperror:
!     ScriptVariant_ToString(arg, buffer);
!     printf("Function changeplayerproperty receives an invalid value: %s.\n", buffer);
!     return E_FAIL;
  }
  
  //this method is used by script engine, we move it here
--- 6078,8183 ----
              }
          }
          break;
!     }
!     case _ep_energycost:
!     {
!         if(paramCount != 5)
!         {
!             printf("\n Error, changeentityproperty({ent}, 'energycost', {subproperty}, {animation}, {value}): Invalid or missing parameter. \n");
!             goto changeentityproperty_error;
!         }
! 
!         if(FAILED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             printf("\n Error, changeentityproperty has invalid animation id.\n");
!             goto changeentityproperty_error;
!         }
! 
!         i = (LONG)ltemp;
! 
!         if(!validanim(ent, i))
!         {
!             printf("\n Error, changeentityproperty({ent}, 'energycost', {subproperty}, {animation}, {value}): {animation} parameter invalid. Make sure the animation exists. \n");
!             goto changeentityproperty_error;
!         }
! 
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             printf("You must give a string value for energycost flag name.\n");
!             goto changeentityproperty_error;
!         }
! 
!         switch(varlist[2]->lVal)
!         {
!         case _ep_energycost_cost:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[4], &ltemp)))
!             {
!                 if(ent->modeldata.animation[i]->energycost)
!                 {
!                     ent->modeldata.animation[i]->energycost->cost = ltemp;
!                 }
! 
!             }
!             break;
!         }
!         case _ep_energycost_disable:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[4], &ltemp)))
!             {
!                 if(ent->modeldata.animation[i]->energycost)
!                 {
!                     ent->modeldata.animation[i]->energycost->disable = ltemp;
!                 }
!             }
!             break;
!         }
!         case _ep_energycost_mponly:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[4], &ltemp)))
!             {
!                 if(ent->modeldata.animation[i]->energycost)
!                 {
!                     ent->modeldata.animation[i]->energycost->mponly = ltemp;
!                 }
!             }
!             break;
!         }
!         default:
!             printf("Unknown Energycost flag.\n");
!             goto changeentityproperty_error;
!         }
!         break;
!     }
!     case _ep_escapecount:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->escapecount = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_escapehits:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.escapehits = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_facing:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.facing = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_falldie:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.falldie = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_playerindex:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->playerindex = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_pain_time:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->pain_time = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_freezetime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->freezetime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_frozen:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->frozen = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_gfxshadow:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.gfxshadow = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_shadowbase:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.shadowbase = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_grabforce:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.grabforce = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_guardpoints:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.guardpoints.current = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_hasplatforms:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.hasPlatforms = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_health:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->energy_status.health_current = (LONG)ltemp;
!             if(ent->energy_status.health_current > ent->modeldata.health)
!             {
!                 ent->energy_status.health_current = ent->modeldata.health;
!             }
!             else if(ent->energy_status.health_current < 0)
!             {
!                 ent->energy_status.health_current = 0;
!             }
!         }
!         break;
!     }
!     case _ep_hitbyid:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->attack_id_incoming = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_hitheadplatform:
!     {
!         ent->hithead = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_landedplatform:
!     {
!         ent->landed_on_platform = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_hitwall:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->hitwall = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_hmapl:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.maps.hide_start = ltemp;
!         }
!         break;
!     }
!     case _ep_hmapu:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.maps.hide_end = ltemp;
!         }
!         break;
!     }
!     case _ep_hostile:
!     {
!         ent->modeldata.hostile = 0;
!         for(i = 2; i < paramCount; i++)
!         {
!             if(varlist[i]->vt == VT_INTEGER) // known entity type
!             {
!                 ltemp = varlist[i]->lVal;
!                 if(ltemp & 0x80000000)
!                 {
!                     ent->modeldata.hostile |= entitytypes[ltemp & 0x7fffffff];
!                 }
!                 else
!                 {
!                     ent->modeldata.hostile |= ltemp;
!                 }
!             }
!             else
!             {
!                 printf("You must pass one or more string constants for hostile entity type.\n");
!                 goto changeentityproperty_error;
!             }
!         }
! 
!         break;
!     }
!     case _ep_iconposition:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.icon.position.x = (LONG)ltemp;
!         }
!         if(paramCount > 3 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             ent->modeldata.icon.position.y = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_invincible:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->invincible = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_invinctime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->invinctime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_jugglepoints:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.jugglepoints.current = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_jumpheight:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.jumpheight = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_jumpmovex:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.jumpmovex = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_jumpmovez:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.jumpmovex = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_jumpspeed:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.jumpspeed = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_knockdowncount:
!     {
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             if(varlist[2]->vt != VT_STR)
!                 printf("You must provide a string value for Knockdowncount subproperty:\n\
!                     changeentityproperty({ent}, 'knockdowncount', {subproperty}, {value})\n\
!                     ~'current'\n\
!                     ~'max'\n\
!                     ~'time'\n");
!             goto changeentityproperty_error;
!         }
! 
!         switch(varlist[2]->lVal)
!         {
!         case _ep_knockdowncount_current:
!         {
!             if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!             {
!                 ent->knockdowncount = (DOUBLE)dbltemp;
!             }
!             break;
!         }
!         case _ep_knockdowncount_max:
!         {
!             if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!             {
!                 ent->modeldata.knockdowncount = (DOUBLE)dbltemp;
!             }
!             break;
!             case _ep_knockdowncount_time:
!                 if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!                 {
!                     ent->knockdowntime = (LONG)ltemp;
!                 }
!                 break;
!             }
!         default:
!             printf("Unknown knockdowncount subproperty.\n");
!             goto changeentityproperty_error;
!         }
!         break;
!     }
!     case _ep_komap:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.maps.ko = (LONG)ltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             ent->modeldata.maps.kotype = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_lifeposition:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.hpx = (LONG)ltemp;
!         }
!         if(paramCount > 3 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             ent->modeldata.hpy = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_lifespancountdown:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->lifespancountdown = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_attackthrottle:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.attackthrottle = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_attackthrottletime:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.attackthrottletime = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_map:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent_set_colourmap(ent, (LONG)ltemp);
!         }
!         break;
!     }
!     case _ep_maptime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->maptime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_maxguardpoints:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.guardpoints.max = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_maxhealth:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.health = (LONG)ltemp;
!             if(ent->modeldata.health < 0)
!             {
!                 ent->modeldata.health = 0;    //OK, no need to have ot below 0
!             }
!         }
!         break;
!     }
!     case _ep_maxjugglepoints:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.jugglepoints.max = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_maxmp:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.mp = (LONG)ltemp;
!             if(ent->modeldata.mp < 0)
!             {
!                 ent->modeldata.mp = 0;    //OK, no need to have ot below 0
!             }
!         }
!         break;
!     }
!     case _ep_model:
!     {
!         if(varlist[2]->vt != VT_STR)
!         {
!             printf("You must give a string value for model name.\n");
!             goto changeentityproperty_error;
!         }
!         tempstr = (char *)StrCache_Get(varlist[2]->strVal);
!         if(paramCount > 3 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             set_model_ex(ent, tempstr, -1, NULL, (LONG)ltemp);
!             if(!ent->weapent)
!             {
!                 ent->weapent = ent;
!             }
!         }
!         break;
!     }
!     case _ep_mp:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->energy_status.mp_current = (LONG)ltemp;
!             if(ent->energy_status.mp_current > ent->modeldata.mp)
!             {
!                 ent->energy_status.mp_current = ent->modeldata.mp;
!             }
!             else if(ent->energy_status.mp_current < 0)
!             {
!                 ent->energy_status.mp_current = 0;
!             }
!         }
!         break;
!     }
!     case _ep_mpset:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.mp = (int)dbltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->modeldata.mpstable = (int)dbltemp;
!         }
!         if(paramCount >= 5 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp)))
!         {
!             ent->modeldata.mpstableval = (int)dbltemp;
!         }
!         if(paramCount >= 6 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[5], &dbltemp)))
!         {
!             ent->modeldata.mprate = (int)dbltemp;
!         }
!         if(paramCount >= 7 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[6], &dbltemp)))
!         {
!             ent->modeldata.mpdroprate = (int)dbltemp;
!         }
!         if(paramCount >= 8 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[7], &dbltemp)))
!         {
!             ent->modeldata.chargerate = (int)dbltemp;
!         }
!         break;
!     }
!     case _ep_name:
!     {
!         if(varlist[2]->vt != VT_STR)
!         {
!             printf("You must give a string value for entity name.\n");
!             goto changeentityproperty_error;
!         }
!         strcpy(ent->name, (char *)StrCache_Get(varlist[2]->strVal));
!         break;
!     }
!     case _ep_nameposition:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.namex = (LONG)ltemp;
!         }
!         if(paramCount > 3 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!         {
!             ent->modeldata.namey = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nextanim:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->nextanim = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nextmove:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->nextmove = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nextthink:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->nextthink = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_no_adjust_base:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.no_adjust_base = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_noaicontrol:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->noaicontrol = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nodieblink:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.nodieblink = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nodrop:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.nodrop = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nograb:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->nograb = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nohithead:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.nohithead = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nolife:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.nolife = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_nopain:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.nopain = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_offense:
!     {
!         if(paramCount >= 4 &&
!                 SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) &&
!                 ltemp < (LONG)MAX_ATKS && ltemp >= (LONG)0 &&
!                 SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->offense_factors[(LONG)ltemp] = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_offscreen_noatk_factor:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.offscreen_noatk_factor = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_offscreenkill:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.offscreenkill = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_opponent:
!     {
!         ent->opponent = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_custom_target:
!     {
!         ent->custom_target = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_owner:
!     {
!         ent->owner = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_parent:
!     {
!         ent->parent = (entity *)varlist[2]->ptrVal;
!         break;
!     }
!     case _ep_pathfindstep:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.pathfindstep = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_position:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->position.x = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->position.z = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 5 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp)))
!         {
!             ent->position.y = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_x:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->position.x = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_z:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->position.z = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_a:
!     case _ep_y:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->position.y = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_projectile:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->projectile = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_projectilehit:
!     {
!         ent->modeldata.projectilehit = 0;
! 
!         for(i = 2; i < paramCount; i++)
!         {
!             if(varlist[i]->vt == VT_INTEGER) // known entity type
!             {
!                 ltemp = varlist[i]->lVal;
!                 if(ltemp & 0x80000000)
!                 {
!                     ent->modeldata.projectilehit |= entitytypes[ltemp & 0x7fffffff];
!                 }
!                 else
!                 {
!                     ent->modeldata.projectilehit |= ltemp;
!                 }
!             }
!             else
!             {
!                 printf("You must pass one or more string constants for projectilehit entity type.\n");
!                 goto changeentityproperty_error;
!             }
!         }
! 
!         break;
!     }
!     case _ep_running:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.runspeed = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->modeldata.runjumpheight = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 5 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp)))
!         {
!             ent->modeldata.runjumpdist = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 6 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[5], &dbltemp)))
!         {
!             ent->modeldata.runhold = (int)dbltemp;
!         }
!         if(paramCount >= 7 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[6], &dbltemp)))
!         {
!             ent->modeldata.runupdown = (int)dbltemp;
!         }
! 
!         break;
!     }
!     case _ep_rush_count:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->rush.count.current = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_rush_tally:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->rush.count.max = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_rush_time:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->rush.time = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_score:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.score = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_scroll:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.scroll = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_seal:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->seal = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_sealtime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->sealtime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_setlayer:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.setlayer = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_sortid:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->sortid = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_speed:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.speed = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_spritea:
!     {
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             if(varlist[2]->vt != VT_STR)
!                 printf("You must provide a string value for Sprite Array subproperty:\n\
!                     changeentityproperty({ent}, 'spritea', {subproperty}, {animation ID}, {frame}, {value})\n\
!                     ~'centerx'\n\
!                     ~'centery'\n\
!                     ~'file'\n\
!                     ~'offsetx'\n\
!                     ~'sprite'\n");
!             goto changeentityproperty_error;
!         }
! 
!         ltemp   = varlist[2]->lVal;
! 
!         /*
!         Failsafe checks. Any attempt to access a sprite property on invalid frame would cause instant shutdown.
!         */
!         if(!validanim(ent, varlist[3]->lVal) || !(ent->modeldata.animation[varlist[3]->lVal]->numframes >= varlist[4]->lVal) || paramCount < 5)
!         {
!             break;
!         }
! 
!         i = ent->modeldata.animation[varlist[3]->lVal]->sprite[varlist[4]->lVal];   //Get sprite index.
! 
!         switch(ltemp)
!         {
!         case _ep_spritea_centerx:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[5], &ltemp)))
!             {
!                 sprite_map[i].centerx = (LONG)ltemp;
!             }
! 
!             break;
!         }
!         case _ep_spritea_centery:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[5], &ltemp)))
!             {
!                 sprite_map[i].centery = (LONG)ltemp;
!             }
!             break;
!         }
!         case _ep_spritea_file:
!         {
!             if(varlist[5]->vt != VT_STR)
!             {
!                 printf("You must provide a string value for file name.\n");
!                 goto changeentityproperty_error;
!             }
!             strcpy(sprite_map[i].node->filename, (char *)StrCache_Get(varlist[5]->strVal));
!             break;
!         }
!         /*
!         case _ep_spritea_offsetx:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[5], &ltemp)))
!             {
!                 sprite_map[i].ofsx = (LONG)ltemp;
!                 (*pretvar)->lVal = (LONG)1;
!             }
!             break;
!         }
!         case _ep_spritea_offsety:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!             {
!                 sprite_map[i].ofsy = (LONG)ltemp;
!                 (*pretvar)->lVal = (LONG)1;
!             }
!             break;
!         }*/
!         case _ep_spritea_sprite:
!         {
!             sprite_map[i].node->sprite = (VOID *)varlist[5]->ptrVal;
! 
!             break;
!         }
!         default:
!             printf("Unknown Sprite Array subproperty.\n");
!             goto changeentityproperty_error;
!         }
!         break;
!     }
!     case _ep_stalltime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->stalltime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_releasetime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->releasetime = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_staydown:
!     {
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             if(varlist[2]->vt != VT_STR)
!                 printf("You must provide a string value for Staydown subproperty:\n\
!                     changeentityproperty({ent}, 'staydown', {subproperty}, {value})\n\
!                     ~'rise'\n\
!                     ~'riseattack'\n\
!                     ~'riseattack_stall'\n");
!             goto changeentityproperty_error;
!         }
!         if(paramCount < 4)
!         {
!             break;
!         }
! 
!         switch(varlist[2]->lVal)
!         {
!         case _ep_staydown_rise:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!             {
!                 ent->staydown.rise = (LONG)ltemp;
!             }
!             break;
!         }
!         case _ep_staydown_riseattack:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!             {
!                 ent->staydown.riseattack = (LONG)ltemp;
!             }
!             break;
!         }
!         case _ep_staydown_riseattack_stall:
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!             {
!                 ent->staydown.riseattack_stall = (LONG)ltemp;
!             }
!             break;
!         }
!         default:
!             printf("Unknown Staydown subproperty.\n");
!             goto changeentityproperty_error;
!         }
!         break;
!     }
!     case _ep_stealth:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.stealth.hide = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subentity:
!     {
!         if(ent->subentity)
!         {
!             ent->subentity->parent = NULL;
!         }
!         ent->subentity = (entity *)varlist[2]->ptrVal;
!         if(ent->subentity)
!         {
!             ent->subentity->parent = ent;
!         }
!         break;
!     }
!     case _ep_subject_to_basemap:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_basemap = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_gravity:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_gravity = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_hole:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_hole = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_maxz:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_maxz = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_minz:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_minz = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_obstacle:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_obstacle = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_platform:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_platform = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_screen:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_screen = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subject_to_wall:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subject_to_wall = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_subtype:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.subtype = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_takeaction:
!     {
!         //if(varlist[2]->vt == VT_STRING)
!         if(varlist[2]->vt == VT_EMPTY)
!         {
!             // UT: changed this to only accept NULL(), otherwise the log file is filled with warnings
!             ent->takeaction = NULL;
!             break;
!         }
!         else if(varlist[2]->vt != VT_INTEGER)
!         {
!             printf("You must give a string value for action type.\n");
!             goto changeentityproperty_error;
!         }
! 
!         // otherwise, the parameter is a known action
!         ltemp = varlist[2]->lVal;
!         if((ltemp >= 0) && (ltemp < _ep_ta_the_end))
!         {
!             ent->takeaction = actions[(LONG)ltemp];
!         }
! 
!         break;
!     }
!     case _ep_think:
!     {
!         //if(varlist[2]->vt == VT_STRING)
!         if(varlist[2]->vt == VT_EMPTY)
!         {
!             // UT: changed this to only accept NULL(), otherwise the log file is filled with warnings
!             break;
!         }
!         else if(varlist[2]->vt != VT_INTEGER)
!         {
!             printf("You must give a string value for think type.\n");
!             goto changeentityproperty_error;
!         }
! 
!         // otherwise, the parameter is a known action
!         ltemp = varlist[2]->lVal;
!         if((ltemp >= 0) && (ltemp < _ep_th_the_end))
!         {
!             ent->think = think[(LONG)ltemp];
!         }
! 
!         break;
!     }
!     case _ep_thold:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.thold = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_throwdamage:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.throwdamage = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_throwdist:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.throwdist = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_throwframewait:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.throwframewait = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_throwheight:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->modeldata.throwheight = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_tosstime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->toss_time = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_trymove:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             if(ltemp == 1)
!             {
!                 ent->trymove = common_trymove;
!             }
!             else if(ltemp == 2)
!             {
!                 ent->trymove = player_trymove;
!             }
!             else
!             {
!                 ent->trymove = NULL;
!             }
!         }
!         break;
!     }
!     case _ep_type:
!     {
!         if(varlist[2]->vt != VT_INTEGER)
!         {
!             printf("You must provide a type constant for type.\n");
!             goto changeentityproperty_error;
!         }
! 
!         ltemp = varlist[2]->lVal;
!         ent->modeldata.type = (LONG)ltemp;
! 
!         break;
!     }
!     case _ep_velocity:
!     {
!         if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!         {
!             ent->velocity.x = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!         {
!             ent->velocity.z = (DOUBLE)dbltemp;
!         }
!         if(paramCount >= 5 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[4], &dbltemp)))
!         {
!             ent->velocity.y = (DOUBLE)dbltemp;
!         }
!         break;
!     }
!     case _ep_walkoffmovex:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.walkoffmovex = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_walkoffmovez:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.walkoffmovez = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_weapnum:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.weapnum = (LONG)ltemp;
!         }
!         break;
!     }
!     case _ep_weaploss:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ent->modeldata.weaploss[0] = (LONG)ltemp;
!         }
! 
!         if(paramCount >= 4)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!             {
!                 printf("You must specify the flag value.\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!             ent->modeldata.weaploss[1] = (LONG)ltemp2;
!         }
!         break;
!     }
!     case _ep_weapon:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             ltemp2 = (LONG)0;
!             if(paramCount < 4 ||  SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!             {
!                 set_weapon(ent, (LONG)ltemp, (LONG)ltemp2);
!             }
!         }
!         break;
      }
      default:
!         //printf("Property name '%s' is not supported by function changeentityproperty.\n", propname);
!         goto changeentityproperty_error;
!         break;
!     }
! 
!     return S_OK;
! changeentityproperty_error:
!     return E_FAIL;
! }
! 
! //tossentity(entity, height, speedx, speedz)
! HRESULT openbor_tossentity(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL;
!     DOUBLE height = 0, speedx = 0, speedz = 0;
! 
!     if(paramCount < 1)
!     {
!         goto toss_error;
!     }
! 
!     ent = (entity *)varlist[0]->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         goto toss_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)1;
! 
!     if(paramCount >= 2)
!     {
!         ScriptVariant_DecimalValue(varlist[1], &height);
!     }
!     if(paramCount >= 3)
!     {
!         ScriptVariant_DecimalValue(varlist[2], &speedx);
!     }
!     if(paramCount >= 4)
!     {
!         ScriptVariant_DecimalValue(varlist[3], &speedz);
!     }
! 
!     ent->velocity.x = (float)speedx;
!     ent->velocity.z = (float)speedz;
!     toss(ent, (float)height);
!     return S_OK;
! 
! toss_error:
!     printf("Function tossentity(entity,height, speedx, speedz) requires at least a valid entity handle.\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // ===== getplayerproperty =====
! enum playerproperty_enum
! {
!     _pp_colourmap,
!     _pp_combokey,
!     _pp_combostep,
!     _pp_credits,
!     _pp_disablekeys,
!     _pp_ent,
!     _pp_entity,
!     _pp_hasplayed,
!     _pp_hmapl,
!     _pp_hmapu,
!     _pp_inputtime,
!     _pp_joining,
!     _pp_keys,
!     _pp_lives,
!     _pp_mapcount,
!     _pp_name,
!     _pp_newkeys,
!     _pp_numweapons,
!     _pp_playkeys,
!     _pp_releasekeys,
!     _pp_score,
!     _pp_spawnhealth,
!     _pp_spawnmp,
!     _pp_weapnum,
!     _pp_weapon,
!     _pp_the_end
! };
! 
! int mapstrings_playerproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname;
!     int prop;
! 
!     static const char *proplist[] =
!     {
!         "colourmap",
!         "combokey",
!         "combostep",
!         "credits",
!         "disablekeys",
!         "ent",
!         "entity",
!         "hasplayed",
!         "hmapl",
!         "hmapu",
!         "inputtime",
!         "joining",
!         "keys",
!         "lives",
!         "mapcount",
!         "name",
!         "newkeys",
!         "numweapons",
!         "playkeys",
!         "releasekeys",
!         "score",
!         "spawnhealth",
!         "spawnmp",
!         "weapnum",
!         "weapon",
!     };
! 
!     if(paramCount < 2)
!     {
!         return 1;
!     }
! 
!     // property name
!     MAPSTRINGS(varlist[1], proplist, _pp_the_end,
!                "Player property name '%s' is not supported yet.\n");
! 
!     return 1;
! }
! 
! //getplayerproperty(index, propname);
! HRESULT openbor_getplayerproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     int index;
!     entity *ent = NULL;
!     int prop = -1;
!     ScriptVariant *arg = NULL;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     mapstrings_playerproperty(varlist, paramCount);
!     ScriptVariant_Clear(*pretvar);
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!     {
!         index = 0;
!     }
!     else
!     {
!         index = (LONG)ltemp;
!     }
! 
! 
!     ent = player[index].ent;
! 
!     arg = varlist[1];
!     if(arg->vt != VT_INTEGER)
!     {
!         if(arg->vt != VT_STR)
!         {
!             printf("Function call getplayerproperty has invalid propery name parameter, it must be a string value.\n");
!         }
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     prop = arg->lVal;
! 
!     switch(prop)
!     {
!     case _pp_ent:
!     case _pp_entity:
!     {
!         if(!ent)
!         {
!             ScriptVariant_Clear(*pretvar);    // player not spawned
!         }
!         else
!         {
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (VOID *)ent;
!         }
!         break;
!     }
!     case _pp_name:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(player[index].name);
!         break;
!     }
!     case _pp_colourmap:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].colourmap;
!         break;
!     }
!     case _pp_score:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].score;
!         break;
!     }
!     case _pp_hasplayed:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].hasplayed;
!         break;
!     }
!     case _pp_spawnhealth:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].spawnhealth;
!         break;
!     }
!     case _pp_spawnmp:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].spawnmp;
!         break;
!     }
!     case _pp_lives:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].lives;
!         break;
!     }
!     case _pp_disablekeys:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].disablekeys;
!         break;
!     }
!     case _pp_playkeys:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].playkeys;
!         break;
!     }
!     case _pp_keys:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].keys;
!         break;
!     }
!     case _pp_newkeys:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].newkeys;
!         break;
!     }
!     case _pp_releasekeys:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].releasekeys;
!         break;
!     }
!     case _pp_credits:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         if(noshare)
!         {
!             (*pretvar)->lVal = (LONG)player[index].credits;
!         }
!         else
!         {
!             (*pretvar)->lVal = credits;
!         }
!         break;
!     }
!     case _pp_weapnum:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].weapnum;
!         break;
!     }
!     case _pp_numweapons:
!     {
!         int cacheindex;
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         if ( stricmp(player[index].name,"") != 0 ) {
!             cacheindex = get_cached_model_index(player[index].name);
!             if ( cacheindex == -1 )
!             {
!                (*pretvar)->lVal = (LONG)0;
!                break;
!             }
!         } else
!         {
!            (*pretvar)->lVal = (LONG)0;
!            break;
!         }
! 
!         (*pretvar)->lVal = (LONG)model_cache[cacheindex].model->numweapons;
!         break;
!     }
!     case _pp_joining:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].joining;
!         break;
!     }
!     case _pp_combokey:
!     {
!         ScriptVariant *frm = NULL;
!         frm = varlist[2];
!         if(frm->vt != VT_INTEGER)
!         {
!             printf("Need a combostep value number for this property.\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].combokey[frm->lVal];
!         break;
!     }
!     case _pp_combostep:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].combostep;
!         break;
!     }
!     case _pp_inputtime:
!     {
!         ScriptVariant *frm = NULL;
!         frm = varlist[2];
!         if(frm->vt != VT_INTEGER)
!         {
!             printf("Need a combostep value number for this property.\n");
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)player[index].inputtime[frm->lVal];
!         break;
!     }
!     case _pp_hmapl:
!     {
!         int cacheindex;
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         if ( stricmp(player[index].name,"") != 0 ) {
!             cacheindex = get_cached_model_index(player[index].name);
!             if ( cacheindex == -1 )
!             {
!                (*pretvar)->lVal = (LONG)0;
!                break;
!             }
!         } else
!         {
!            (*pretvar)->lVal = (LONG)0;
!            break;
!         }
! 
!         (*pretvar)->lVal = (LONG)model_cache[cacheindex].model->maps.hide_start;
!         break;
!     }
!     case _pp_hmapu:
!     {
!         int cacheindex;
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         if ( stricmp(player[index].name,"") != 0 ) {
!             cacheindex = get_cached_model_index(player[index].name);
!             if ( cacheindex == -1 )
!             {
!                (*pretvar)->lVal = (LONG)0;
!                break;
!             }
!         } else
!         {
!            (*pretvar)->lVal = (LONG)0;
!            break;
!         }
! 
!         (*pretvar)->lVal = (LONG)model_cache[cacheindex].model->maps.hide_end;
!         break;
!     }
!     case _pp_mapcount:
!     {
!         int cacheindex;
! 
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!         if ( stricmp(player[index].name,"") != 0 ) {
!             cacheindex = get_cached_model_index(player[index].name);
!             if ( cacheindex == -1 )
!             {
!                (*pretvar)->lVal = (LONG)0;
!                break;
!             }
!         } else
!         {
!            (*pretvar)->lVal = (LONG)0;
!            break;
!         }
! 
!         (*pretvar)->lVal = (LONG)(model_cache[cacheindex].model->maps_loaded + 1);
!         break;
!     }
!     default:
!     {
!         //printf("Property name '%s' is not supported by function getplayerproperty.\n", propname);
!         *pretvar = NULL;
!         return E_FAIL;
!         break;
!     }
!     //this property is not known
!     //default:{
!     //  .....
!     //}
!     }
!     return S_OK;
! }
! 
! 
! //changeplayerproperty(index, propname, value[, value2, value3,...]);
! HRESULT openbor_changeplayerproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp, ltemp2;
!     int index;
!     entity *ent = NULL;
!     int prop = -1;
!     char *tempstr = NULL;
!     static char buffer[64];
!     ScriptVariant *arg = NULL;
! 
!     *pretvar = NULL;
!     if(paramCount < 3)
!     {
!         printf("Function changeplayerproperty must have at least 3 arguments.\n");
!         return E_FAIL;
!     }
! 
!     mapstrings_playerproperty(varlist, paramCount);
!     arg = varlist[0];
! 
!     if(FAILED(ScriptVariant_IntegerValue(arg, &ltemp)))
!     {
!         index = 0;
!     }
!     else
!     {
!         index = (LONG)ltemp;
!     }
! 
!     ent = player[index].ent;
! 
!     if(varlist[1]->vt != VT_INTEGER)
!     {
!         if(varlist[1]->vt != VT_STR)
!         {
!             printf("You must give a string value for player property name.\n");
!         }
!         return E_FAIL;
!     }
!     prop = varlist[1]->lVal;
! 
!     arg = varlist[2];
! 
!     //change the model
!     switch(prop)
!     {
!     case _pp_ent:
!     case _pp_entity:
!     {
!         if(arg->vt == VT_PTR || arg->vt == VT_EMPTY)
!         {
!             player[index].ent = (entity *)arg->ptrVal;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_weapon:
!     {
!         if(ent)
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!             {
!                 if(paramCount > 3)
!                 {
!                     if(FAILED(ScriptVariant_IntegerValue(varlist[3], &ltemp2)))
!                     {
!                         goto cpperror;
!                     }
!                 }
!                 else
!                 {
!                     ltemp2 = (LONG)0;
!                 }
!                 set_weapon(player[index].ent, (LONG)ltemp, (LONG)ltemp2);
!             }
!             else
!             {
!                 goto cpperror;
!             }
!         }
!         break;
!     }
!     case _pp_weapnum:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].weapnum = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_name:
!     {
!         if(arg->vt != VT_STR)
!         {
!             goto cpperror;
!         }
!         tempstr = (char *)StrCache_Get(arg->strVal);
!         strcpy(player[index].name, tempstr);
!         break;
!     }
!     case _pp_colourmap:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].colourmap = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_score:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             if(ltemp < 0)
!             {
!                 ltemp = 0;
!             }
!             else if(ltemp > 999999999)
!             {
!                 ltemp = 999999999;
!             }
!             player[index].score = (unsigned int)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_hasplayed:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].hasplayed = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_spawnhealth:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].spawnhealth = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_spawnmp:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].spawnmp = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_lives:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].lives = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_disablekeys:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].disablekeys = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_playkeys:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].playkeys = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_keys:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             player[index].keys = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_newkeys:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             player[index].newkeys = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_credits:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             if(noshare)
!             {
!                 player[index].credits = (LONG)ltemp;
!             }
!             else
!             {
!                 credits = (LONG)ltemp;
!             }
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_joining:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             player[index].joining = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_releasekeys:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             player[index].releasekeys = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_combokey:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             ScriptVariant *value = NULL;
!             value = varlist[3];
!             if(value->vt != VT_INTEGER)
!             {
!                 printf("Need a value and combostep value for this property.\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!             player[index].combokey[ltemp] = (int)value->lVal;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_combostep:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             player[index].combostep = (LONG)ltemp;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     case _pp_inputtime:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg,&ltemp)))
!         {
!             ScriptVariant *value = NULL;
!             value = varlist[3];
!             if(value->vt != VT_INTEGER)
!             {
!                 printf("Need a value and combostep value number for this property.\n");
!                 *pretvar = NULL;
!                 return E_FAIL;
!             }
!             player[index].inputtime[ltemp] = (int)value->lVal;
!         }
!         else
!         {
!             goto cpperror;
!         }
!         break;
!     }
!     default:
!         printf("Invalid property name for function changeplayerproperty.\n");
!         return E_FAIL;
!     }
! 
!     return S_OK;
! cpperror:
!     ScriptVariant_ToString(arg, buffer);
!     printf("Function changeplayerproperty receives an invalid value: %s.\n", buffer);
!     return E_FAIL;
  }
  
  //this method is used by script engine, we move it here
***************
*** 8380,8387 ****
          break;
      case _sv_in_selectscreen:
          ScriptVariant_ChangeType(var, VT_INTEGER);
!         var->lVal = selectScreen;
!         break;
      case _sv_lasthita:
      case _sv_lasthity:
          ScriptVariant_ChangeType(var, VT_DECIMAL);
--- 8382,8390 ----
          break;
      case _sv_in_selectscreen:
          ScriptVariant_ChangeType(var, VT_INTEGER);
!         //var->lVal = selectScreen;
!         var->lVal = finisheds_games_count;
! 	break;
      case _sv_lasthita:
      case _sv_lasthity:
          ScriptVariant_ChangeType(var, VT_DECIMAL);
***************
*** 8427,8433 ****
      case _sv_hresolution:
          ScriptVariant_ChangeType(var, VT_INTEGER);
          var->lVal = videomodes.hRes;
!         break;
      case _sv_vresolution:
          ScriptVariant_ChangeType(var, VT_INTEGER);
          var->lVal = videomodes.vRes;
--- 8430,8437 ----
      case _sv_hresolution:
          ScriptVariant_ChangeType(var, VT_INTEGER);
          var->lVal = videomodes.hRes;
!         //var->lVal = finisheds_games_count;
! 	break;
      case _sv_vresolution:
          ScriptVariant_ChangeType(var, VT_INTEGER);
          var->lVal = videomodes.vRes;
***************
*** 9030,10967 ****
      }
  
      return 1;
- }
- 
- //checkhole(x,z,a), return 1 if there's hole here
- HRESULT openbor_checkhole(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
- {
-     ScriptVariant *arg = NULL;
-     DOUBLE x, z, a;
- 
-     if(paramCount < 2)
-     {
-         *pretvar = NULL;
-         return E_FAIL;
-     }
- 
-     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
-     (*pretvar)->lVal = (LONG)0;
- 
-     arg = varlist[0];
-     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
-     {
-         return S_OK;
-     }
- 
-     arg = varlist[1];
-     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
-     {
-         return S_OK;
-     }
- 
-     if ( paramCount >= 3 )
-     {
-         arg = varlist[2];
-         if(FAILED(ScriptVariant_DecimalValue(arg, &a)))
-         {
-             return S_OK;
-         }
- 
-         (*pretvar)->lVal = (LONG)(checkhole_in((float)x, (float)z, (float)a) && checkwall_index((float)x, (float)z) < 0);
-     }
-     else (*pretvar)->lVal = (LONG)(checkhole((float)x, (float)z) && checkwall_index((float)x, (float)z) < 0);
- 
-     return S_OK;
- }
- 
- //checkholeindex(x,z,a), return hole index if there's hole here, else it returns -1
- HRESULT openbor_checkholeindex(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
- {
-     ScriptVariant *arg = NULL;
-     DOUBLE x, z, a;
- 
-     if(paramCount < 2)
-     {
-         *pretvar = NULL;
-         return E_FAIL;
-     }
- 
-     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
-     (*pretvar)->lVal = (LONG)-1;
- 
-     arg = varlist[0];
-     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
-     {
-         return S_OK;
-     }
- 
-     arg = varlist[1];
-     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
-     {
-         return S_OK;
-     }
- 
-     if ( checkwall_index((float)x, (float)z) < 0 )
-     {
-         if ( paramCount >= 3 )
-         {
-             arg = varlist[2];
-             if(FAILED(ScriptVariant_DecimalValue(arg, &a)))
-             {
-                 return S_OK;
-             }
- 
-             (*pretvar)->lVal = (LONG)checkholeindex_in((float)x, (float)z, (float)a);
-         }
-         else (*pretvar)->lVal = (LONG)checkhole_index((float)x, (float)z);
-     }
- 
-     return S_OK;
  }
  
! //checkbase(x,z,y,entity), return base of terrain. -1 if there is a wall and no platform. entity param is optional.
  HRESULT openbor_checkbase(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
  {
!     ScriptVariant *arg = NULL;
      DOUBLE x, z, y;
      entity *ent = NULL;
!     float base = -1.0f;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     (*pretvar)->dblVal = (DOUBLE)base;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[2];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &y)))
!     {
!         return S_OK;
!     }
! 
!     if (paramCount > 3)
!     {
!         arg = varlist[3];
          /*if(arg->vt != VT_PTR && arg->vt != VT_EMPTY)
          {
              printf("Function checkbase must have a valid entity handle or NULL().\n");
              *pretvar = NULL;
              return E_FAIL;
          }*/
!         ent = (entity *)arg->ptrVal; //retrieve the entity
!     }
! 
!     if((base = checkbase((float)x, (float)z, (float)y, ent)) >= 0)
!     {
!         (*pretvar)->dblVal = (DOUBLE)base;
!     }
!     return S_OK;
! }
! 
! //checkwall(x,z), return wall height, or 0 | accept checkwall_index(x,z,y) too
! HRESULT openbor_checkwall(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, y;
!     int wall;
!     float h = T_MAX_CHECK_ALTITUDE;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     (*pretvar)->dblVal = (DOUBLE)0;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     if (paramCount > 2)
!     {
!         arg = varlist[2];
!         if(FAILED(ScriptVariant_DecimalValue(arg, &y)))
!         {
!             return S_OK;
!         }
!         h = (float)y;
!     }
! 
!     if((wall = checkwall_below((float)x, (float)z, (float)h)) >= 0)
!     {
!         (*pretvar)->dblVal = (DOUBLE)level->walls[wall].height;
!     }
!     return S_OK;
! }
! 
! //checkwallindex(x,z), return wall index, or -1 | accept checkwallindex(x,z,y) too
! HRESULT openbor_checkwallindex(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, y;
!     int wall;
!     float h = 100000;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)-1;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     if (paramCount > 2)
!     {
!         arg = varlist[2];
!         if(FAILED(ScriptVariant_DecimalValue(arg, &y)))
!         {
!             return S_OK;
!         }
!         h = (float)arg->dblVal;
!     }
! 
!     if((wall = checkwall_below((float)x, (float)z, (float)h)) >= 0)
!     {
!         (*pretvar)->lVal = (LONG)wall;
!     }
!     return S_OK;
! }
! 
! //checkplatformbelow(x,z,a), return the highest platfrom entity below
! HRESULT openbor_checkplatformbelow(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, a;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     //ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     //(*pretvar)->dblVal = (DOUBLE)0;
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)NULL;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[2];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &a)))
!     {
!         return S_OK;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)check_platform_below((float)x, (float)z, (float)a, NULL);
!     return S_OK;
! }
! 
! //checkplatformabove(x,z,a), find a lowest platform above this altitude
! HRESULT openbor_checkplatformabove(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, a;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     //ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     //(*pretvar)->dblVal = (DOUBLE)0;
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)NULL;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[2];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &a)))
!     {
!         return S_OK;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)check_platform_above((float)x, (float)z, (float)a, NULL);
!     return S_OK;
! }
! 
! //checkplatformbetween(x,z,a_min,a_max), find the first platform between these 2 altitudes
! HRESULT openbor_checkplatformbetween(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, amin, amax;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     //ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     //(*pretvar)->dblVal = (DOUBLE)0;
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)NULL;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[2];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &amin)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[3];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &amax)))
!     {
!         return S_OK;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)check_platform_between((float)x, (float)z, (float)amin, (float)amax, NULL);
!     return S_OK;
! }
! 
! //checkbasemap(x,z), return basemap height (float)
! HRESULT openbor_checkbasemap(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     (*pretvar)->dblVal = (DOUBLE)0;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     (*pretvar)->dblVal = (DOUBLE)check_basemap((float)x, (float)z);
! 
!     return S_OK;
! }
! 
! //checkbasemapindex(x,z), return basemap index in (x,z)
! HRESULT openbor_checkbasemapindex(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     (*pretvar)->dblVal = (DOUBLE)0;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     (*pretvar)->dblVal = (DOUBLE)check_basemap_index((float)x, (float)z);
! 
!     return S_OK;
! }
! 
! //generatebasemap(int map_index, float rx, float rz, float x_size, float z_size, float min_y, float max_y, int x_cont) to generate an inclined terrain
! HRESULT openbor_generatebasemap(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     DOUBLE rx, rz, x_size, z_size, min_y, max_y;
!     LONG index;
!     LONG x_cont = (LONG)0;
! 
!     if(paramCount < 7)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     if ( FAILED(ScriptVariant_IntegerValue(varlist[0], &index)) )
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     if(paramCount > 7)
!     {
!         if ( FAILED(ScriptVariant_IntegerValue(varlist[7], &x_cont)) )
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!     }
!     if ( FAILED(ScriptVariant_DecimalValue(varlist[1], &rx)) || FAILED(ScriptVariant_DecimalValue(varlist[2], &rz)) ||
!          FAILED(ScriptVariant_DecimalValue(varlist[3], &x_size)) || FAILED(ScriptVariant_DecimalValue(varlist[4], &z_size)) ||
!          FAILED(ScriptVariant_DecimalValue(varlist[5], &min_y)) || FAILED(ScriptVariant_DecimalValue(varlist[6], &max_y))
!     )
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     generate_basemap(index, rx, rz, x_size, z_size, min_y, max_y, x_cont);
! 
!     return S_OK;
! }
! 
! HRESULT openbor_openfilestream(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     char *filename = NULL;
!     ScriptVariant *arg = NULL;
!     LONG location = 0;
!     int fsindex;
! 
!     FILE *handle = NULL;
!     char path[MAX_BUFFER_LEN] = {""};
!     char tmpname[MAX_BUFFER_LEN] = {""};
!     long size;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     arg = varlist[0];
!     if(arg->vt != VT_STR)
!     {
!         printf("Filename for openfilestream must be a string.\n");
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     filename = (char *)StrCache_Get(arg->strVal);
! 
!     if(paramCount > 1)
!     {
!         arg = varlist[1];
!         if(FAILED(ScriptVariant_IntegerValue(arg, &location)))
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!     }
! 
!     for(fsindex = 0; fsindex < numfilestreams; fsindex++)
!     {
!         if(filestreams[fsindex].buf == NULL)
!         {
!             break;
!         }
!     }
! 
!     if(fsindex == numfilestreams)
!     {
!         __realloc(filestreams, numfilestreams); //warning, don't ++ here, its a macro
!         numfilestreams++;
!     }
! 
!     // Load file from saves directory if specified
!     if(location)
!     {
!         getBasePath(path, "Saves", 0);
!         getPakName(tmpname, -1);
!         strcat(path, tmpname);
!         strcat(path, "/");
!         strcat(path, filename);
!         //printf("open path: %s", path);
! #ifndef DC
!         if(!(fileExists(path)))
!         {
!             /*
!             2011_03_27, DC: Let's be a little more friendly about missing files; this will let a function evaluate if file exists and decide what to do.
! 
!             printf("Openfilestream - file specified does not exist.\n"); //Keep this for possible debug mode in the future.
!             */
!             (*pretvar)->lVal = -1;
! 
!             return S_OK;
!         }
! #endif
!         handle = fopen(path, "rb");
!         if(handle == NULL)
!         {
!             (*pretvar)->lVal = -1;
!             return S_OK;
!         }
!         //printf("\nfile opened\n");
!         fseek(handle, 0, SEEK_END);
!         size = ftell(handle);
!         //printf("\n file size %d fsindex %d\n", size, fsindex);
!         rewind(handle);
!         filestreams[fsindex].buf = malloc(sizeof(*filestreams[fsindex].buf) * (size + 1));
!         if(filestreams[fsindex].buf == NULL)
!         {
!             (*pretvar)->lVal = -1;
!             return S_OK;
!         }
!         fread(filestreams[fsindex].buf, 1, size, handle);
!         filestreams[fsindex].buf[size] = 0;
!         filestreams[fsindex].size = size;
!     }
!     else if(buffer_pakfile(filename, &filestreams[fsindex].buf, &filestreams[fsindex].size) != 1)
!     {
!         printf("Invalid filename used in openfilestream.\n");
!         (*pretvar)->lVal = -1;
!         return S_OK;
!     }
! 
!     (*pretvar)->lVal = (LONG)fsindex;
! 
!     filestreams[fsindex].pos = 0;
!     return S_OK;
! }
! 
! HRESULT openbor_getfilestreamline(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int length;
!     char *buf;
!     char *dst;
!     ScriptVariant *arg = NULL;
!     LONG filestreamindex;
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return S_OK;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_STR);
! 
!     length = 0;
!     buf = filestreams[filestreamindex].buf + filestreams[filestreamindex].pos;
!     while(buf[length] && buf[length] != '\n' && buf[length] != '\r')
!     {
!         ++length;
!     }
! 
!     (*pretvar)->strVal = StrCache_Pop(length);
!     dst = StrCache_Get((*pretvar)->strVal);
!     memcpy(dst, buf, length);
!     dst[length] = '\0';
! 
!     return S_OK;
! }
! 
! HRESULT openbor_getfilestreamargument(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     LONG filestreamindex, argument;
!     char *argtype = NULL;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &argument)))
!     {
!         return S_OK;
!     }
!     ScriptVariant_Clear(*pretvar);
! 
!     if(varlist[2]->vt != VT_STR)
!     {
!         printf("You must give a string value specifying what kind of value you want the argument converted to.\n");
!         return E_FAIL;
!     }
!     argtype = (char *)StrCache_Get(varlist[2]->strVal);
! 
!     if(stricmp(argtype, "string") == 0)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(findarg(filestreams[filestreamindex].buf + filestreams[filestreamindex].pos, argument));
!     }
!     else if(stricmp(argtype, "int") == 0)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)atoi(findarg(filestreams[filestreamindex].buf + filestreams[filestreamindex].pos, argument));
!     }
!     else if(stricmp(argtype, "float") == 0)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)atof(findarg(filestreams[filestreamindex].buf + filestreams[filestreamindex].pos, argument));
!     }
!     else if(stricmp(argtype, "byte") == 0) // By White Dragon
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)(readByte(filestreams[filestreamindex].buf + filestreams[filestreamindex].pos));
!     }
!     else
!     {
!         printf("Invalid type for argument converted to (getfilestreamargument).\n");
!         return E_FAIL;
!     }
! 
!     return S_OK;
! }
! 
! HRESULT openbor_filestreamnextline(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     char *buf;
!     size_t pos;
!     LONG filestreamindex;
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return S_OK;
!     }
!     pos = filestreams[filestreamindex].pos;
!     buf = filestreams[filestreamindex].buf;
!     while(buf[pos] && buf[pos] != '\n' && buf[pos] != '\r')
!     {
!         ++pos;
!     }
!     while(buf[pos] == '\n' || buf[pos] == '\r')
!     {
!         ++pos;
!     }
!     filestreams[filestreamindex].pos = pos;
! 
!     return S_OK;
! }
! 
! HRESULT openbor_getfilestreamposition(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     LONG filestreamindex;
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return S_OK;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)filestreams[filestreamindex].pos;
!     return S_OK;
! }
! 
! HRESULT openbor_setfilestreamposition(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     LONG filestreamindex, position;
! 
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &position)))
!     {
!         return S_OK;
!     }
! 
!     filestreams[filestreamindex].pos = position;
!     return S_OK;
! }
! 
! HRESULT openbor_filestreamappend(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG filestreamindex;
!     ScriptVariant *arg = NULL;
!     LONG appendtype = -1;
!     size_t len1, len2;
!     char *temp;
!     static char append[2048];
! 
!     *pretvar = NULL;
!     if(paramCount < 2)
!     {
!         goto append_error;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         goto append_error;
!     }
! 
!     if(paramCount >= 3)
!     {
!         arg = varlist[2];
!         if(FAILED(ScriptVariant_IntegerValue(arg, &appendtype)))
!         {
!             goto append_error;
!         }
!     }
! 
!     arg = varlist[1];
! 
!     /*
!      * By White Dragon to write a byte
!      */
!     if ( paramCount >= 4 )
!     {
!         char* argtype = NULL;
!         unsigned char byte = (unsigned char)0x00;
!         if ( varlist[3]->vt != VT_STR ) goto append_error;
! 
!         argtype = (char *)StrCache_Get(varlist[3]->strVal);
! 
!         if( stricmp(argtype, "byte") != 0 ) goto append_error;
!         else
!         {
!             int inc = -1; // if buf > 0 (prev bytes) you need to begin from size-1 (index)
! 
!             len1 = 1+1; // +1 is the NULL to close the buffer
!             len2 = filestreams[filestreamindex].size;
! 
!             filestreams[filestreamindex].buf = realloc( filestreams[filestreamindex].buf, sizeof(*temp)*(len1+len2+0) );
! 
!             byte = (unsigned char)varlist[1]->lVal;
!             //printf("a:%s->%d->%d\n",filestreams[filestreamindex].buf,byte,filestreams[filestreamindex].size);
! 
!             if ( len2 <= 0 ) inc = 0;
! 
!             filestreams[filestreamindex].buf[filestreams[filestreamindex].size+inc] = byte; // overwrite 0x00 byte
!             if (appendtype <= 1) filestreams[filestreamindex].buf[filestreams[filestreamindex].size+1+inc] = 0x00;
!             //printf("b:%s\n",filestreams[filestreamindex].buf);
! 
!             filestreams[filestreamindex].size = len1 + len2;
!         }
!     } else
!     {
!         ScriptVariant_ToString(arg, append);
! 
!         len1 = strlen(append);
!         len2 = filestreams[filestreamindex].size;
! 
!         filestreams[filestreamindex].buf = realloc(filestreams[filestreamindex].buf, sizeof(*temp) * (len1 + len2 + 4));
! 
!         if(appendtype == 0)
!         {
!             append[len1] = ' ';
!             append[++len1] = '\0';
!             strcpy(filestreams[filestreamindex].buf + len2, "\r\n");
!             len2 += 2;
!             strcpy(filestreams[filestreamindex].buf + len2, append);
!         }
!         else if(appendtype == 1)
!         {
!             append[len1] = ' ';
!             append[++len1] = '\0';
!             strcpy(filestreams[filestreamindex].buf + len2, append);
!         }
!         else
!         {
!             strcpy(filestreams[filestreamindex].buf + len2, append);
!         }
!         filestreams[filestreamindex].size = len1 + len2;
!     }
! 
!     return S_OK;
! 
! append_error:
!     return E_FAIL;
! 
! }
! 
! HRESULT openbor_createfilestream(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int fsindex;
!     ScriptVariant_Clear(*pretvar);
! 
!     for(fsindex = 0; fsindex < numfilestreams; fsindex++)
!     {
!         if(filestreams[fsindex].buf == NULL)
!         {
!             break;
!         }
!     }
! 
!     if(fsindex == numfilestreams)
!     {
!         __realloc(filestreams, numfilestreams); //warning, don't ++ here, its a macro
!         numfilestreams++;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)fsindex;
! 
!     // Initialize the new filestream
!     filestreams[fsindex].pos = 0;
!     filestreams[fsindex].size = 0;
!     filestreams[fsindex].buf = malloc(sizeof(*filestreams[fsindex].buf) * 128);
!     filestreams[fsindex].buf[0] = '\0';
!     return S_OK;
! }
! 
! HRESULT openbor_savefilestream(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG filestreamindex;
!     ScriptVariant *arg = NULL;
!     char *bytearg = NULL, *patharg = NULL;
!     FILE *handle = NULL;
!     char path[MAX_BUFFER_LEN] = {""};
!     char tmpname[MAX_BUFFER_LEN] = {""};
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         printf("You must give a valid filestrema handle for savefilestream!\n");
!         return E_FAIL;
!     }
! 
!     arg = varlist[1];
!     if(arg->vt != VT_STR)
!     {
!         printf("Filename for savefilestream must be a string.\n");
!         return E_FAIL;
!     }
! 
!     if (paramCount > 2)
!     {
!         patharg = (char *)StrCache_Get(varlist[2]->strVal);
!         if( varlist[2]->vt != VT_STR )
!         {
!             printf("The pathname parameter must be a string.\n");
!             return E_FAIL;
!         }
!     }
! 
!     if (paramCount > 3) // By White Dragon
!     {
!         bytearg = (char *)StrCache_Get(varlist[3]->strVal);
!         if( stricmp(bytearg, "byte") != 0 )
!         {
!             printf("%s parameter does not exist.\n",bytearg);
!             return E_FAIL;
!         }
!     }
! 
!     // Get the saves directory
!     if ( paramCount <= 2 || patharg == NULL )
!     {
!         getBasePath(path, "Saves", 0);
!         getPakName(tmpname, -1);
!         strcat(path, tmpname);
!         // Add user's filename to path and write the filestream to it
!         strcat(path, "/");
!     } else // By White Dragon
!     {
!         strcat(path, "./");
!         strcat(path, patharg);
!     }
!     //printf("path:%s\n",path);
! 
!     strcat(path, (char *)StrCache_Get(arg->strVal));
! 
!     for(i = strlen(path) - 1; i >= 0; i--)
!     {
! 
!         if(path[i] == '/' || path[i] == '\\')
!         {
!             path[i] = 0;
!             // Make folder if it doesn't exist
! #ifndef DC
!             dirExists(path, 1);
! #endif
!             path[i] = '/';
!             break;
!         }
!     }
! 
!     //printf("save path: %s", path);
!     handle = fopen(path, "wb");
!     if(handle == NULL)
!     {
!         return E_FAIL;
!     }
!     fwrite(filestreams[filestreamindex].buf, 1, strlen(filestreams[filestreamindex].buf), handle);
! 
!     // add blank line so it can be read successfully
!     if ( paramCount <= 3 || (paramCount > 3 && stricmp(bytearg, "byte") != 0 ) ) fwrite("\r\n", 1, 2, handle);
!     fclose(handle);
! 
!     return S_OK;
! }
! 
! HRESULT openbor_closefilestream(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG filestreamindex;
!     ScriptVariant *arg = NULL;
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return E_FAIL;
!     }
! 
! 
!     if(filestreams[filestreamindex].buf)
!     {
!         free(filestreams[filestreamindex].buf);
!         filestreams[filestreamindex].buf = NULL;
!     }
!     return S_OK;
! }
! //damageentity(entity, other, force, drop, type)
! HRESULT openbor_damageentity(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL;
!     entity *other = NULL;
!     entity *temp = NULL;
!     LONG force, drop, type;
!     s_collision_attack atk;
! 
!     if(paramCount < 1)
!     {
!         printf("Function requires at least 1 parameter.\n");
!         goto de_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)0;
! 
!     ent = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         printf("Invalid entity parameter.\n");
!         goto de_error;
!     }
! 
!     other = ent;
! 
!     if(paramCount >= 2 && varlist[1]->ptrVal)
!     {
!         other = (entity *)(varlist[1])->ptrVal;
!     }
! 
!     if(paramCount >= 3 )
!     {
!         force = (LONG)1;
!         drop = (LONG)0;
!         type = (LONG)ATK_NORMAL;
! 
!         if(FAILED(ScriptVariant_IntegerValue((varlist[2]), &force)))
!         {
!             printf("Wrong force value.\n");
!             goto de_error;
!         }
! 
!         if(paramCount >= 4)
!         {
!             if(FAILED(ScriptVariant_IntegerValue((varlist[3]), &drop)))
!             {
!                 printf("Wrong drop value.\n");
!                 goto de_error;
!             }
!         }
!         if(paramCount >= 5)
!         {
!             if(FAILED(ScriptVariant_IntegerValue((varlist[4]), &type)))
!             {
!                 printf("Wrong type value.\n");
!                 goto de_error;
!             }
!         }
! 
!         atk = emptyattack;
!         atk.attack_force = force;
!         atk.attack_drop = drop;
!         if(drop)
!         {
!             atk.dropv.y = (float)DEFAULT_ATK_DROPV_Y;
!             atk.dropv.x = (float)DEFAULT_ATK_DROPV_X;
!             atk.dropv.z = (float)DEFAULT_ATK_DROPV_Z;
!         }
!         atk.attack_type = type;
!     }
!     else
!     {
!         atk = attack;
!     }
! 
!     if(!ent->takedamage)
!     {
!         ent->energy_status.health_current -= atk.attack_force;
!         if(ent->energy_status.health_current <= 0)
!         {
!             kill_entity(ent);
!         }
!         (*pretvar)->lVal = (LONG)1;
!     }
!     else
!     {
!         temp = self;
!         self = ent;
!         (*pretvar)->lVal = (LONG)self->takedamage(other, &atk, 0);
!         self = temp;
!     }
!     return S_OK;
! 
! de_error:
!     *pretvar = NULL;
!     return E_FAIL;
  }
  
! //getcomputeddamage(defender, attacker, force, drop, type), it returns the real damage. Minimum 3 params (defender, attacker, force)
  HRESULT openbor_getcomputeddamage(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
  {
!     entity *defender = NULL;
      entity *attacker = NULL;
      entity *temp = NULL;
      LONG force, drop, type;
!     s_collision_attack atk;
! 
!     if(paramCount < 3)
!     {
!         printf("Function requires at least 3 parameters.\n");
!         goto gcd_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
      (*pretvar)->lVal = (LONG)0;
  
!     force = (LONG)0;
!     drop = (LONG)0;
!     type = (LONG)ATK_NORMAL;
! 
!     defender = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     if(!defender)
!     {
!         printf("Invalid entity parameter.\n");
!         goto gcd_error;
!     }
! 
!     if(varlist[1]->ptrVal)
!     {
!         attacker = (entity *)(varlist[1])->ptrVal;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue((varlist[2]), &force)))
!     {
!         printf("Wrong force value.\n");
!         goto gcd_error;
!     }
! 
!     if(paramCount >= 4)
!     {
!         if(FAILED(ScriptVariant_IntegerValue((varlist[3]), &drop)))
!         {
!             printf("Wrong drop value.\n");
!             goto gcd_error;
!         }
!     }
!     if(paramCount >= 5)
!     {
!         if(FAILED(ScriptVariant_IntegerValue((varlist[4]), &type)))
!         {
!             printf("Wrong type value.\n");
!             goto gcd_error;
!         }
!     }
! 
!     atk = emptyattack;
!     atk.attack_force = force;
!     atk.attack_drop = drop;
!     if(drop)
!     {
!         atk.dropv.y = (float)DEFAULT_ATK_DROPV_Y;
!         atk.dropv.x = (float)DEFAULT_ATK_DROPV_X;
!         atk.dropv.z = (float)DEFAULT_ATK_DROPV_Z;
!     }
      atk.attack_type = type;
  
!     temp = self;
      self = defender;
      (*pretvar)->lVal = (LONG)calculate_force_damage(attacker, &atk);
!     self = temp;
! 
!     return S_OK;
! 
! gcd_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //killentity(entity)
! HRESULT openbor_killentity(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL;
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     ent = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     if(ent == NULL)
!     {
!         (*pretvar)->lVal = (LONG)0;
!         return S_OK;
!     }
!     kill_entity(ent);
!     (*pretvar)->lVal = (LONG)1;
!     return S_OK;
! }
! 
! // dograb
! // Damon V. Caskey
! // 2013-12-30
! //
! // Enables initiation of the engine's default grab state between attacker and
! // target entities.
! //
! // dograb(ptr attacker, ptr target, int adjust);
! //
! // attacker: Entity attempting grab.
! // target: Entity to be grabbed.
! // adjustcheck: Engine's dograb adjust check flag.
! HRESULT openbor_dograb(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     #define SELF_NAME           "dograb(void attacker, void target, int adjust)"
!     #define ARG_MINIMUM         2
!     #define ARG_ATTACKER        0
!     #define ARG_TARGET          1
!     #define ARG_ADJUST          2
!     #define ARG_ADJUST_DEFAULT  1
! 
!     LONG adjust          = ARG_ADJUST_DEFAULT;   // dograb adjust check.
!     int result          = S_OK;                 // Function pass/fail result.
!     entity *attacker    = NULL;                 // Attacker entity (attempting grab)
!     entity *target      = NULL;                 // Target entity (to be grabbed)
! 
!     ScriptVariant_Clear(*pretvar);
! 
!     // Validate there are at least two parameters (attacker and target entities).
!     if(paramCount < ARG_MINIMUM)
!     {
!         goto error_local;
!     }
! 
!     // Get adjust check.
!     if(paramCount > ARG_ADJUST)
!     {
!         ScriptVariant_IntegerValue(varlist[ARG_ADJUST], &adjust);
!     }
! 
!     // Get attacking and target entity.
!     attacker = (entity *)(varlist[ARG_ATTACKER])->ptrVal;
!     target = (entity *)(varlist[ARG_TARGET])->ptrVal;
! 
!     // Validate entities.
!     if(!attacker && !target)
!     {
!         goto error_local;
!     }
! 
!     // Execute engine's grab function.
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = dograb(attacker, target, adjust);
! 
!     return result;
! 
!     // Error trap
!     error_local:
! 
!     result = E_FAIL;
!     printf("\nYou must provide valid entity handles and an optional adjustment: " SELF_NAME);
! 
!     // Return result.
!     return result;
! 
!     #undef SELF_NAME
!     #undef ARG_MINIMUM
!     #undef ARG_ATTACKER
!     #undef ARG_TARGET
!     #undef ARG_ADJUST
!     #undef ARG_ADJUST_DEFAULT
! }
! 
! //findtarget(entity, int animation);
! HRESULT openbor_findtarget(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG i = 0;
!     entity *ent = NULL;
!     entity *tempself, *target;
!     LONG anim = -1;
! 
!     if(paramCount > 2)
!     {
!         ScriptVariant_IntegerValue(varlist[2], &i);
!     }
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
! 
!     ent = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         ScriptVariant_Clear(*pretvar);
!         return S_OK;
!     }
!     if(paramCount > 1 && FAILED(ScriptVariant_IntegerValue(varlist[1], &anim)))
!     {
!         return E_FAIL;
!     }
!     tempself = self;
!     self = ent;
!     target = normal_find_target((int)anim, i);
!     if(!target)
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
!     else
!     {
!         (*pretvar)->ptrVal = (VOID *)target;
!     }
!     self = tempself;
!     return S_OK;
! }
! 
! //checkrange(entity, target, int ani);
! HRESULT openbor_checkrange(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL, *target = NULL;
!     LONG ani = 0;
!     extern int max_animations;
! 
!     if(paramCount < 2)
!     {
!         goto checkrange_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(varlist[0]->vt != VT_PTR || varlist[1]->vt != VT_PTR)
!     {
!         goto checkrange_error;
!     }
! 
!     ent = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     target = (entity *)(varlist[1])->ptrVal; //retrieve the target
! 
!     if(!ent || !target)
!     {
!         goto checkrange_error;
!     }
! 
!     if(paramCount > 2 && FAILED(ScriptVariant_IntegerValue(varlist[2], &ani)))
!     {
!         goto checkrange_error;
!     }
!     else if(paramCount <= 2)
!     {
!         ani = ent->animnum;
!     }
! 
!     if(ani < 0 || ani >= max_animations)
!     {
!         printf("Animation id out of range: %d / %d.\n", (int)ani, max_animations);
!         goto checkrange_error;
!     }
! 
!     (*pretvar)->lVal = check_range_target_all(ent, target, ani);
! 
!     return S_OK;
! 
! checkrange_error:
!     printf("Function needs at least 2 valid entity handles, the third parameter is optional: checkrange(entity, target, int animnum)\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //clearspawnentry();
! HRESULT openbor_clearspawnentry(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     memset(&spawnentry, 0, sizeof(spawnentry));
!     spawnentry.index = spawnentry.item_properties.index = spawnentry.weaponindex = -1;
!     return S_OK;
! }
! 
! // ===== setspawnentry =====
! enum setspawnentry_enum
! {
!     _sse_2phealth,
!     _sse_2pitem,
!     _sse_3phealth,
!     _sse_3pitem,
!     _sse_4phealth,
!     _sse_4pitem,
!     _sse_aggression,
!     _sse_alias,
!     _sse_alpha,
!     _sse_boss,
!     _sse_coords,
!     _sse_credit,
!     _sse_dying,
!     _sse_flip,
!     _sse_health,
!     _sse_item,
!     _sse_itemalias,
!     _sse_itemhealth,
!     _sse_itemmap,
!     _sse_map,
!     _sse_mp,
!     _sse_multiple,
!     _sse_name,
!     _sse_nolife,
!     _sse_parent,
!     _sse_type,
!     _sse_weapon,
!     _sse_the_end,
! };
! 
! int mapstrings_setspawnentry(ScriptVariant **varlist, int paramCount)
! {
!     char *propname;
!     int prop;
!     static const char *proplist[] =
!     {
!         "2phealth",
!         "2pitem",
!         "3phealth",
!         "3pitem",
!         "4phealth",
!         "4pitem",
!         "aggression",
!         "alias",
!         "alpha",
!         "boss",
!         "coords",
!         "credit",
!         "dying",
!         "flip",
!         "health",
!         "item",
!         "itemalias",
!         "itemhealth",
!         "itemmap",
!         "map",
!         "mp",
!         "multiple",
!         "name",
!         "nolife",
!         "parent",
!         "type",
!         "weapon",
!     };
! 
!     MAPSTRINGS(varlist[0], proplist, _sse_the_end,
!                "Property name '%s' is not supported by setspawnentry.\n");
! 
!     return 1;
! }
! 
! //setspawnentry(propname, value1[, value2, value3, ...]);
! HRESULT openbor_setspawnentry(ScriptVariant **varlist, ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     s_model *tempmodel;
!     DOUBLE dbltemp;
!     int temp, prop;
!     ScriptVariant *arg = NULL;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)1;
! 
!     mapstrings_setspawnentry(varlist, paramCount);
!     if(varlist[0]->vt != VT_INTEGER)
!     {
!         if(varlist[0]->vt != VT_STR)
!         {
!             printf("You must give a string value for spawn entry property name.\n");
!         }
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     prop = varlist[0]->lVal;
! 
!     arg = varlist[1];
! 
!     switch(prop)
!     {
!     case _sse_name:
!         if(arg->vt != VT_STR)
!         {
!             printf("You must use a string value for spawn entry's name property: function setspawnentry.\n");
!             goto setspawnentry_error;
!         }
!         spawnentry.model = findmodel((char *)StrCache_Get(arg->strVal));
!         break;
!     case _sse_alias:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         strcpy(spawnentry.alias, (char *)StrCache_Get(arg->strVal));
!         break;
!     case _sse_item:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         spawnentry.itemmodel = findmodel((char *)StrCache_Get(arg->strVal));
!         spawnentry.item = spawnentry.itemmodel->name;
!         spawnentry.item_properties.index = get_cached_model_index(spawnentry.item);
!         spawnentry.item_properties.player_count = 0;
!         break;
!     case _sse_2pitem:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         tempmodel = findmodel((char *)StrCache_Get(arg->strVal));
!         if(!tempmodel)
!         {
!             spawnentry.item = NULL;
!         }
!         else
!         {
!             spawnentry.item = tempmodel->name;
!         }
!         spawnentry.item_properties.player_count = 1;
!         break;
!     case _sse_3pitem:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         spawnentry.itemmodel = findmodel((char *)StrCache_Get(arg->strVal));
!         spawnentry.item_properties.player_count = 2;
!         break;
!     case _sse_4pitem:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         spawnentry.itemmodel = findmodel((char *)StrCache_Get(arg->strVal));
!         spawnentry.item_properties.player_count = 3;
!         break;
!     case _sse_health:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.health[0] = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_itemhealth:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.item_properties.health = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_itemalias:
!         if(arg->vt != VT_STR)
!         {
!             return E_FAIL;
!         }
!         strcpy(spawnentry.item_properties.alias, (char *)StrCache_Get(arg->strVal));
!         break;
!     case _sse_2phealth:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.health[1] = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_3phealth:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.health[2] = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_4phealth:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.health[3] = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_coords:
!         temp = 1;
!         if(SUCCEEDED(ScriptVariant_DecimalValue(arg, &dbltemp)))
!         {
!             spawnentry.position.x = (DOUBLE)dbltemp;
!         }
!         else
!         {
!             temp = 0;
!         }
!         if(paramCount >= 3 && temp)
!         {
!             if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!             {
!                 spawnentry.position.z = (DOUBLE)dbltemp;
!             }
!             else
!             {
!                 temp = 0;
!             }
!         }
!         if(paramCount >= 4 && temp)
!         {
!             if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!             {
!                 spawnentry.position.y = (DOUBLE)dbltemp;
!             }
!             else
!             {
!                 temp = 0;
!             }
!         }
!         (*pretvar)->lVal = (LONG)temp;
!         break;
!     case _sse_mp:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.mp = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_map:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.colourmap = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_itemmap:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.item_properties.colorset = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_alpha:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.alpha = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_multiple:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.multiple = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_dying:
!         temp = 1;
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.dying = (LONG)ltemp;
!         }
!         else
!         {
!             temp = 0;
!         }
!         if(paramCount >= 3 && temp)
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!             {
!                 spawnentry.per1 = (LONG)ltemp;
!             }
!             else
!             {
!                 temp = 0;
!             }
!         }
!         if(paramCount >= 4 && temp)
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!             {
!                 spawnentry.per2 = (LONG)ltemp;
!             }
!             else
!             {
!                 temp = 0;
!             }
!         }
!         (*pretvar)->lVal = (LONG)temp;
!         break;
!     case _sse_nolife:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.nolife = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_boss:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.boss = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_flip:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.flip = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_credit:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.credit = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_aggression:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.aggression = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_parent:
!         if( arg->vt == VT_PTR ) //&& arg->vt != VT_EMPTY
!         {
!             spawnentry.parent = (entity *)arg->ptrVal;
!         }
!         else
!         {
!             (*pretvar)->ptrVal = (VOID *)NULL;
!         }
!         break;
!     case _sse_type:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.entitytype = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_weapon:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         spawnentry.weaponmodel = findmodel((char *)StrCache_Get(arg->strVal));
!         break;
!     default:
!         //printf("Property name '%s' is not supported by setspawnentry.\n", propname);
!         goto setspawnentry_error;
!     }
! 
!     return S_OK;
! setspawnentry_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //spawn();
! HRESULT openbor_spawn(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent;
! 
!     if(spawnentry.boss && level)
!     {
          level->bossescount++;
!         level->numbosses++;
!     }
! 
!     ent = smartspawn(&spawnentry);
! 
!     if(ent)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *) ent;
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
! 
!     return S_OK;
! }
! 
! //entity * projectile([0/1], char *name, float x, float z, float a, int direction, int pytype, int type, int map);
! HRESULT openbor_projectile(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     DOUBLE temp = 0;
!     LONG ltemp = 0;
!     entity *ent;
!     char *name = NULL;
!     float x = 0, z = 0, a = 0;
!     int direction = DIRECTION_LEFT;
!     int type = 0;
!     int projectile_prime = 0;
!     int map = 0;
! 
!     int relative;
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_INTEGER && varlist[0]->lVal)
!     {
!         relative = 1;
!         paramCount--;
!         varlist++;
!     }
!     else
!     {
!         relative = 0;
!     }
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_STR)
!     {
!         name = StrCache_Get(varlist[0]->strVal);
!     }
! 
!     if(paramCount >= 2 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[1], &temp)))
!     {
!         x = (float)temp;
!     }
!     else if(relative)
!     {
!         x = 0;
!     }
!     else
!     {
!         x = self->position.x;
!     }
!     if(paramCount >= 3 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &temp)))
!     {
!         z = (float)temp;
!     }
!     else if(relative)
!     {
!         z = 0;
!     }
!     else
!     {
!         z = self->position.z;
!     }
!     if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &temp)))
!     {
!         a = (float)temp;
!     }
!     else if(relative)
!     {
!         a  = self->animation->projectile.position.y;
!     }
!     else
!     {
!         a = self->position.y + self->animation->projectile.position.y;
!     }
!     if(paramCount >= 5 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[4], &ltemp)))
!     {
!         direction = (LONG)ltemp;
!     }
!     else if(relative)
!     {
!         direction  = DIRECTION_RIGHT;
!     }
!     else
!     {
!         direction = self->direction;
!     }
!     if(paramCount >= 6 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[5], &ltemp)))
      {
  
          // Backwards compatibility for modules made before bitwise update
--- 9034,10971 ----
      }
  
      return 1;
  }
  
! //checkhole(x,z,a), return 1 if there's hole here
! HRESULT openbor_checkhole(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, a;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)0;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     if ( paramCount >= 3 )
!     {
!         arg = varlist[2];
!         if(FAILED(ScriptVariant_DecimalValue(arg, &a)))
!         {
!             return S_OK;
!         }
! 
!         (*pretvar)->lVal = (LONG)(checkhole_in((float)x, (float)z, (float)a) && checkwall_index((float)x, (float)z) < 0);
!     }
!     else (*pretvar)->lVal = (LONG)(checkhole((float)x, (float)z) && checkwall_index((float)x, (float)z) < 0);
! 
!     return S_OK;
! }
! 
! //checkholeindex(x,z,a), return hole index if there's hole here, else it returns -1
! HRESULT openbor_checkholeindex(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, a;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)-1;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     if ( checkwall_index((float)x, (float)z) < 0 )
!     {
!         if ( paramCount >= 3 )
!         {
!             arg = varlist[2];
!             if(FAILED(ScriptVariant_DecimalValue(arg, &a)))
!             {
!                 return S_OK;
!             }
! 
!             (*pretvar)->lVal = (LONG)checkholeindex_in((float)x, (float)z, (float)a);
!         }
!         else (*pretvar)->lVal = (LONG)checkhole_index((float)x, (float)z);
!     }
! 
!     return S_OK;
! }
! 
! //checkbase(x,z,y,entity), return base of terrain. -1 if there is a wall and no platform. entity param is optional.
  HRESULT openbor_checkbase(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
  {
!     ScriptVariant *arg = NULL;
      DOUBLE x, z, y;
      entity *ent = NULL;
!     float base = -1.0f;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     (*pretvar)->dblVal = (DOUBLE)base;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[2];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &y)))
!     {
!         return S_OK;
!     }
! 
!     if (paramCount > 3)
!     {
!         arg = varlist[3];
          /*if(arg->vt != VT_PTR && arg->vt != VT_EMPTY)
          {
              printf("Function checkbase must have a valid entity handle or NULL().\n");
              *pretvar = NULL;
              return E_FAIL;
          }*/
!         ent = (entity *)arg->ptrVal; //retrieve the entity
!     }
! 
!     if((base = checkbase((float)x, (float)z, (float)y, ent)) >= 0)
!     {
!         (*pretvar)->dblVal = (DOUBLE)base;
!     }
!     return S_OK;
! }
! 
! //checkwall(x,z), return wall height, or 0 | accept checkwall_index(x,z,y) too
! HRESULT openbor_checkwall(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, y;
!     int wall;
!     float h = T_MAX_CHECK_ALTITUDE;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     (*pretvar)->dblVal = (DOUBLE)0;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     if (paramCount > 2)
!     {
!         arg = varlist[2];
!         if(FAILED(ScriptVariant_DecimalValue(arg, &y)))
!         {
!             return S_OK;
!         }
!         h = (float)y;
!     }
! 
!     if((wall = checkwall_below((float)x, (float)z, (float)h)) >= 0)
!     {
!         (*pretvar)->dblVal = (DOUBLE)level->walls[wall].height;
!     }
!     return S_OK;
! }
! 
! //checkwallindex(x,z), return wall index, or -1 | accept checkwallindex(x,z,y) too
! HRESULT openbor_checkwallindex(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, y;
!     int wall;
!     float h = 100000;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)-1;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     if (paramCount > 2)
!     {
!         arg = varlist[2];
!         if(FAILED(ScriptVariant_DecimalValue(arg, &y)))
!         {
!             return S_OK;
!         }
!         h = (float)arg->dblVal;
!     }
! 
!     if((wall = checkwall_below((float)x, (float)z, (float)h)) >= 0)
!     {
!         (*pretvar)->lVal = (LONG)wall;
!     }
!     return S_OK;
! }
! 
! //checkplatformbelow(x,z,a), return the highest platfrom entity below
! HRESULT openbor_checkplatformbelow(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, a;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     //ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     //(*pretvar)->dblVal = (DOUBLE)0;
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)NULL;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[2];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &a)))
!     {
!         return S_OK;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)check_platform_below((float)x, (float)z, (float)a, NULL);
!     return S_OK;
! }
! 
! //checkplatformabove(x,z,a), find a lowest platform above this altitude
! HRESULT openbor_checkplatformabove(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, a;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     //ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     //(*pretvar)->dblVal = (DOUBLE)0;
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)NULL;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[2];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &a)))
!     {
!         return S_OK;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)check_platform_above((float)x, (float)z, (float)a, NULL);
!     return S_OK;
! }
! 
! //checkplatformbetween(x,z,a_min,a_max), find the first platform between these 2 altitudes
! HRESULT openbor_checkplatformbetween(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z, amin, amax;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     //ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     //(*pretvar)->dblVal = (DOUBLE)0;
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)NULL;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[2];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &amin)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[3];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &amax)))
!     {
!         return S_OK;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)check_platform_between((float)x, (float)z, (float)amin, (float)amax, NULL);
!     return S_OK;
! }
! 
! //checkbasemap(x,z), return basemap height (float)
! HRESULT openbor_checkbasemap(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     (*pretvar)->dblVal = (DOUBLE)0;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     (*pretvar)->dblVal = (DOUBLE)check_basemap((float)x, (float)z);
! 
!     return S_OK;
! }
! 
! //checkbasemapindex(x,z), return basemap index in (x,z)
! HRESULT openbor_checkbasemapindex(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     DOUBLE x, z;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!     (*pretvar)->dblVal = (DOUBLE)0;
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &x)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_DecimalValue(arg, &z)))
!     {
!         return S_OK;
!     }
! 
!     (*pretvar)->dblVal = (DOUBLE)check_basemap_index((float)x, (float)z);
! 
!     return S_OK;
! }
! 
! //generatebasemap(int map_index, float rx, float rz, float x_size, float z_size, float min_y, float max_y, int x_cont) to generate an inclined terrain
! HRESULT openbor_generatebasemap(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     DOUBLE rx, rz, x_size, z_size, min_y, max_y;
!     LONG index;
!     LONG x_cont = (LONG)0;
! 
!     if(paramCount < 7)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     if ( FAILED(ScriptVariant_IntegerValue(varlist[0], &index)) )
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     if(paramCount > 7)
!     {
!         if ( FAILED(ScriptVariant_IntegerValue(varlist[7], &x_cont)) )
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!     }
!     if ( FAILED(ScriptVariant_DecimalValue(varlist[1], &rx)) || FAILED(ScriptVariant_DecimalValue(varlist[2], &rz)) ||
!          FAILED(ScriptVariant_DecimalValue(varlist[3], &x_size)) || FAILED(ScriptVariant_DecimalValue(varlist[4], &z_size)) ||
!          FAILED(ScriptVariant_DecimalValue(varlist[5], &min_y)) || FAILED(ScriptVariant_DecimalValue(varlist[6], &max_y))
!     )
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     generate_basemap(index, rx, rz, x_size, z_size, min_y, max_y, x_cont);
! 
!     return S_OK;
! }
! 
! HRESULT openbor_openfilestream(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     char *filename = NULL;
!     ScriptVariant *arg = NULL;
!     LONG location = 0;
!     int fsindex;
! 
!     FILE *handle = NULL;
!     char path[MAX_BUFFER_LEN] = {""};
!     char tmpname[MAX_BUFFER_LEN] = {""};
!     long size;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     arg = varlist[0];
!     if(arg->vt != VT_STR)
!     {
!         printf("Filename for openfilestream must be a string.\n");
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     filename = (char *)StrCache_Get(arg->strVal);
! 
!     if(paramCount > 1)
!     {
!         arg = varlist[1];
!         if(FAILED(ScriptVariant_IntegerValue(arg, &location)))
!         {
!             *pretvar = NULL;
!             return E_FAIL;
!         }
!     }
! 
!     for(fsindex = 0; fsindex < numfilestreams; fsindex++)
!     {
!         if(filestreams[fsindex].buf == NULL)
!         {
!             break;
!         }
!     }
! 
!     if(fsindex == numfilestreams)
!     {
!         __realloc(filestreams, numfilestreams); //warning, don't ++ here, its a macro
!         numfilestreams++;
!     }
! 
!     // Load file from saves directory if specified
!     if(location)
!     {
!         getBasePath(path, "Saves", 0);
!         getPakName(tmpname, -1);
!         strcat(path, tmpname);
!         strcat(path, "/");
!         strcat(path, filename);
!         //printf("open path: %s", path);
! #ifndef DC
!         if(!(fileExists(path)))
!         {
!             /*
!             2011_03_27, DC: Let's be a little more friendly about missing files; this will let a function evaluate if file exists and decide what to do.
! 
!             printf("Openfilestream - file specified does not exist.\n"); //Keep this for possible debug mode in the future.
!             */
!             (*pretvar)->lVal = -1;
! 
!             return S_OK;
!         }
! #endif
!         handle = fopen(path, "rb");
!         if(handle == NULL)
!         {
!             (*pretvar)->lVal = -1;
!             return S_OK;
!         }
!         //printf("\nfile opened\n");
!         fseek(handle, 0, SEEK_END);
!         size = ftell(handle);
!         //printf("\n file size %d fsindex %d\n", size, fsindex);
!         rewind(handle);
!         filestreams[fsindex].buf = malloc(sizeof(*filestreams[fsindex].buf) * (size + 1));
!         if(filestreams[fsindex].buf == NULL)
!         {
!             (*pretvar)->lVal = -1;
!             return S_OK;
!         }
!         fread(filestreams[fsindex].buf, 1, size, handle);
!         filestreams[fsindex].buf[size] = 0;
!         filestreams[fsindex].size = size;
!     }
!     else if(buffer_pakfile(filename, &filestreams[fsindex].buf, &filestreams[fsindex].size) != 1)
!     {
!         printf("Invalid filename used in openfilestream.\n");
!         (*pretvar)->lVal = -1;
!         return S_OK;
!     }
! 
!     (*pretvar)->lVal = (LONG)fsindex;
! 
!     filestreams[fsindex].pos = 0;
!     return S_OK;
! }
! 
! HRESULT openbor_getfilestreamline(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int length;
!     char *buf;
!     char *dst;
!     ScriptVariant *arg = NULL;
!     LONG filestreamindex;
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return S_OK;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_STR);
! 
!     length = 0;
!     buf = filestreams[filestreamindex].buf + filestreams[filestreamindex].pos;
!     while(buf[length] && buf[length] != '\n' && buf[length] != '\r')
!     {
!         ++length;
!     }
! 
!     (*pretvar)->strVal = StrCache_Pop(length);
!     dst = StrCache_Get((*pretvar)->strVal);
!     memcpy(dst, buf, length);
!     dst[length] = '\0';
! 
!     return S_OK;
! }
! 
! HRESULT openbor_getfilestreamargument(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     LONG filestreamindex, argument;
!     char *argtype = NULL;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &argument)))
!     {
!         return S_OK;
!     }
!     ScriptVariant_Clear(*pretvar);
! 
!     if(varlist[2]->vt != VT_STR)
!     {
!         printf("You must give a string value specifying what kind of value you want the argument converted to.\n");
!         return E_FAIL;
!     }
!     argtype = (char *)StrCache_Get(varlist[2]->strVal);
! 
!     if(stricmp(argtype, "string") == 0)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(findarg(filestreams[filestreamindex].buf + filestreams[filestreamindex].pos, argument));
!     }
!     else if(stricmp(argtype, "int") == 0)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)atoi(findarg(filestreams[filestreamindex].buf + filestreams[filestreamindex].pos, argument));
!     }
!     else if(stricmp(argtype, "float") == 0)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)atof(findarg(filestreams[filestreamindex].buf + filestreams[filestreamindex].pos, argument));
!     }
!     else if(stricmp(argtype, "byte") == 0) // By White Dragon
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)(readByte(filestreams[filestreamindex].buf + filestreams[filestreamindex].pos));
!     }
!     else
!     {
!         printf("Invalid type for argument converted to (getfilestreamargument).\n");
!         return E_FAIL;
!     }
! 
!     return S_OK;
! }
! 
! HRESULT openbor_filestreamnextline(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     char *buf;
!     size_t pos;
!     LONG filestreamindex;
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return S_OK;
!     }
!     pos = filestreams[filestreamindex].pos;
!     buf = filestreams[filestreamindex].buf;
!     while(buf[pos] && buf[pos] != '\n' && buf[pos] != '\r')
!     {
!         ++pos;
!     }
!     while(buf[pos] == '\n' || buf[pos] == '\r')
!     {
!         ++pos;
!     }
!     filestreams[filestreamindex].pos = pos;
! 
!     return S_OK;
! }
! 
! HRESULT openbor_getfilestreamposition(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     LONG filestreamindex;
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return S_OK;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)filestreams[filestreamindex].pos;
!     return S_OK;
! }
! 
! HRESULT openbor_setfilestreamposition(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *arg = NULL;
!     LONG filestreamindex, position;
! 
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return S_OK;
!     }
! 
!     arg = varlist[1];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &position)))
!     {
!         return S_OK;
!     }
! 
!     filestreams[filestreamindex].pos = position;
!     return S_OK;
! }
! 
! HRESULT openbor_filestreamappend(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG filestreamindex;
!     ScriptVariant *arg = NULL;
!     LONG appendtype = -1;
!     size_t len1, len2;
!     char *temp;
!     static char append[2048];
! 
!     *pretvar = NULL;
!     if(paramCount < 2)
!     {
!         goto append_error;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         goto append_error;
!     }
! 
!     if(paramCount >= 3)
!     {
!         arg = varlist[2];
!         if(FAILED(ScriptVariant_IntegerValue(arg, &appendtype)))
!         {
!             goto append_error;
!         }
!     }
! 
!     arg = varlist[1];
! 
!     /*
!      * By White Dragon to write a byte
!      */
!     if ( paramCount >= 4 )
!     {
!         char* argtype = NULL;
!         unsigned char byte = (unsigned char)0x00;
!         if ( varlist[3]->vt != VT_STR ) goto append_error;
! 
!         argtype = (char *)StrCache_Get(varlist[3]->strVal);
! 
!         if( stricmp(argtype, "byte") != 0 ) goto append_error;
!         else
!         {
!             int inc = -1; // if buf > 0 (prev bytes) you need to begin from size-1 (index)
! 
!             len1 = 1+1; // +1 is the NULL to close the buffer
!             len2 = filestreams[filestreamindex].size;
! 
!             filestreams[filestreamindex].buf = realloc( filestreams[filestreamindex].buf, sizeof(*temp)*(len1+len2+0) );
! 
!             byte = (unsigned char)varlist[1]->lVal;
!             //printf("a:%s->%d->%d\n",filestreams[filestreamindex].buf,byte,filestreams[filestreamindex].size);
! 
!             if ( len2 <= 0 ) inc = 0;
! 
!             filestreams[filestreamindex].buf[filestreams[filestreamindex].size+inc] = byte; // overwrite 0x00 byte
!             if (appendtype <= 1) filestreams[filestreamindex].buf[filestreams[filestreamindex].size+1+inc] = 0x00;
!             //printf("b:%s\n",filestreams[filestreamindex].buf);
! 
!             filestreams[filestreamindex].size = len1 + len2;
!         }
!     } else
!     {
!         ScriptVariant_ToString(arg, append);
! 
!         len1 = strlen(append);
!         len2 = filestreams[filestreamindex].size;
! 
!         filestreams[filestreamindex].buf = realloc(filestreams[filestreamindex].buf, sizeof(*temp) * (len1 + len2 + 4));
! 
!         if(appendtype == 0)
!         {
!             append[len1] = ' ';
!             append[++len1] = '\0';
!             strcpy(filestreams[filestreamindex].buf + len2, "\r\n");
!             len2 += 2;
!             strcpy(filestreams[filestreamindex].buf + len2, append);
!         }
!         else if(appendtype == 1)
!         {
!             append[len1] = ' ';
!             append[++len1] = '\0';
!             strcpy(filestreams[filestreamindex].buf + len2, append);
!         }
!         else
!         {
!             strcpy(filestreams[filestreamindex].buf + len2, append);
!         }
!         filestreams[filestreamindex].size = len1 + len2;
!     }
! 
!     return S_OK;
! 
! append_error:
!     return E_FAIL;
! 
  }
  
! HRESULT openbor_createfilestream(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int fsindex;
!     ScriptVariant_Clear(*pretvar);
! 
!     for(fsindex = 0; fsindex < numfilestreams; fsindex++)
!     {
!         if(filestreams[fsindex].buf == NULL)
!         {
!             break;
!         }
!     }
! 
!     if(fsindex == numfilestreams)
!     {
!         __realloc(filestreams, numfilestreams); //warning, don't ++ here, its a macro
!         numfilestreams++;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)fsindex;
! 
!     // Initialize the new filestream
!     filestreams[fsindex].pos = 0;
!     filestreams[fsindex].size = 0;
!     filestreams[fsindex].buf = malloc(sizeof(*filestreams[fsindex].buf) * 128);
!     filestreams[fsindex].buf[0] = '\0';
!     return S_OK;
! }
! 
! HRESULT openbor_savefilestream(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i;
!     LONG filestreamindex;
!     ScriptVariant *arg = NULL;
!     char *bytearg = NULL, *patharg = NULL;
!     FILE *handle = NULL;
!     char path[MAX_BUFFER_LEN] = {""};
!     char tmpname[MAX_BUFFER_LEN] = {""};
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         printf("You must give a valid filestrema handle for savefilestream!\n");
!         return E_FAIL;
!     }
! 
!     arg = varlist[1];
!     if(arg->vt != VT_STR)
!     {
!         printf("Filename for savefilestream must be a string.\n");
!         return E_FAIL;
!     }
! 
!     if (paramCount > 2)
!     {
!         patharg = (char *)StrCache_Get(varlist[2]->strVal);
!         if( varlist[2]->vt != VT_STR )
!         {
!             printf("The pathname parameter must be a string.\n");
!             return E_FAIL;
!         }
!     }
! 
!     if (paramCount > 3) // By White Dragon
!     {
!         bytearg = (char *)StrCache_Get(varlist[3]->strVal);
!         if( stricmp(bytearg, "byte") != 0 )
!         {
!             printf("%s parameter does not exist.\n",bytearg);
!             return E_FAIL;
!         }
!     }
! 
!     // Get the saves directory
!     if ( paramCount <= 2 || patharg == NULL )
!     {
!         getBasePath(path, "Saves", 0);
!         getPakName(tmpname, -1);
!         strcat(path, tmpname);
!         // Add user's filename to path and write the filestream to it
!         strcat(path, "/");
!     } else // By White Dragon
!     {
!         strcat(path, "./");
!         strcat(path, patharg);
!     }
!     //printf("path:%s\n",path);
! 
!     strcat(path, (char *)StrCache_Get(arg->strVal));
! 
!     for(i = strlen(path) - 1; i >= 0; i--)
!     {
! 
!         if(path[i] == '/' || path[i] == '\\')
!         {
!             path[i] = 0;
!             // Make folder if it doesn't exist
! #ifndef DC
!             dirExists(path, 1);
! #endif
!             path[i] = '/';
!             break;
!         }
!     }
! 
!     //printf("save path: %s", path);
!     handle = fopen(path, "wb");
!     if(handle == NULL)
!     {
!         return E_FAIL;
!     }
!     fwrite(filestreams[filestreamindex].buf, 1, strlen(filestreams[filestreamindex].buf), handle);
! 
!     // add blank line so it can be read successfully
!     if ( paramCount <= 3 || (paramCount > 3 && stricmp(bytearg, "byte") != 0 ) ) fwrite("\r\n", 1, 2, handle);
!     fclose(handle);
! 
!     return S_OK;
! }
! 
! HRESULT openbor_closefilestream(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG filestreamindex;
!     ScriptVariant *arg = NULL;
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         return E_FAIL;
!     }
! 
!     arg = varlist[0];
!     if(FAILED(ScriptVariant_IntegerValue(arg, &filestreamindex)))
!     {
!         return E_FAIL;
!     }
! 
! 
!     if(filestreams[filestreamindex].buf)
!     {
!         free(filestreams[filestreamindex].buf);
!         filestreams[filestreamindex].buf = NULL;
!     }
!     return S_OK;
! }
! //damageentity(entity, other, force, drop, type)
! HRESULT openbor_damageentity(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL;
!     entity *other = NULL;
!     entity *temp = NULL;
!     LONG force, drop, type;
!     s_collision_attack atk;
! 
!     if(paramCount < 1)
!     {
!         printf("Function requires at least 1 parameter.\n");
!         goto de_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)0;
! 
!     ent = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         printf("Invalid entity parameter.\n");
!         goto de_error;
!     }
! 
!     other = ent;
! 
!     if(paramCount >= 2 && varlist[1]->ptrVal)
!     {
!         other = (entity *)(varlist[1])->ptrVal;
!     }
! 
!     if(paramCount >= 3 )
!     {
!         force = (LONG)1;
!         drop = (LONG)0;
!         type = (LONG)ATK_NORMAL;
! 
!         if(FAILED(ScriptVariant_IntegerValue((varlist[2]), &force)))
!         {
!             printf("Wrong force value.\n");
!             goto de_error;
!         }
! 
!         if(paramCount >= 4)
!         {
!             if(FAILED(ScriptVariant_IntegerValue((varlist[3]), &drop)))
!             {
!                 printf("Wrong drop value.\n");
!                 goto de_error;
!             }
!         }
!         if(paramCount >= 5)
!         {
!             if(FAILED(ScriptVariant_IntegerValue((varlist[4]), &type)))
!             {
!                 printf("Wrong type value.\n");
!                 goto de_error;
!             }
!         }
! 
!         atk = emptyattack;
!         atk.attack_force = force;
!         atk.attack_drop = drop;
!         if(drop)
!         {
!             atk.dropv.y = (float)DEFAULT_ATK_DROPV_Y;
!             atk.dropv.x = (float)DEFAULT_ATK_DROPV_X;
!             atk.dropv.z = (float)DEFAULT_ATK_DROPV_Z;
!         }
!         atk.attack_type = type;
!     }
!     else
!     {
!         atk = attack;
!     }
! 
!     if(!ent->takedamage)
!     {
!         ent->energy_status.health_current -= atk.attack_force;
!         if(ent->energy_status.health_current <= 0)
!         {
!             kill_entity(ent);
!         }
!         (*pretvar)->lVal = (LONG)1;
!     }
!     else
!     {
!         temp = self;
!         self = ent;
!         (*pretvar)->lVal = (LONG)self->takedamage(other, &atk, 0);
!         self = temp;
!     }
!     return S_OK;
! 
! de_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //getcomputeddamage(defender, attacker, force, drop, type), it returns the real damage. Minimum 3 params (defender, attacker, force)
  HRESULT openbor_getcomputeddamage(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
  {
!     entity *defender = NULL;
      entity *attacker = NULL;
      entity *temp = NULL;
      LONG force, drop, type;
!     s_collision_attack atk;
! 
!     if(paramCount < 3)
!     {
!         printf("Function requires at least 3 parameters.\n");
!         goto gcd_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
      (*pretvar)->lVal = (LONG)0;
  
!     force = (LONG)0;
!     drop = (LONG)0;
!     type = (LONG)ATK_NORMAL;
! 
!     defender = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     if(!defender)
!     {
!         printf("Invalid entity parameter.\n");
!         goto gcd_error;
!     }
! 
!     if(varlist[1]->ptrVal)
!     {
!         attacker = (entity *)(varlist[1])->ptrVal;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue((varlist[2]), &force)))
!     {
!         printf("Wrong force value.\n");
!         goto gcd_error;
!     }
! 
!     if(paramCount >= 4)
!     {
!         if(FAILED(ScriptVariant_IntegerValue((varlist[3]), &drop)))
!         {
!             printf("Wrong drop value.\n");
!             goto gcd_error;
!         }
!     }
!     if(paramCount >= 5)
!     {
!         if(FAILED(ScriptVariant_IntegerValue((varlist[4]), &type)))
!         {
!             printf("Wrong type value.\n");
!             goto gcd_error;
!         }
!     }
! 
!     atk = emptyattack;
!     atk.attack_force = force;
!     atk.attack_drop = drop;
!     if(drop)
!     {
!         atk.dropv.y = (float)DEFAULT_ATK_DROPV_Y;
!         atk.dropv.x = (float)DEFAULT_ATK_DROPV_X;
!         atk.dropv.z = (float)DEFAULT_ATK_DROPV_Z;
!     }
      atk.attack_type = type;
  
!     temp = self;
      self = defender;
      (*pretvar)->lVal = (LONG)calculate_force_damage(attacker, &atk);
!     self = temp;
! 
!     return S_OK;
! 
! gcd_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //killentity(entity)
! HRESULT openbor_killentity(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL;
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     ent = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     if(ent == NULL)
!     {
!         (*pretvar)->lVal = (LONG)0;
!         return S_OK;
!     }
!     kill_entity(ent);
!     (*pretvar)->lVal = (LONG)1;
!     return S_OK;
! }
! 
! // dograb
! // Damon V. Caskey
! // 2013-12-30
! //
! // Enables initiation of the engine's default grab state between attacker and
! // target entities.
! //
! // dograb(ptr attacker, ptr target, int adjust);
! //
! // attacker: Entity attempting grab.
! // target: Entity to be grabbed.
! // adjustcheck: Engine's dograb adjust check flag.
! HRESULT openbor_dograb(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     #define SELF_NAME           "dograb(void attacker, void target, int adjust)"
!     #define ARG_MINIMUM         2
!     #define ARG_ATTACKER        0
!     #define ARG_TARGET          1
!     #define ARG_ADJUST          2
!     #define ARG_ADJUST_DEFAULT  1
! 
!     LONG adjust          = ARG_ADJUST_DEFAULT;   // dograb adjust check.
!     int result          = S_OK;                 // Function pass/fail result.
!     entity *attacker    = NULL;                 // Attacker entity (attempting grab)
!     entity *target      = NULL;                 // Target entity (to be grabbed)
! 
!     ScriptVariant_Clear(*pretvar);
! 
!     // Validate there are at least two parameters (attacker and target entities).
!     if(paramCount < ARG_MINIMUM)
!     {
!         goto error_local;
!     }
! 
!     // Get adjust check.
!     if(paramCount > ARG_ADJUST)
!     {
!         ScriptVariant_IntegerValue(varlist[ARG_ADJUST], &adjust);
!     }
! 
!     // Get attacking and target entity.
!     attacker = (entity *)(varlist[ARG_ATTACKER])->ptrVal;
!     target = (entity *)(varlist[ARG_TARGET])->ptrVal;
! 
!     // Validate entities.
!     if(!attacker && !target)
!     {
!         goto error_local;
!     }
! 
!     // Execute engine's grab function.
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = dograb(attacker, target, adjust);
! 
!     return result;
! 
!     // Error trap
!     error_local:
! 
!     result = E_FAIL;
!     printf("\nYou must provide valid entity handles and an optional adjustment: " SELF_NAME);
! 
!     // Return result.
!     return result;
! 
!     #undef SELF_NAME
!     #undef ARG_MINIMUM
!     #undef ARG_ATTACKER
!     #undef ARG_TARGET
!     #undef ARG_ADJUST
!     #undef ARG_ADJUST_DEFAULT
! }
! 
! //findtarget(entity, int animation);
! HRESULT openbor_findtarget(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG i = 0;
!     entity *ent = NULL;
!     entity *tempself, *target;
!     LONG anim = -1;
! 
!     if(paramCount > 2)
!     {
!         ScriptVariant_IntegerValue(varlist[2], &i);
!     }
! 
!     if(paramCount < 1)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
! 
!     ent = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         ScriptVariant_Clear(*pretvar);
!         return S_OK;
!     }
!     if(paramCount > 1 && FAILED(ScriptVariant_IntegerValue(varlist[1], &anim)))
!     {
!         return E_FAIL;
!     }
!     tempself = self;
!     self = ent;
!     target = normal_find_target((int)anim, i);
!     if(!target)
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
!     else
!     {
!         (*pretvar)->ptrVal = (VOID *)target;
!     }
!     self = tempself;
!     return S_OK;
! }
! 
! //checkrange(entity, target, int ani);
! HRESULT openbor_checkrange(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL, *target = NULL;
!     LONG ani = 0;
!     extern int max_animations;
! 
!     if(paramCount < 2)
!     {
!         goto checkrange_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(varlist[0]->vt != VT_PTR || varlist[1]->vt != VT_PTR)
!     {
!         goto checkrange_error;
!     }
! 
!     ent = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     target = (entity *)(varlist[1])->ptrVal; //retrieve the target
! 
!     if(!ent || !target)
!     {
!         goto checkrange_error;
!     }
! 
!     if(paramCount > 2 && FAILED(ScriptVariant_IntegerValue(varlist[2], &ani)))
!     {
!         goto checkrange_error;
!     }
!     else if(paramCount <= 2)
!     {
!         ani = ent->animnum;
!     }
! 
!     if(ani < 0 || ani >= max_animations)
!     {
!         printf("Animation id out of range: %d / %d.\n", (int)ani, max_animations);
!         goto checkrange_error;
!     }
! 
!     (*pretvar)->lVal = check_range_target_all(ent, target, ani);
! 
!     return S_OK;
! 
! checkrange_error:
!     printf("Function needs at least 2 valid entity handles, the third parameter is optional: checkrange(entity, target, int animnum)\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //clearspawnentry();
! HRESULT openbor_clearspawnentry(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     memset(&spawnentry, 0, sizeof(spawnentry));
!     spawnentry.index = spawnentry.item_properties.index = spawnentry.weaponindex = -1;
!     return S_OK;
! }
! 
! // ===== setspawnentry =====
! enum setspawnentry_enum
! {
!     _sse_2phealth,
!     _sse_2pitem,
!     _sse_3phealth,
!     _sse_3pitem,
!     _sse_4phealth,
!     _sse_4pitem,
!     _sse_aggression,
!     _sse_alias,
!     _sse_alpha,
!     _sse_boss,
!     _sse_coords,
!     _sse_credit,
!     _sse_dying,
!     _sse_flip,
!     _sse_health,
!     _sse_item,
!     _sse_itemalias,
!     _sse_itemhealth,
!     _sse_itemmap,
!     _sse_map,
!     _sse_mp,
!     _sse_multiple,
!     _sse_name,
!     _sse_nolife,
!     _sse_parent,
!     _sse_type,
!     _sse_weapon,
!     _sse_the_end,
! };
! 
! int mapstrings_setspawnentry(ScriptVariant **varlist, int paramCount)
! {
!     char *propname;
!     int prop;
!     static const char *proplist[] =
!     {
!         "2phealth",
!         "2pitem",
!         "3phealth",
!         "3pitem",
!         "4phealth",
!         "4pitem",
!         "aggression",
!         "alias",
!         "alpha",
!         "boss",
!         "coords",
!         "credit",
!         "dying",
!         "flip",
!         "health",
!         "item",
!         "itemalias",
!         "itemhealth",
!         "itemmap",
!         "map",
!         "mp",
!         "multiple",
!         "name",
!         "nolife",
!         "parent",
!         "type",
!         "weapon",
!     };
! 
!     MAPSTRINGS(varlist[0], proplist, _sse_the_end,
!                "Property name '%s' is not supported by setspawnentry.\n");
! 
!     return 1;
! }
! 
! //setspawnentry(propname, value1[, value2, value3, ...]);
! HRESULT openbor_setspawnentry(ScriptVariant **varlist, ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     s_model *tempmodel;
!     DOUBLE dbltemp;
!     int temp, prop;
!     ScriptVariant *arg = NULL;
! 
!     if(paramCount < 2)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)1;
! 
!     mapstrings_setspawnentry(varlist, paramCount);
!     if(varlist[0]->vt != VT_INTEGER)
!     {
!         if(varlist[0]->vt != VT_STR)
!         {
!             printf("You must give a string value for spawn entry property name.\n");
!         }
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     prop = varlist[0]->lVal;
! 
!     arg = varlist[1];
! 
!     switch(prop)
!     {
!     case _sse_name:
!         if(arg->vt != VT_STR)
!         {
!             printf("You must use a string value for spawn entry's name property: function setspawnentry.\n");
!             goto setspawnentry_error;
!         }
!         spawnentry.model = findmodel((char *)StrCache_Get(arg->strVal));
!         break;
!     case _sse_alias:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         strcpy(spawnentry.alias, (char *)StrCache_Get(arg->strVal));
!         break;
!     case _sse_item:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         spawnentry.itemmodel = findmodel((char *)StrCache_Get(arg->strVal));
!         spawnentry.item = spawnentry.itemmodel->name;
!         spawnentry.item_properties.index = get_cached_model_index(spawnentry.item);
!         spawnentry.item_properties.player_count = 0;
!         break;
!     case _sse_2pitem:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         tempmodel = findmodel((char *)StrCache_Get(arg->strVal));
!         if(!tempmodel)
!         {
!             spawnentry.item = NULL;
!         }
!         else
!         {
!             spawnentry.item = tempmodel->name;
!         }
!         spawnentry.item_properties.player_count = 1;
!         break;
!     case _sse_3pitem:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         spawnentry.itemmodel = findmodel((char *)StrCache_Get(arg->strVal));
!         spawnentry.item_properties.player_count = 2;
!         break;
!     case _sse_4pitem:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         spawnentry.itemmodel = findmodel((char *)StrCache_Get(arg->strVal));
!         spawnentry.item_properties.player_count = 3;
!         break;
!     case _sse_health:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.health[0] = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_itemhealth:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.item_properties.health = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_itemalias:
!         if(arg->vt != VT_STR)
!         {
!             return E_FAIL;
!         }
!         strcpy(spawnentry.item_properties.alias, (char *)StrCache_Get(arg->strVal));
!         break;
!     case _sse_2phealth:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.health[1] = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_3phealth:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.health[2] = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_4phealth:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.health[3] = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_coords:
!         temp = 1;
!         if(SUCCEEDED(ScriptVariant_DecimalValue(arg, &dbltemp)))
!         {
!             spawnentry.position.x = (DOUBLE)dbltemp;
!         }
!         else
!         {
!             temp = 0;
!         }
!         if(paramCount >= 3 && temp)
!         {
!             if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &dbltemp)))
!             {
!                 spawnentry.position.z = (DOUBLE)dbltemp;
!             }
!             else
!             {
!                 temp = 0;
!             }
!         }
!         if(paramCount >= 4 && temp)
!         {
!             if(SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &dbltemp)))
!             {
!                 spawnentry.position.y = (DOUBLE)dbltemp;
!             }
!             else
!             {
!                 temp = 0;
!             }
!         }
!         (*pretvar)->lVal = (LONG)temp;
!         break;
!     case _sse_mp:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.mp = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_map:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.colourmap = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_itemmap:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.item_properties.colorset = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_alpha:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.alpha = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_multiple:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.multiple = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_dying:
!         temp = 1;
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.dying = (LONG)ltemp;
!         }
!         else
!         {
!             temp = 0;
!         }
!         if(paramCount >= 3 && temp)
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!             {
!                 spawnentry.per1 = (LONG)ltemp;
!             }
!             else
!             {
!                 temp = 0;
!             }
!         }
!         if(paramCount >= 4 && temp)
!         {
!             if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[3], &ltemp)))
!             {
!                 spawnentry.per2 = (LONG)ltemp;
!             }
!             else
!             {
!                 temp = 0;
!             }
!         }
!         (*pretvar)->lVal = (LONG)temp;
!         break;
!     case _sse_nolife:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.nolife = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_boss:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.boss = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_flip:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.flip = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_credit:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.credit = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_aggression:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.aggression = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_parent:
!         if( arg->vt == VT_PTR ) //&& arg->vt != VT_EMPTY
!         {
!             spawnentry.parent = (entity *)arg->ptrVal;
!         }
!         else
!         {
!             (*pretvar)->ptrVal = (VOID *)NULL;
!         }
!         break;
!     case _sse_type:
!         if(SUCCEEDED(ScriptVariant_IntegerValue(arg, &ltemp)))
!         {
!             spawnentry.entitytype = (LONG)ltemp;
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         break;
!     case _sse_weapon:
!         if(arg->vt != VT_STR)
!         {
!             goto setspawnentry_error;
!         }
!         spawnentry.weaponmodel = findmodel((char *)StrCache_Get(arg->strVal));
!         break;
!     default:
!         //printf("Property name '%s' is not supported by setspawnentry.\n", propname);
!         goto setspawnentry_error;
!     }
! 
!     return S_OK;
! setspawnentry_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //spawn();
! HRESULT openbor_spawn(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent;
! 
!     if(spawnentry.boss && level)
!     {
          level->bossescount++;
!         level->numbosses++;
!     }
! 
!     ent = smartspawn(&spawnentry);
! 
!     if(ent)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *) ent;
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
! 
!     return S_OK;
! }
! 
! //entity * projectile([0/1], char *name, float x, float z, float a, int direction, int pytype, int type, int map);
! HRESULT openbor_projectile(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     DOUBLE temp = 0;
!     LONG ltemp = 0;
!     entity *ent;
!     char *name = NULL;
!     float x = 0, z = 0, a = 0;
!     int direction = DIRECTION_LEFT;
!     int type = 0;
!     int projectile_prime = 0;
!     int map = 0;
! 
!     int relative;
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_INTEGER && varlist[0]->lVal)
!     {
!         relative = 1;
!         paramCount--;
!         varlist++;
!     }
!     else
!     {
!         relative = 0;
!     }
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_STR)
!     {
!         name = StrCache_Get(varlist[0]->strVal);
!     }
! 
!     if(paramCount >= 2 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[1], &temp)))
!     {
!         x = (float)temp;
!     }
!     else if(relative)
!     {
!         x = 0;
!     }
!     else
!     {
!         x = self->position.x;
!     }
!     if(paramCount >= 3 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[2], &temp)))
!     {
!         z = (float)temp;
!     }
!     else if(relative)
!     {
!         z = 0;
!     }
!     else
!     {
!         z = self->position.z;
!     }
!     if(paramCount >= 4 && SUCCEEDED(ScriptVariant_DecimalValue(varlist[3], &temp)))
!     {
!         a = (float)temp;
!     }
!     else if(relative)
!     {
!         a  = self->animation->projectile.position.y;
!     }
!     else
!     {
!         a = self->position.y + self->animation->projectile.position.y;
!     }
!     if(paramCount >= 5 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[4], &ltemp)))
!     {
!         direction = (LONG)ltemp;
!     }
!     else if(relative)
!     {
!         direction  = DIRECTION_RIGHT;
!     }
!     else
!     {
!         direction = self->direction;
!     }
!     if(paramCount >= 6 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[5], &ltemp)))
      {
  
          // Backwards compatibility for modules made before bitwise update
***************
*** 10976,15433 ****
          {
              projectile_prime = PROJECTILE_PRIME_BASE_Y;
              projectile_prime += PROJECTILE_PRIME_LAUNCH_MOVING;
!         }
!     }
!     if(paramCount >= 7 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[6], &ltemp)))
!     {
!         type = (LONG)ltemp;
!     }
!     if(paramCount >= 8 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[7], &ltemp)))
!     {
!         map = (LONG)ltemp;
!     }
! 
!     if(relative)
!     {
!         if(self->direction == DIRECTION_RIGHT)
!         {
!             x += self->position.x;
!         }
!         else
!         {
!             x = self->position.x - x;
!             direction = !direction;
!         }
!         z += self->position.z;
!         a += self->position.y;
!     }
! 
!     switch(type)
!     {
!     default:
!     case 0:
!         ent = knife_spawn(name, -1, x, z, a, direction, projectile_prime, map);
!         break;
!     case 1:
!         ent = bomb_spawn(name, -1, x, z, a, direction, map);
!         break;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *) ent;
! 
!     return S_OK;
! }
! 
! 
! 
! 
! //int rgbcolor(int r, int g, int b);
! HRESULT openbor_rgbcolor(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG r, g, b;
! 
!     if(paramCount != 3)
!     {
!         goto rgbcolor_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &r)))
!     {
!         goto rgbcolor_error;    // decimal/integer value for red?
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &g)))
!     {
!         goto rgbcolor_error;    // decimal/integer value for green?
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[2], &b)))
!     {
!         goto rgbcolor_error;    // decimal/integer value for blue?
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = _makecolour(r, g, b);
!     return S_OK;
! 
! rgbcolor_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // ===== playerkeys =====
! enum playerkeys_enum
! {
!     _pk_anybutton,
!     _pk_attack,
!     _pk_attack2,
!     _pk_attack3,
!     _pk_attack4,
!     _pk_esc,
!     _pk_jump,
!     _pk_movedown,
!     _pk_moveleft,
!     _pk_moveright,
!     _pk_moveup,
!     _pk_screenshot,
!     _pk_special,
!     _pk_start,
!     _pk_the_end,
! };
! 
! int mapstrings_playerkeys(ScriptVariant **varlist, int paramCount)
! {
!     char *propname = NULL;
!     int i, prop;
! 
!     static const char *proplist[] = // for args 2+
!     {
!         "anybutton",
!         "attack",
!         "attack2",
!         "attack3",
!         "attack4",
!         "esc",
!         "jump",
!         "movedown",
!         "moveleft",
!         "moveright",
!         "moveup",
!         "screenshot",
!         "special",
!         "start",
!     };
! 
!     for(i = 2; i < paramCount; i++)
!     {
!         MAPSTRINGS(varlist[i], proplist, _pk_the_end,
!                    "Button name '%s' is not supported by playerkeys.");
!     }
! 
!     return 1;
! }
! 
! //playerkeys(playerindex, newkey?, key1, key2, ...);
! HRESULT openbor_playerkeys(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     int index, newkey;
!     int i;
!     u64 keys;
!     ScriptVariant *arg = NULL;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)1;
! 
!     mapstrings_playerkeys(varlist, paramCount);
! 
!     if(FAILED(ScriptVariant_IntegerValue((varlist[0]), &ltemp)))
!     {
!         index = 0;
!     }
!     else
!     {
!         index = (LONG)ltemp;
!     }
! 
!     if(SUCCEEDED(ScriptVariant_IntegerValue((varlist[1]), &ltemp)))
!     {
!         newkey = (LONG)ltemp;
!     }
!     else
!     {
!         newkey = 0;
!     }
! 
!     if(newkey == 1)
!     {
!         keys = player[index].newkeys;
!     }
!     else if(newkey == 2)
!     {
!         keys = player[index].releasekeys;
!     }
!     else
!     {
!         keys = player[index].keys;
!     }
! 
!     for(i = 2; i < paramCount; i++)
!     {
!         arg = varlist[i];
!         if(arg->vt == VT_INTEGER)
!         {
!             switch(arg->lVal)
!             {
!             case _pk_jump:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_JUMP);
!                 break;
!             case _pk_attack:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ATTACK);
!                 break;
!             case _pk_attack2:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ATTACK2);
!                 break;
!             case _pk_attack3:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ATTACK3);
!                 break;
!             case _pk_attack4:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ATTACK4);
!                 break;
!             case _pk_special:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_SPECIAL);
!                 break;
!             case _pk_esc:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ESC);
!                 break;
!             case _pk_start:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_START);
!                 break;
!             case _pk_moveleft:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_MOVELEFT);
!                 break;
!             case _pk_moveright:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_MOVERIGHT);
!                 break;
!             case _pk_moveup:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_MOVEUP);
!                 break;
!             case _pk_movedown:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_MOVEDOWN);
!                 break;
!             case _pk_screenshot:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_SCREENSHOT);
!                 break;
!             case _pk_anybutton:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ANYBUTTON);
!                 break;
!             default:
!                 (*pretvar)->lVal = (LONG)0;
!             }
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         if(!((*pretvar)->lVal))
!         {
!             break;
!         }
!     }
! 
!     return S_OK;
! }
! 
! //playmusic(name, loop)
! HRESULT openbor_playmusic(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int loop = 0;
!     LONG offset = 0;
!     char *thename = NULL;
! 
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         sound_close_music();
!         return S_OK;
!     }
!     if(varlist[0]->vt != VT_STR)
!     {
!         //printf("");
!         return E_FAIL;
!     }
!     thename = StrCache_Get(varlist[0]->strVal);
! 
!     if(paramCount > 1)
!     {
!         loop = (int)ScriptVariant_IsTrue(varlist[1]);
!     }
! 
!     if(paramCount > 2)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &offset)))
!         {
!             return E_FAIL;
!         }
!     }
! 
! 
!     music(thename, loop, offset);
!     return S_OK;
! }
! 
! //fademusic(fade, name, loop, offset)
! HRESULT openbor_fademusic(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     DOUBLE value = 0;
!     LONG values[2] = {0, 0};
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto fademusic_error;
!     }
!     if(FAILED(ScriptVariant_DecimalValue(varlist[0], &value)))
!     {
!         goto fademusic_error;
!     }
!     musicfade[0] = value;
!     musicfade[1] = (float)savedata.musicvol;
! 
!     if(paramCount == 4)
!     {
!         strncpy(musicname, StrCache_Get(varlist[1]->strVal), MAX_STR_LEN - 1);
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &values[0])))
!         {
!             goto fademusic_error;
!         }
!         if(FAILED(ScriptVariant_IntegerValue(varlist[3], &values[1])))
!         {
!             goto fademusic_error;
!         }
!         musicloop = values[0];
!         musicoffset = values[1];
!     }
!     return S_OK;
! 
! fademusic_error:
!     printf("Function requires 1 value, with an optional 3 for music triggering: fademusic_error(float fade, char name, int loop, unsigned long offset)\n");
!     return E_FAIL;
! }
! 
! //setmusicvolume(left, right)
! HRESULT openbor_setmusicvolume(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG channels[2];
! 
!     if(paramCount < 1)
!     {
!         return S_OK;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], channels)))
!     {
!         goto setmusicvolume_error;
!     }
! 
!     if(paramCount > 1)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[1], channels + 1)))
!         {
!             goto setmusicvolume_error;
!         }
!     }
!     else
!     {
!         channels[1] = channels[0];
!     }
! 
!     sound_volume_music((int)channels[0], (int)channels[1]);
!     return S_OK;
! 
! setmusicvolume_error:
!     printf("values must be integers: setmusicvolume(int left, (optional)int right)\n");
!     return E_FAIL;
! }
! 
! //setmusicvolume(left, right)
! HRESULT openbor_setmusictempo(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG new_tempo;
! 
!     if(paramCount < 1)
!     {
!         return S_OK;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &new_tempo)))
!     {
!         return E_FAIL;
!     }
! 
!     sound_music_tempo(new_tempo);
!     return S_OK;
! }
! 
! //pausemusic(togglr)
! HRESULT openbor_pausemusic(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int pause = 0;
!     if(paramCount < 1)
!     {
!         return S_OK;
!     }
! 
!     pause = (int)ScriptVariant_IsTrue(varlist[0]);
! 
!     sound_pause_music(pause);
!     return S_OK;
! }
! 
! //pausesamples(toggle)
! HRESULT openbor_pausesamples(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int pause = 0;
!     if(paramCount < 1)
!     {
!         return S_OK;
!     }
! 
!     pause = (int)ScriptVariant_IsTrue(varlist[0]);
! 
!     sound_pause_sample(pause);
!     return S_OK;
! }
! 
! //pausesample(toggle,channel)
! HRESULT openbor_pausesample(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
      int pause = 0;
!     LONG channel = 0;
!     if(paramCount < 2)
!     {
!         return S_OK;
!     }
! 
!     pause = (int)ScriptVariant_IsTrue(varlist[0]);
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &channel)))
!     {
!         return S_OK;
!     }
! 
!     sound_pause_single_sample(pause,channel);
!     return S_OK;
! }
! 
! HRESULT openbor_querychannel(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         goto query_error;
!     }
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = sound_query_channel((LONG)ltemp);
! 
!     query_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! HRESULT openbor_stopchannel(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     *pretvar = NULL;
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         goto sc_error;
!     }
!     sound_stop_sample((LONG)ltemp);
! 
!     sc_error:
!     return E_FAIL;
! }
! 
! //isactivesample(channel): returns 1 is sample is active, returns 0 otherwise
! HRESULT openbor_isactivesample(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         goto error;
!     }
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = sound_is_active((LONG)ltemp);
! 
!     error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //sampleid(channel): returns sample id in channel if sample is active, it returns -1 otherwise
! HRESULT openbor_sampleid(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         goto error;
!     }
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = sound_id((LONG)ltemp);
! 
!     error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //playsample(id, priority, lvolume, rvolume, speed, loop)
! HRESULT openbor_playsample(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i, result;
!     LONG value[6] = { -1, 0, savedata.effectvol, savedata.effectvol, 100, 0};
! 
!     for(i = 0; i < 6 && i < paramCount; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i)))
!         {
!             goto playsample_error;
!         }
!     }
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     if((int)value[5])
!     {
!         result = sound_loop_sample((int)value[0], (unsigned int)value[1], (int)value[2], (int)value[3], (unsigned int)value[4]);
!     }
!     else
!     {
!         result = sound_play_sample((int)value[0], (unsigned int)value[1], (int)value[2], (int)value[3], (unsigned int)value[4]);
!     }
!     (*pretvar)->lVal = (LONG)result;
!     return S_OK;
! 
! playsample_error:
!     *pretvar = NULL;
!     printf("Function requires 6 integer values: playsample(int id, unsigned int priority, int lvolume, int rvolume, unsigned int speed, int loop)\n");
!     return E_FAIL;
! }
! 
! // int loadsample(filename, log)
! HRESULT openbor_loadsample(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int arg = 0;
! 
!     if(paramCount < 1)
!     {
!         goto loadsample_error;
!     }
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto loadsample_error;
!     }
! 
!     if(paramCount > 1)
!     {
!         if(varlist[1]->vt == VT_INTEGER)
!         {
!             arg = varlist[1]->lVal;
!         }
!         else
!         {
!             goto loadsample_error;
!         }
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)sound_load_sample(StrCache_Get(varlist[0]->strVal), packfile, arg);
!     return S_OK;
! 
! loadsample_error:
!     printf("Function requires 1 string value and optional log value: loadsample(string {filename} integer {log})\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // void unloadsample(id)
! HRESULT openbor_unloadsample(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG id;
!     *pretvar = NULL;
!     if(paramCount != 1 )
!     {
!         goto unloadsample_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue((varlist[0]), &id)))
!     {
!         goto unloadsample_error;
!     }
! 
!     sound_unload_sample((int)id);
!     return S_OK;
! 
! unloadsample_error:
!     printf("Function requires 1 integer value: unloadsample(int id)\n");
!     return E_FAIL;
! }
! 
! //fadeout(type, speed);
! HRESULT openbor_fadeout(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG type;
!     LONG speed;
!     *pretvar = NULL;
!     if(paramCount < 1 )
!     {
!         goto fade_out_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue((varlist[0]), &type)))
!     {
!         goto fade_out_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue((varlist[1]), &speed)))
! 
!     {
!         fade_out((int)type, (int)speed);
!     }
!     return S_OK;
! 
! fade_out_error:
!     printf("Function requires 2 integer values: fade_out(int type, int speed)\n");
!     return E_FAIL;
! }
! 
! //changepalette(index);
! HRESULT openbor_changepalette(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG index;
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         goto changepalette_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue((varlist[0]), &index)))
!     {
!         goto changepalette_error;
!     }
! 
!     change_system_palette((int)index);
! 
!     return S_OK;
! 
! changepalette_error:
!     printf("Function requires 1 integer value: changepalette(int index)\n");
!     return E_FAIL;
! }
! 
! //changelight(x, z);
! HRESULT openbor_changelight(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG x, z;
!     extern s_axis_plane_vertical_int light;
!     ScriptVariant *arg = NULL;
! 
!     *pretvar = NULL;
!     if(paramCount < 2)
!     {
!         goto changelight_error;
!     }
! 
!     arg = varlist[0];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &x)))
!         {
!             goto changelight_error;
!         }
!         light.x = (int)x;
!     }
! 
!     arg = varlist[1];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &z)))
!         {
!             goto changelight_error;
!         }
!         light.y = (int)z;
!     }
! 
!     return S_OK;
! changelight_error:
!     printf("Function requires 2 integer values: changepalette(int x, int z)\n");
!     return E_FAIL;
! }
! 
! //changeshadowcolor(color, alpha);
! // color = 0 means no gfxshadow, -1 means don't fill the shadow with colour
! // alpha default to 2, <=0 means no alpha effect
! HRESULT openbor_changeshadowcolor(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG c, a;
!     extern int            shadowcolor;
!     extern int            shadowalpha;
! 
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto changeshadowcolor_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &c)))
!     {
!         goto changeshadowcolor_error;
!     }
! 
!     shadowcolor = (int)c;
! 
!     if(paramCount > 1)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[1], &a)))
!         {
!             goto changeshadowcolor_error;
!         }
!         shadowalpha = (int)a;
!     }
! 
!     return S_OK;
! changeshadowcolor_error:
!     printf("Function requires at least 1 integer value, the 2nd integer parameter is optional: changepalette(int colorindex, int alpha)\n");
!     return E_FAIL;
! }
! 
! // ===== gettextobjproperty(name, value) =====
! enum gtop_enum
! {
!     _top_a,
!     _top_font,
!     _top_text,
!     _top_time,
!     _top_x,
!     _top_y,
!     _top_z,
!     _top_the_end,
! };
! 
! int mapstrings_textobjproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname = NULL;
!     int prop;
! 
!     static const char *proplist[] =
!     {
!         "a",
!         "font",
!         "text",
!         "time",
!         "x",
!         "y",
!         "z",
!     };
! 
!     if(paramCount < 2)
!     {
!         return 1;
!     }
! 
!     MAPSTRINGS(varlist[1], proplist, _top_the_end,
!                "'%s' is not a valid textobj property.\n");
! 
!     return 1;
! }
! 
! HRESULT openbor_gettextobjproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     int propind;
! 
!     if(paramCount < 2)
!     {
!         goto gettextobjproperty_error;
!     }
! 
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ind)))
!     {
!         printf("Function's 1st argument must be a numeric value: gettextproperty(int index, \"property\")\n");
!         goto gettextobjproperty_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     mapstrings_textobjproperty(varlist, paramCount);
! 
!     if(ind < 0 || ind >= level->numtextobjs)
!     {
!         (*pretvar)->lVal = 0;
!         return S_OK;
!     }
! 
!     if(varlist[1]->vt != VT_INTEGER)
!     {
!         if(varlist[1]->vt != VT_STR)
!         {
!             printf("Function gettextobjproperty must have a string property name.\n");
!         }
!         goto gettextobjproperty_error;
!     }
! 
!     propind = varlist[1]->lVal;
! 
!     switch(propind)
!     {
!     case _top_font:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)level->textobjs[ind].font;
!         break;
!     }
!     case _top_text:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(level->textobjs[ind].text);
!         break;
!     }
!     case _top_time:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)level->textobjs[ind].time;
!         break;
!     }
!     case _top_x:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)level->textobjs[ind].position.x;
!         break;
!     }
!     case _top_y:
!     case _top_a:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)level->textobjs[ind].position.y;
!         break;
!     }
!     case _top_z:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)level->textobjs[ind].position.z;
!         break;
!     }
!     default:
!         //printf("Property name '%s' is not supported by function gettextobjproperty.\n", propname);
!         goto gettextobjproperty_error;
!         break;
!     }
! 
!     return S_OK;
! 
! gettextobjproperty_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! HRESULT openbor_changetextobjproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     int propind;
!     static char buf[MAX_STR_VAR_LEN];
!     LONG ltemp;
!     const char *ctotext = "changetextobjproperty(int index, \"property\", value)";
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 3)
!     {
!         printf("Function needs at last 3 parameters: %s\n", ctotext);
!         return E_FAIL;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ind)))
!     {
!         printf("Function's 1st argument must be a numeric value: %s\n", ctotext);
!         return E_FAIL;
!     }
! 
!     mapstrings_textobjproperty(varlist, paramCount);
! 
!     if(ind < 0)
!     {
!         printf("Invalid textobj index, must be >= 0\n");
!         return E_FAIL;
!     }
!     else if (ind >= level->numtextobjs)
!     {
!         __reallocto(level->textobjs, level->numtextobjs, ind + 1);
!         level->numtextobjs = ind + 1;
!     }
! 
!     if(varlist[1]->vt != VT_INTEGER)
!     {
!         printf("Invalid property type for changetextobjproperty.\n");
!         return E_FAIL;
!     }
! 
!     propind = varlist[1]->lVal;
! 
!     switch(propind)
!     {
!     case _top_font:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             level->textobjs[ind].font = (LONG)ltemp;
!         }
!         else
!         {
!             goto changetextobjproperty_error;
!         }
!         break;
!     }
!     case _top_text:
!     {
!         ScriptVariant_ToString(varlist[2], buf);
!         level->textobjs[ind].text = malloc(MAX_STR_VAR_LEN);
!         strncpy(level->textobjs[ind].text, buf, MAX_STR_VAR_LEN);
!         break;
!     }
!     case _top_time:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             level->textobjs[ind].time = (LONG)ltemp;
!         }
!         else
!         {
!             goto changetextobjproperty_error;
!         }
!         break;
!     }
!     case _top_x:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             level->textobjs[ind].position.x = (LONG)ltemp;
!         }
!         else
!         {
!             goto changetextobjproperty_error;
!         }
!         break;
!     }
!     case _top_a:
!     case _top_y:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             level->textobjs[ind].position.y = (LONG)ltemp;
!         }
!         else
!         {
!             goto changetextobjproperty_error;
!         }
!         break;
!     }
!     case _top_z:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             level->textobjs[ind].position.z = (LONG)ltemp;
!         }
!         else
!         {
!             goto changetextobjproperty_error;
!         }
!         break;
!     }
!     default:
!         //printf("Property name '%s' is not supported by function changetextobjproperty.\n", propname);
!         return E_FAIL;
!         break;
!     }
! 
!     return S_OK;
! 
! changetextobjproperty_error:
!     ScriptVariant_ToString(varlist[2], buf);
!     printf("Invalid textobj value: %s\n", buf);
!     return E_FAIL;
! }
! 
! // settextobj(int index, int x, int y, int font, int z, char text, int time {optional})
! HRESULT openbor_settextobj(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     LONG X, Y, Z, F, T = 0;
!     static char buf[MAX_STR_VAR_LEN];
!     const char *stotext = "settextobj(int index, int x, int y, int font, int z, char text, int time {optional})";
! 
!     *pretvar = NULL;
! 
! 
!     if(paramCount < 6)
!     {
!         printf("Function needs at least 6 parameters: %s\n", stotext);
!         return E_FAIL;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ind)))
!     {
!         printf("Function's 1st argument must be a numeric value: %s\n", stotext);
!         return E_FAIL;
!     }
! 
!     if(ind < 0)
!     {
!         printf("Invalid textobj index, must be >= 0\n");
!         return E_FAIL;
!     }
!     else if(ind >= level->numtextobjs)
!     {
!         __reallocto(level->textobjs, level->numtextobjs, ind + 1);
!         level->numtextobjs = ind + 1;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &X)))
!     {
!         goto settextobj_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[2], &Y)))
!     {
!         goto settextobj_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[3], &F)))
!     {
!         goto settextobj_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[4], &Z)))
!     {
!         goto settextobj_error;
!     }
!     ScriptVariant_ToString(varlist[5], buf);
!     if(paramCount >= 7 && FAILED(ScriptVariant_IntegerValue(varlist[6], &T)))
!     {
!         goto settextobj_error;
!     }
! 
!     level->textobjs[ind].time = (int)T;
!     level->textobjs[ind].position.x = (int)X;
!     level->textobjs[ind].position.y = (int)Y;
!     level->textobjs[ind].position.z = (int)Z;
!     level->textobjs[ind].font = (int)F;
! 
!     if(!level->textobjs[ind].text)
!     {
!         level->textobjs[ind].text = (char *)malloc(MAX_STR_VAR_LEN);
!     }
!     strncpy(level->textobjs[ind].text, buf, MAX_STR_VAR_LEN);
! 
!     return S_OK;
! 
! settextobj_error:
!     printf("Invalid value(s) for settextobj: %s\n", stotext);
!     return E_FAIL;
! }
! 
! HRESULT openbor_cleartextobj(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     const char *cltotext = "cleartextobj(int index)";
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         printf("Function needs at least 1 parameter: %s\n", cltotext);
!         return E_FAIL;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ind)))
!     {
!         printf("Function's 1st argument must be a numeric value: %s\n", cltotext);
!         return E_FAIL;
!     }
! 
!     if(ind < 0 || ind >= level->numtextobjs)
!     {
!         return S_OK;
!     }
! 
!     level->textobjs[ind].time = 0;
!     level->textobjs[ind].position.x = 0;
!     level->textobjs[ind].position.y = 0;
!     level->textobjs[ind].font = 0;
!     level->textobjs[ind].position.z = 0;
!     if(level->textobjs[ind].text)
!     {
!         free(level->textobjs[ind].text);
!     }
!     level->textobjs[ind].text = NULL;
!     return S_OK;
! }
! 
! // ===== get layer type ======
! enum getlt_enum
! {
!     _glt_background,
!     _glt_bglayer,
!     _glt_fglayer,
!     _glt_frontpanel,
!     _glt_generic,
!     _glt_neon,
!     _glt_panel,
!     _glt_screen,
!     _glt_water,
!     _glt_the_end,
! };
! 
! 
! // ===== getbglayerproperty ======
! enum getbglp_enum
! {
!     _glp_alpha,
!     _glp_amplitude,
!     _glp_bgspeedratio,
!     _glp_enabled,
!     _glp_neon,
!     _glp_quake,
!     _glp_transparency,
!     _glp_watermode,
!     _glp_wavelength,
!     _glp_wavespeed,
!     _glp_xoffset,
!     _glp_xratio,
!     _glp_xrepeat,
!     _glp_xspacing,
!     _glp_z,
!     _glp_zoffset,
!     _glp_zratio,
!     _glp_zrepeat,
!     _glp_zspacing,
!     _glp_the_end,
! };
! 
! int mapstrings_layerproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname = NULL;
!     int prop;
! 
!     static const char *proplist[] =
!     {
!         "alpha",
!         "amplitude",
!         "bgspeedratio",
!         "enabled",
!         "neon",
!         "quake",
!         "transparency",
!         "watermode",
!         "wavelength",
!         "wavespeed",
!         "xoffset",
!         "xratio",
!         "xrepeat",
!         "xspacing",
!         "z",
!         "zoffset",
!         "zratio",
!         "zrepeat",
!         "zspacing",
!     };
! 
!     static const char *typelist[] =
!     {
!         "background",
!         "bglayer",
!         "fglayer",
!         "frontpanel",
!         "generic",
!         "neon",
!         "panel",
!         "water",
!     };
! 
!     if(paramCount < 3)
!     {
!         return 1;
!     }
!     MAPSTRINGS(varlist[0], typelist, _glt_the_end,
!                "Type name '%s' is not supported by function getlayerproperty.\n");
!     MAPSTRINGS(varlist[2], proplist, _glp_the_end,
!                "Property name '%s' is not supported by function getlayerproperty.\n");
! 
!     return 1;
! }
! 
! HRESULT _getlayerproperty(s_layer *layer, int propind, ScriptVariant **pretvar)
! {
! 
!     switch(propind)
!     {
!     case _glp_alpha:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.alpha;
!         break;
!     }
!     case _glp_amplitude:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.water.amplitude;
!         break;
!     }
!     case _glp_bgspeedratio:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)layer->bgspeedratio;
!         break;
!     }
!     case _glp_enabled:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->enabled;
!         break;
!     }
!     case _glp_neon:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->neon;
!         break;
!     }
!     case _glp_quake:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->quake;
!         break;
!     }
!     case _glp_transparency:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.transbg;
!         break;
!     }
!     case _glp_watermode:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.water.watermode;
!         break;
!     }
! 
!     case _glp_wavelength:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.water.wavelength;
!         break;
!     }
!     case _glp_wavespeed:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)layer->drawmethod.water.wavespeed;
!         break;
!     }
!     case _glp_xoffset:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->offset.x;
!         break;
!     }
!     case _glp_xratio:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)layer->ratio.x;
!         break;
!     }
!     case _glp_xrepeat:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.xrepeat;
!         break;
!     }
!     case _glp_xspacing:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->spacing.x;
!         break;
!     }
!     case _glp_z:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->z;
!         break;
!     }
!     case _glp_zoffset:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->offset.z;
!         break;
!     }
!     case _glp_zratio:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)layer->ratio.z;
!         break;
!     }
!     case _glp_zrepeat:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.yrepeat;
!         break;
!     }
!     case _glp_zspacing:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->spacing.z;
!         break;
!     }
!     default:
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     return S_OK;
! }
! 
! HRESULT _changelayerproperty(s_layer *layer, int propind, ScriptVariant *var)
! {
!     LONG temp;
!     DOUBLE temp2;
!     switch(propind)
!     {
!     case _glp_alpha:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.alpha = temp;
!         break;
!     }
!     case _glp_amplitude:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.water.amplitude = temp;
!         break;
!     }
!     case _glp_bgspeedratio:
!     {
!         if(FAILED(ScriptVariant_DecimalValue(var, &temp2)))
!         {
!             return E_FAIL;
!         }
!         layer->bgspeedratio = temp2;
!         break;
!     }
!     case _glp_enabled:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->enabled = temp;
!         break;
!     }
!     case _glp_neon:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->neon = temp;
!         break;
!     }
!     case _glp_quake:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->quake = temp;
!         break;
!     }
!     case _glp_transparency:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.transbg = temp;
!         break;
!     }
!     case _glp_watermode:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.water.watermode = temp;
!         break;
!     }
! 
!     case _glp_wavelength:
!     {
!         if(FAILED(ScriptVariant_DecimalValue(var, &temp2)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.water.wavelength = temp2;
!         break;
!     }
!     case _glp_wavespeed:
!     {
!         if(FAILED(ScriptVariant_DecimalValue(var, &temp2)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.water.wavespeed = temp2;
!         break;
!     }
!     case _glp_xoffset:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->offset.x = temp;
!         break;
!     }
!     case _glp_xratio:
!     {
!         if(FAILED(ScriptVariant_DecimalValue(var, &temp2)))
!         {
!             return E_FAIL;
!         }
!         layer->ratio.x = temp2;
!         break;
!     }
!     case _glp_xrepeat:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.xrepeat = temp;
!         break;
!     }
!     case _glp_xspacing:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->spacing.x = temp;
!         break;
!     }
!     case _glp_z:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->z = temp;
!         break;
!     }
!     case _glp_zoffset:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->offset.z = temp;
!         break;
!     }
!     case _glp_zratio:
!     {
!         if(FAILED(ScriptVariant_DecimalValue(var, &temp2)))
!         {
!             return E_FAIL;
!         }
!         layer->ratio.z = temp2;
!         break;
!     }
!     case _glp_zrepeat:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.yrepeat = temp;
!         break;
!     }
!     case _glp_zspacing:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->spacing.z = temp;
!         break;
!     }
!     default:
!         return E_FAIL;
!     }
!     return S_OK;
! }
! 
! s_layer *_getlayer(int type, int ind)
! {
!     switch(type)
!     {
!     case _glt_background:
!         return level->background;
!     case _glt_bglayer:
!         if(ind < 0 || ind >= level->numbglayers)
!         {
!             return NULL;
!         }
!         return level->bglayers[ind];
!     case _glt_fglayer:
!         if(ind < 0 || ind >= level->numfglayers)
!         {
!             return NULL;
!         }
!         return level->fglayers[ind];
!     case _glt_frontpanel:
!         if(ind < 0 || ind >= level->numfrontpanels)
!         {
!             return NULL;
!         }
!         return level->frontpanels[ind];
!     case _glt_generic:
!         if(ind < 0 || ind >= level->numgenericlayers)
!         {
!             return NULL;
!         }
!         return level->genericlayers[ind];
!     case _glt_neon:
!         if(ind < 0 || ind >= level->numpanels)
!         {
!             return NULL;
!         }
!         return level->panels[ind][1];
!     case _glt_panel:
!         if(ind < 0 || ind >= level->numpanels)
!         {
!             return NULL;
!         }
!         return level->panels[ind][0];
!     case _glt_screen:
!         if(ind < 0 || ind >= level->numpanels)
!         {
!             return NULL;
!         }
!         return level->panels[ind][2];
!     case _glt_water:
!         if(ind < 0 || ind >= level->numwaters)
!         {
!             return NULL;
!         }
!         return level->waters[ind];
!     default:
!         return NULL;
!     }
! }
! 
! // getlayerproperty(type, index, propertyname);
! HRESULT openbor_getlayerproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     int propind, type;
!     s_layer *layer = NULL;
! 
!     if(paramCount < 3)
!     {
!         goto getlayerproperty_error;
!     }
! 
!     mapstrings_layerproperty(varlist, paramCount);
! 
!     type = varlist[0]->lVal;
!     propind = varlist[2]->lVal;
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &ind)))
!     {
!         goto getlayerproperty_error2;
!     }
! 
!     layer = _getlayer(type, (int)ind);
! 
!     if(layer == NULL)
!     {
!         goto getlayerproperty_error2;
!     }
! 
!     if(FAILED(_getlayerproperty(layer, propind, pretvar)))
!     {
!         goto getlayerproperty_error3;
!     }
! 
!     return S_OK;
! 
! getlayerproperty_error:
!     *pretvar = NULL;
!     printf("Function getlayerproperty must have 3 parameters: layertype, index and propertyname\n");
!     return E_FAIL;
! getlayerproperty_error2:
!     *pretvar = NULL;
!     printf("Layer not found!\n");
!     return E_FAIL;
! getlayerproperty_error3:
!     *pretvar = NULL;
!     printf("Bad property name or value.\n");
!     return E_FAIL;
! }
! 
! // changelayerproperty(type, index, propertyname);
! HRESULT openbor_changelayerproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     int propind, type;
!     s_layer *layer = NULL;
!     *pretvar = NULL;
! 
!     if(paramCount < 4)
!     {
!         goto chglayerproperty_error;
!     }
! 
!     mapstrings_layerproperty(varlist, paramCount);
! 
!     type = varlist[0]->lVal;
!     propind = varlist[2]->lVal;
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &ind)))
!     {
!         goto chglayerproperty_error2;
!     }
! 
!     layer = _getlayer(type, (int)ind);
! 
!     if(layer == NULL)
!     {
!         goto chglayerproperty_error2;
!     }
! 
!     if(FAILED(_changelayerproperty(layer, propind, varlist[3])))
!     {
!         goto chglayerproperty_error3;
!     }
! 
!     return S_OK;
! 
! chglayerproperty_error:
!     printf("Function changelayerproperty must have 4 parameters: layertype, index, propertyname and value\n");
!     return E_FAIL;
! chglayerproperty_error2:
!     printf("Layer not found!\n");
!     return E_FAIL;
! chglayerproperty_error3:
!     printf("Layer property not understood or bad value.\n");
!     return E_FAIL;
! }
! 
! //shutdown(status, message)
! HRESULT openbor_shutdown(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp = 0;
! 
!     *pretvar = NULL;
! 
!     if(paramCount > 0 && FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         goto shutdown_error;
!     }
!     if(paramCount > 1 && varlist[1]->vt != VT_STR)
!     {
!         goto shutdown_error;
!     }
! 
!     borShutdown((LONG)ltemp,  paramCount > 1 ? StrCache_Get(varlist[1]->strVal) : (DEFAULT_SHUTDOWN_MESSAGE));
! 
!     return S_OK;
! shutdown_error:
!     printf("shutdown(status, message): both parameters are optional but must be valid.\n");
!     return E_FAIL;
! }
! 
! //jumptobranch(name, immediate)
! HRESULT openbor_jumptobranch(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     extern char branch_name[MAX_NAME_LEN + 1];
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto jumptobranch_error;
!     }
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto jumptobranch_error;
!     }
! 
!     strncpy(branch_name, StrCache_Get(varlist[0]->strVal), MIN(MAX_NAME_LEN, MAX_STR_VAR_LEN)); // copy the string value to branch name
! 
!     if(paramCount >= 2)
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &ltemp)))
!         {
!             endgame = (LONG)ltemp;
!             // 1 means goto that level immediately, or, wait until the level is complete
!         }
!         else
!         {
!             goto jumptobranch_error;
!         }
!     }
! 
!     return S_OK;
! jumptobranch_error:
!     printf("Function requires 1 string value, the second argument is optional(int): jumptobranch(name, immediate)\n");
!     return E_FAIL;
! }
! 
! //bindentity(entity, target, x, z, a, direction, binding.ani_bind);
! //bindentity(entity, NULL()); // unbind
! HRESULT openbor_bindentity(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL;
!     entity *other = NULL;
!     ScriptVariant *arg = NULL;
!     void adjust_bind(entity * e);
!     LONG x = 0, z = 0, a = 0, dir = 0, anim = 0, sortid = -1;
! 
!     *pretvar = NULL;
!     if(paramCount < 2)
!     {
!         return E_FAIL;
!     }
! 
!     ent = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         return S_OK;
!     }
! 
!     other = (entity *)(varlist[1])->ptrVal;
!     if(!other)
!     {
!         ent->binding.ent = NULL;
!         ent->binding.bind_toggle.x = 0;
!         ent->binding.bind_toggle.z = 0;
!         ent->binding.bind_toggle.y = 0;
!         return S_OK;
!     }
! 
!     ent->binding.ent = other;
!     ent->binding.sortid = sortid;
! 
!     if(paramCount < 3)
!     {
!         goto BIND;
!     }
!     // x
!     arg = varlist[2];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &x)))
!         {
!             return E_FAIL;
!         }
! 
!         ent->binding.offset.x = (int)x;
!         ent->binding.bind_toggle.x = 1;
!     } else ent->binding.bind_toggle.x = 0;
!     if(paramCount < 4)
!     {
!         goto BIND;
!     }
!     // z
!     arg = varlist[3];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &z)))
!         {
!             return E_FAIL;
!         }
!         ent->binding.offset.z = (int)z;
!         ent->binding.bind_toggle.z = 1;
!     } else ent->binding.bind_toggle.z = 0;
!     if(paramCount < 5)
!     {
!         goto BIND;
!     }
!     // a
!     arg = varlist[4];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &a)))
!         {
!             return E_FAIL;
!         }
!         ent->binding.offset.y = (int)a;
!         ent->binding.bind_toggle.y = 1;
!     } else ent->binding.bind_toggle.y = 0;
!     if(paramCount < 6)
!     {
!         goto BIND;
!     }
!     // direction
!     arg = varlist[5];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &dir)))
!         {
!             return E_FAIL;
!         }
!         ent->binding.direction = (int)dir;
!     }
!     if(paramCount < 7)
!     {
!         goto BIND;
!     }
!     // animation
!     arg = varlist[6];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &anim)))
!         {
!             return E_FAIL;
!         }
!         ent->binding.ani_bind = (int)anim;
!     }
!     if(paramCount < 8)
!     {
!         goto BIND;
!     }
!     // sortid
!     arg = varlist[7];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &sortid)))
!         {
!             return E_FAIL;
!         }
!         ent->binding.sortid = (int)sortid;
!     }
! 
! BIND:
!     adjust_bind(ent);
! 
!     return S_OK;
! }
! 
! //array(size);
! HRESULT openbor_array(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG size;
!     Varlist *array;
! 
!     if(paramCount < 1 || FAILED(ScriptVariant_IntegerValue(varlist[0], &size)) || size < 0)
!     {
!         printf("Function requires 1 positive int value: array(int size)\n");
!         goto array_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     array = malloc(sizeof(*array));
!     (*pretvar)->ptrVal = (VOID *)array;
! 
!     if((*pretvar)->ptrVal == NULL)
!     {
!         printf("Not enough memory: array(%d)\n", (int)size);
!         goto array_error;
!     }
! 
!     Varlist_Init(array, size);
! 
!     List_InsertAfter(&scriptheap, (void *)(array), "openbor_array");
!     return S_OK;
! 
! array_error:
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //size(array)
! HRESULT openbor_size(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto size_error;
!     }
! 
!     // By White Dragon
!     if( array->list->size != 0 ) //or array->list->first
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)array->list->size;
!     }
!     else
!     {
!         ScriptVariant_Copy(*pretvar, array->vars);
!     }
! 
!     return S_OK;
! size_error:
!     printf("Function requires 1 array handle: %s(array)\n", "size");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //get(array, index);
! HRESULT openbor_get(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *ptmpvar;
!     Varlist *array;
!     LONG ltemp;
! 
!     if(paramCount < 2 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto get_error;
!     }
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         ptmpvar = Varlist_GetByName(array, StrCache_Get(varlist[1]->strVal));
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &ltemp)))
!     {
!         ptmpvar = Varlist_GetByIndex(array, (LONG)ltemp);
!     }
!     else
!     {
!         goto get_error;
!     }
! 
!     if(ptmpvar)
!     {
!         ScriptVariant_Copy(*pretvar,  ptmpvar);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
!     return S_OK;
! 
! get_error:
!     printf("Function requires 1 array handle and 1 int value: get(array, int index)\n");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //set(array, index, value);
! HRESULT openbor_set(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     LONG ltemp;
! 
!     *pretvar = NULL;
!     if(paramCount < 3 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto set_error;
!     }
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         Varlist_SetByName(array, StrCache_Get(varlist[1]->strVal), varlist[2]);
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &ltemp)))
!     {
!         Varlist_SetByIndex(array, (LONG)ltemp, varlist[2]);
!     }
!     else
!     {
!         goto set_error;
!     }
! 
!     return S_OK;
! 
! set_error:
!     printf("Function requires 1 array handle, 1 int value and 1 value: set(array, int index, value)\n");
!     return E_FAIL;
! }
! 
! //delete(array, index); // By White Dragon
! HRESULT openbor_delete(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     LONG index;
! 
!     *pretvar = NULL;
!     if(paramCount < 2 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto set_error;
!     }
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         if ( !Varlist_DeleteByName(array, StrCache_Get(varlist[1]->strVal)) ) goto set_error;
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &index)))
!     {
!         if ( !Varlist_DeleteByIndex(array, (int)index) ) goto set_error;
!     }
!     else
!     {
!         goto set_error;
!     }
! 
!     return S_OK;
! 
! set_error:
!     printf("Function requires 1 array handle and 1 int value (index): delete(array, index)\n");
!     return E_FAIL;
! }
! 
! //add(array, index); // By White Dragon
! HRESULT openbor_add(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     LONG index;
! 
!     *pretvar = NULL;
!     if(paramCount < 2 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto add_error;
!     }
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         Varlist_SetByName(array, StrCache_Get(varlist[1]->strVal), varlist[2]);
!     }
!     else if( SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &index)) )
!     {
!         if ( !Varlist_AddByIndex(array, (int)index, varlist[2]) ) goto add_error;
!     }
!     else
!     {
!         goto add_error;
!     }
! 
!     return S_OK;
! 
! add_error:
!     printf("Function requires 1 array handle and 1 int value (index): add(array, index)\n");
!     return E_FAIL;
! }
! 
! //reset(array)
! HRESULT openbor_reset(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto reset_error;
!     }
!     List_Reset(array->list);
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)(array->list->current != NULL);
! 
!     return S_OK;
! reset_error:
!     printf("Function requires 1 array handle: %s(array)\n", "reset");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //next(array)
! HRESULT openbor_next(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto next_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)(List_GotoNext(array->list));
! 
!     return S_OK;
! next_error:
!     printf("Function requires 1 array handle: %s(array)\n", "next");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //previous(array)
! HRESULT openbor_previous(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto previous_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)(List_GotoPrevious(array->list));
! 
!     return S_OK;
! previous_error:
!     printf("Function requires 1 array handle: %s(array)\n", "previous");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //islast(array)
! HRESULT openbor_islast(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto islast_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)(  List_Retrieve(array->list) == List_GetLast(array->list) );
! 
!     return S_OK;
! islast_error:
!     printf("Function requires 1 array handle: %s(array)\n", "islast");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //isfirst(array)
! HRESULT openbor_isfirst(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto isfirst_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)(  List_Retrieve(array->list) == List_GetFirst(array->list) );
! 
!     return S_OK;
! isfirst_error:
!     printf("Function requires 1 array handle: %s(array)\n", "isfirst");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //key(array)
! HRESULT openbor_key(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     char *name;
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto key_error;
!     }
! 
!     name = List_GetName(array->list);
!     if(name)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(name);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
! 
!     return S_OK;
! key_error:
!     printf("Function requires 1 array handle: %s(array)\n", "key");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //value(array)
! HRESULT openbor_value(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *var;
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto value_error;
!     }
! 
!     var = List_Retrieve(array->list);
!     if(var)
!     {
!         ScriptVariant_Copy(*pretvar, var);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
! 
!     return S_OK;
! value_error:
!     printf("Function requires 1 array handle: %s(array)\n", "value");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //allocscreen(int w, int h);
! HRESULT openbor_allocscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG w, h;
!     s_screen *screen;
! 
!     if(paramCount < 2)
!     {
!         goto allocscreen_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &w)))
!     {
!         goto allocscreen_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &h)))
!     {
!         goto allocscreen_error;
!     }
! 
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     screen = allocscreen((int)w, (int)h, PIXEL_32);
!     if(screen)
!     {
!         clearscreen(screen);
!     }
!     (*pretvar)->ptrVal = (VOID *)screen;
! 
!     if((*pretvar)->ptrVal == NULL)
!     {
!         printf("Not enough memory: allocscreen(%d, %d)\n", (int)w, (int)h);
!         (*pretvar) = NULL;
!         return E_FAIL;
!     }
!     List_InsertAfter(&scriptheap, (void *)((*pretvar)->ptrVal), "openbor_allocscreen");
!     return S_OK;
! 
! allocscreen_error:
!     printf("Function requires 2 int values: allocscreen(int width, int height)\n");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //clearscreen(s_screen* screen)
! HRESULT openbor_clearscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     s_screen *screen;
! 
!     *pretvar = NULL;
!     if(paramCount != 1)
!     {
!         goto clearscreen_error;
!     }
!     if(varlist[0]->vt != VT_PTR)
!     {
!         goto clearscreen_error;
!     }
! 
!     screen = (s_screen *)varlist[0]->ptrVal;
! 
!     if(screen == NULL)
!     {
!         printf("Error: NULL pointer passed to clearscreen(void screen)\n");
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     clearscreen(screen);
!     return S_OK;
! 
! clearscreen_error:
!     printf("Function requires a screen pointer: clearscreen(void screen)\n");
!     return E_FAIL;
! }
! 
! int mapstrings_drawmethodproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname = NULL;
!     int prop;
! 
!     static const char *proplist[] =
!     {
!         "alpha",
!         "amplitude",
!         "beginsize",
!         "centerx",
!         "centery",
!         "channelb",
!         "channelg",
!         "channelr",
!         "clip",
!         "cliph",
!         "clipw",
!         "clipx",
!         "clipy",
!         "enabled",
!         "endsize",
!         "fillcolor",
!         "flag",
!         "fliprotate",
!         "flipx",
!         "flipy",
!         "perspective",
!         "remap",
!         "reset",
!         "rotate",
!         "scalex",
!         "scaley",
!         "shiftx",
!         "table",
!         "tintcolor",
!         "tintmode",
!         "transbg",
!         "watermode",
!         "wavelength",
!         "wavespeed",
!         "wavetime",
!         "xrepeat",
!         "xspan",
!         "yrepeat",
!         "yspan",
!     };
! 
! 
!     if(paramCount < 2)
!     {
!         return 1;
!     }
!     MAPSTRINGS(varlist[1], proplist, _dm_the_end,
!                "Property name '%s' is not supported by drawmethod.\n");
! 
!     return 1;
! }
! 
! // changedrawmethod(entity, propertyname, value);
! HRESULT openbor_changedrawmethod(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *e;
!     LONG temp = 0;
!     DOUBLE ftemp = 0;
!     s_drawmethod *pmethod;
!     *pretvar = NULL;
! 
!     if(paramCount < 3)
!     {
!         goto changedm_error;
!     }
! 
!     mapstrings_drawmethodproperty(varlist, paramCount);
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto changedm_error;
!     }
! 
!     if(e)
!     {
!         pmethod = &(e->drawmethod);
!     }
!     else
!     {
!         pmethod = &(drawmethod);
!     }
! 
!     switch(varlist[1]->lVal)
!     {
! 
!     case _dm_alpha:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->alpha = (int)temp;
!         break;
!     case _dm_amplitude:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.amplitude = (int)temp;
!         break;
!     case _dm_beginsize:
!         if(FAILED(ScriptVariant_DecimalValue(varlist[2], &ftemp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.beginsize = (float)ftemp;
!         break;
!     case _dm_centerx:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->centerx = (int)temp;
!         break;
!     case _dm_centery:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->centery = (int)temp;
!         break;
!     case _dm_channelb:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->channelb = (int)temp;
!         break;
!     case _dm_channelg:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->channelg = (int)temp;
!         break;
!     case _dm_channelr:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->channelr = (int)temp;
!         break;
!     case _dm_clip:
!         if(paramCount < 6)
!         {
!             return E_FAIL;
!         }
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipx = (int)temp;
!         if(FAILED(ScriptVariant_IntegerValue(varlist[3], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipy = (int)temp;
!         if(FAILED(ScriptVariant_IntegerValue(varlist[4], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipw = (int)temp;
!         if(FAILED(ScriptVariant_IntegerValue(varlist[5], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->cliph = (int)temp;
!         break;
!     case _dm_clipx:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipx = (int)temp;
!         break;
!     case _dm_clipy:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipy = (int)temp;
!         break;
!     case _dm_clipw:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipw = (int)temp;
!         break;
!     case _dm_cliph:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->cliph = (int)temp;
!         break;
!     case _dm_enabled:
!     case _dm_flag:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->flag = (int)temp;
!         break;
!     case _dm_endsize:
!         if(FAILED(ScriptVariant_DecimalValue(varlist[2], &ftemp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.endsize = (float)ftemp;
!         break;
!     case _dm_fillcolor:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->fillcolor = (int)temp;
!         break;
!     case _dm_fliprotate:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->fliprotate = (int)temp;
!         break;
!     case _dm_flipx:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->flipx = (int)temp;
!         break;
!     case _dm_flipy:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->flipy = (int)temp;
!         break;
!     case _dm_perspective:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.perspective = (int)temp;
!         break;
!     case _dm_remap:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->remap = (int)temp;
!         break;
!     case _dm_reset:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         if(temp)
!         {
!             *pmethod = plainmethod;
!         }
!         break;
!     case _dm_rotate:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->rotate = (float)temp;
!         break;
!     case _dm_scalex:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->scalex = (int)temp;
!         break;
!     case _dm_scaley:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->scaley = (int)temp;
!         break;
!     case _dm_shiftx:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->shiftx = (int)temp;
!         break;
!     case _dm_table:
!         if(varlist[2]->vt != VT_PTR && varlist[2]->vt != VT_EMPTY )
!         {
!             return E_FAIL;
!         }
!         pmethod->table = (void *)varlist[2]->ptrVal;
!         break;
!     case _dm_tintmode:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->tintmode = (int)temp;
!         break;
!     case _dm_tintcolor:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->tintcolor = (int)temp;
!         break;
!     case _dm_transbg:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->transbg = (int)temp;
!         break;
!     case _dm_watermode:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.watermode = (int)temp;
!         break;
!     case _dm_wavelength:
!         if(FAILED(ScriptVariant_DecimalValue(varlist[2], &ftemp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.wavelength = (float)ftemp;
!         break;
!     case _dm_wavespeed:
!         if(FAILED(ScriptVariant_DecimalValue(varlist[2], &ftemp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.wavespeed = (float)ftemp;
!         break;
!     case _dm_wavetime:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.wavetime = (int)(temp * pmethod->water.wavespeed);
!         break;
!     case _dm_xrepeat:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->xrepeat = (int)temp;
!         break;
!     case _dm_yrepeat:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->yrepeat = (int)temp;
!         break;
!     case _dm_xspan:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->xspan = (int)temp;
!         break;
!     case _dm_yspan:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->yspan = (int)temp;
!         break;
!     default:
!         break;
! 
!     }
! 
!     return S_OK;
! 
! changedm_error:
!     printf("Function changedrawmethod must have at least 3 parameters: entity, propertyname, value\n");
!     return E_FAIL;
! }
! 
! //getdrawmethod(<entity>, <property>)
! HRESULT openbor_getdrawmethod(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     /*
!     getdrawmethod
!     Damon V. Caskey
!     2013-11-09
! 
!     Allow module author to read current drawmethod settings.
!     */
!     entity *e;
!     s_drawmethod *pmethod;
! 
!     if(paramCount < 2)
!     {
!         goto getdm_error;
!     }
! 
!     ScriptVariant_Clear(*pretvar);
!     mapstrings_drawmethodproperty(varlist, paramCount);
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto getdm_error;
!     }
! 
!     if(e)
!     {
!         pmethod = &(e->drawmethod);
!     }
!     else
!     {
!         pmethod = &(drawmethod);
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     switch(varlist[1]->lVal)
!     {
!         case _dm_alpha:
!             (*pretvar)->lVal = (int)pmethod->alpha;
!             break;
!         case _dm_amplitude:
!             (*pretvar)->lVal = (int)pmethod->water.amplitude;
!             break;
!         case _dm_beginsize:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (float)pmethod->water.beginsize;
!             break;
!         case _dm_centerx:
!             (*pretvar)->lVal = (int)pmethod->centerx;
!             break;
!         case _dm_centery:
!             (*pretvar)->lVal = (int)pmethod->centery;
!             break;
!         case _dm_channelb:
!             (*pretvar)->lVal = (int)pmethod->channelb;
!             break;
!         case _dm_channelg:
!             (*pretvar)->lVal = (int)pmethod->channelg;
!             break;
!         case _dm_channelr:
!             (*pretvar)->lVal = (int)pmethod->channelr;
!             break;
!         case _dm_clipx:
!             (*pretvar)->lVal = (int)pmethod->clipx;
!             break;
!         case _dm_clipy:
!             (*pretvar)->lVal = (int)pmethod->clipy;
!             break;
!         case _dm_clipw:
!             (*pretvar)->lVal = (int)pmethod->clipw;
!             break;
!         case _dm_cliph:
!             (*pretvar)->lVal = (int)pmethod->cliph;
!             break;
!         case _dm_endsize:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (float)pmethod->water.endsize;
!             break;
!         case _dm_fillcolor:
!             (*pretvar)->lVal = (int)pmethod->fillcolor;
!             break;
!         case _dm_fliprotate:
!             (*pretvar)->lVal = (int)pmethod->fliprotate;
!             break;
!         case _dm_flipx:
!             (*pretvar)->lVal = (int)pmethod->flipx;
!             break;
!         case _dm_flipy:
!             (*pretvar)->lVal = (int)pmethod->flipy;
!             break;
!         case _dm_perspective:
!             (*pretvar)->lVal = (int)pmethod->water.perspective;
!             break;
!         case _dm_remap:
!             (*pretvar)->lVal = (int)pmethod->remap;
!             break;
!         case _dm_rotate:
!             (*pretvar)->lVal = (int)pmethod->rotate;
!             break;
!         case _dm_scalex:
!             (*pretvar)->lVal = (int)pmethod->scalex;
!             break;
!         case _dm_scaley:
!             (*pretvar)->lVal = (int)pmethod->scaley;
!             break;
!         case _dm_shiftx:
!             (*pretvar)->lVal = (int)pmethod->shiftx;
!             break;
!         case _dm_table:
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (void *)pmethod->table;
!             break;
!         case _dm_tintmode:
!             (*pretvar)->lVal = (int)pmethod->tintmode;
!             break;
!         case _dm_tintcolor:
!             (*pretvar)->lVal = (int)pmethod->tintcolor;
!             break;
!         case _dm_transbg:
!             (*pretvar)->lVal = (int)pmethod->transbg;
!             break;
!         case _dm_watermode:
!             (*pretvar)->lVal = (int)pmethod->water.watermode;
!             break;
!         case _dm_wavelength:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (float)pmethod->water.wavelength;
!             break;
!         case _dm_wavespeed:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (float)pmethod->water.wavespeed;
!             break;
!         case _dm_wavetime:
!             (*pretvar)->lVal = (int)pmethod->water.wavetime;
!             break;
!         case _dm_xrepeat:
!             (*pretvar)->lVal = (int)pmethod->xrepeat;
!             break;
!         case _dm_yrepeat:
!             (*pretvar)->lVal = (int)pmethod->yrepeat;
!             break;
!         case _dm_xspan:
!             (*pretvar)->lVal = (int)pmethod->xspan;
!             break;
!         case _dm_yspan:
!             (*pretvar)->lVal = pmethod->yspan;
!             break;
!         default:
!         case _dm_enabled:
!         case _dm_flag:
!             (*pretvar)->lVal = (int)pmethod->flag;
!             break;
!     }
! 
!     return S_OK;
! 
! getdm_error:
!     printf("Function getdrawmethod must have at least 2 parameters: entity, propertyname\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //deprecated
! //setdrawmethod(entity, int flag, int scalex, int scaley, int flipx, int flipy, int shiftx, int alpha, int remap, int fillcolor, int rotate, int fliprotate, int transparencybg, void* colourmap, int centerx, int centery);
! HRESULT openbor_setdrawmethod(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG value[14];
!     entity *e;
!     s_drawmethod *pmethod;
!     int i;
! 
!     *pretvar = NULL;
!     if(paramCount < 2)
!     {
!         goto setdrawmethod_error;
!     }
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto setdrawmethod_error;
!     }
! 
!     if(e)
!     {
!         pmethod = &(e->drawmethod);
!     }
!     else
!     {
!         pmethod = &(drawmethod);
!     }
! 
!     memset(value, 0, sizeof(value));
!     for(i = 1; i < paramCount && i < 13; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto setdrawmethod_error;
!         }
!     }
! 
!     if(paramCount >= 14 && varlist[13]->vt != VT_PTR && varlist[13]->vt != VT_EMPTY)
!     {
!         goto setdrawmethod_error;
!     }
! 
!     for(i = 14; i < paramCount && i < 16; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 2)))
!         {
!             goto setdrawmethod_error;
!         }
!     }
! 
!     pmethod->flag = (int)value[0];
!     pmethod->scalex = (int)value[1];
!     pmethod->scaley = (int)value[2];
!     pmethod->flipx = (int)value[3];
!     pmethod->flipy = (int)value[4];
!     pmethod->shiftx = (int)value[5];
!     pmethod->alpha = (int)value[6];
!     pmethod->remap = (int)value[7];
!     pmethod->fillcolor = (int)value[8];
!     pmethod->rotate = ((int)value[9]) % 360;
!     pmethod->fliprotate = (int)value[10];
!     pmethod->transbg = (int)value[11];
!     if(paramCount >= 14)
!     {
!         pmethod->table = (unsigned char *)varlist[13]->ptrVal;
!     }
!     pmethod->centerx = (int)value[12];
!     pmethod->centery = (int)value[13];
! 
!     if(pmethod->rotate < 0)
!     {
!         pmethod->rotate += 360;
!     }
!     return S_OK;
! 
! setdrawmethod_error:
!     printf("Function need a valid entity handle and at least 1 interger parameter, setdrawmethod(entity, int flag, int scalex, int scaley, int flipx, int flipy, int shiftx, int alpha, int remap, int fillcolor, int rotate, int fliprotate, int transparencybg, void* colourmap, centerx, centery)\n");
!     return E_FAIL;
! }
! 
! //updateframe(entity, int frame);
! HRESULT openbor_updateframe(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG f;
!     entity *e;
!     void update_frame(entity * ent, int f);
! 
!     *pretvar = NULL;
!     if(paramCount < 2)
!     {
!         goto updateframe_error;
!     }
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto updateframe_error;
!     }
! 
!     if(!e)
!     {
!         goto updateframe_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &f)))
!     {
!         goto updateframe_error;
!     }
! 
!     update_frame(e, (int)f);
! 
!     return S_OK;
! 
! updateframe_error:
!     printf("Function need a valid entity handle and at an interger parameter: updateframe(entity, int frame)\n");
!     return E_FAIL;
! }
! 
! //executeanimation(entity, int anim, int resetable);
! HRESULT openbor_executeanimation(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG anim, resetable = 0;
!     entity *e;
! 
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto executeanimation_error;
!     }
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto executeanimation_error;
!     }
! 
!     if(!e)
!     {
!         goto executeanimation_error;
!     }
! 
!     e->takeaction = common_animation_normal;
!     e->attacking = ATTACKING_INACTIVE;
!     e->idling = IDLING_INACTIVE;
!     e->drop = 0;
!     e->falling = 0;
      e->inpain = 0;
      e->rising = 0;
      e->riseattacking = 0;
      e->edge = EDGE_NO;
!     e->ducking = DUCK_INACTIVE;
!     e->inbackpain = 0;
!     e->blocking = 0;
! 
!     if(paramCount == 1)
!     {
!         return S_OK;
!     }
! 
!     if(paramCount > 1 && FAILED(ScriptVariant_IntegerValue(varlist[1], &anim)))
!     {
!         goto executeanimation_error;
!     }
!     if(paramCount > 2 && FAILED(ScriptVariant_IntegerValue(varlist[2], &resetable)))
!     {
!         goto executeanimation_error;
!     }
!     ent_set_anim(e, (int)anim, (int)resetable);
! 
!     return S_OK;
! 
! executeanimation_error:
!     printf("Function need a valid entity handle, the other 2 integer parameters are optional: performattack(entity, int anim, int resetable)\n");
!     return E_FAIL;
! }
! 
! //performattack(entity, int anim, int resetable);
! HRESULT openbor_performattack(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG anim, resetable = 0;
!     entity *e;
! 
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto performattack_error;
!     }
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto performattack_error;
!     }
! 
!     if(!e)
!     {
!         goto performattack_error;
!     }
! 
!     e->takeaction = common_attack_proc;
!     e->attacking = ATTACKING_ACTIVE;
!     e->idling = IDLING_INACTIVE;
!     e->drop = 0;
!     e->falling = 0;
      e->inpain = 0;
      e->rising = 0;
      e->riseattacking = 0;
!     e->edge = EDGE_NO;
!     e->inbackpain = 0;
!     e->blocking = 0;
! 
!     if(paramCount == 1)
!     {
!         return S_OK;
!     }
! 
!     if(paramCount > 1 && FAILED(ScriptVariant_IntegerValue(varlist[1], &anim)))
!     {
!         goto performattack_error;
!     }
!     if(paramCount > 2 && FAILED(ScriptVariant_IntegerValue(varlist[2], &resetable)))
!     {
!         goto performattack_error;
!     }
!     ent_set_anim(e, (int)anim, (int)resetable);
! 
!     return S_OK;
! 
! performattack_error:
!     printf("Function need a valid entity handle, the other 2 integer parameters are optional: performattack(entity, int anim, int resetable)\n");
!     return E_FAIL;
! }
! 
! //setidle(entity, int anim, int resetable, int stalladd);
! HRESULT openbor_setidle(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG anim = 0, resetable = 0, stalladd = 0;
!     entity *e;
!     extern unsigned int _time;
! 
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto setidle_error;
!     }
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto setidle_error;
!     }
! 
!     if(!e)
!     {
!         goto setidle_error;
!     }
! 
!     e->takeaction = NULL;
!     e->attacking = ATTACKING_INACTIVE;
!     e->idling = 1;
!     e->drop = 0;
!     e->falling = 0;
      e->inpain = 0;
      e->rising = 0;
      e->riseattacking = 0;
      e->edge = EDGE_NO;
!     e->ducking = DUCK_INACTIVE;
!     e->inbackpain = 0;
!     e->blocking = 0;
!     e->nograb = e->nograb_default; //e->nograb = 0;
!     e->destx = e->position.x;
!     e->destz = e->position.z;
! 
!     if(paramCount == 1)
!     {
!         return S_OK;
!     }
! 
!     if(paramCount > 1 && FAILED(ScriptVariant_IntegerValue(varlist[1], &anim)))
!     {
!         goto setidle_error;
!     }
!     if(paramCount > 2 && FAILED(ScriptVariant_IntegerValue(varlist[2], &resetable)))
!     {
!         goto setidle_error;
!     }
!     if(paramCount > 3 && FAILED(ScriptVariant_IntegerValue(varlist[3], &stalladd)))
!     {
!         goto setidle_error;
!     }
!     ent_set_anim(e, (int)anim, (int)resetable);
! 
!     if(stalladd > 0)
!     {
!         e->stalltime = _time + stalladd;
!     }
! 
!     return S_OK;
! 
! setidle_error:
!     printf("Function need a valid entity handle, the other 3 integer parameters are optional: setidle(entity, int anim, int resetable, int stalladd)\n");
!     return E_FAIL;
! }
! 
! //getentity(int index_from_list)
! HRESULT openbor_getentity(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     extern entity **ent_list;
!     extern int ent_list_size;
! 
!     if(paramCount != 1)
!     {
!         goto getentity_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ind)))
!     {
!         goto getentity_error;
!     }
! 
!     ScriptVariant_Clear(*pretvar);
! 
!     if((int)ind < ent_list_size && (int)ind >= 0)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)ent_list[(int)ind];
!     }
!     //else, it should return an empty value
!     return S_OK;
! 
! getentity_error:
!     printf("Function need an integer parameter: getentity(int index_in_list)\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! 
! //loadmodel(name)
! HRESULT openbor_loadmodel(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG unload = 0;
!     s_model *model;
!     if(paramCount < 1)
!     {
!         goto loadmodel_error;
!     }
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto loadmodel_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     if(paramCount >= 2)
!         if(FAILED(ScriptVariant_IntegerValue(varlist[1], &unload)))
!         {
!             goto loadmodel_error;
!         }
! 
!     model = load_cached_model(StrCache_Get(varlist[0]->strVal), "openbor_loadmodel", (char)unload);
! 
!     if(paramCount >= 3 && model)
!     {
!         model_cache[model->index].selectable = (char)ScriptVariant_IsTrue(varlist[2]);
!     }
! 
!     (*pretvar)->ptrVal = (VOID *)model;
! 
!     //else, it should return an empty value
!     return S_OK;
! 
! loadmodel_error:
!     printf("Function needs a string and integer parameters: loadmodel(name, unload, selectable)\n");
!     ScriptVariant_Clear(*pretvar);
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // load a sprite which doesn't belong to the sprite_cache
! // loadsprite(path, maskpath)
! HRESULT openbor_loadsprite(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     extern s_sprite *loadsprite2(char * filename, int * width, int * height);
!     s_sprite *spr, *mask;
!     if(paramCount < 1)
!     {
!         goto loadsprite_error;
!     }
! 
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto loadsprite_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     if((spr = loadsprite2(StrCache_Get(varlist[0]->strVal), NULL, NULL)))
!     {
!         (*pretvar)->ptrVal = (VOID *)spr;
!         if(paramCount > 1 && (mask = loadsprite2(StrCache_Get(varlist[1]->strVal), NULL, NULL)))
!         {
!             spr->mask = mask;
!         }
!         List_InsertAfter(&scriptheap, (void *)spr, "openbor_loadsprite");
!     }
!     //else, it should return an empty value
!     return S_OK;
! 
! loadsprite_error:
!     printf("Function need a string parameter: loadsprite(path)\n");
!     ScriptVariant_Clear(*pretvar);
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // Call options menu, blocked
! HRESULT openbor_menu_options(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     //void menu_options();
! 
!     menu_options();
! 
!     *pretvar = NULL;
!     return S_OK;
! }
! 
! HRESULT openbor_hallfame(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     hallfame(0);
! 
!     *pretvar = NULL;
!     return S_OK;
! }
! 
! //playwebm(path, int noskip)
! HRESULT openbor_playwebm(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG temp = 0; //noskip
!     extern int playwebm(char * filename, int noskip); // avoid implicit declaration
! 
!     if(paramCount < 1)
!     {
!         goto playwebm_error;
!     }
! 
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto playwebm_error;
!     }
! 
!     if(paramCount > 1)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[1], &temp)))
!         {
!             goto playwebm_error;
!         }
!     }
! 
!     #ifdef WEBM
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)playwebm(StrCache_Get(varlist[0]->strVal), (int)temp);
!     #else
!         printf("Skipping video %s; WebM playback not supported on this platform\n");
!         *pretvar = NULL;
!     #endif
! 
!     return S_OK;
! 
! playwebm_error:
!     printf("Function need a string parameter, other parameters are optional: playwebm(path, int noskip)\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //playgif(path, int x, int y, int noskip)
! HRESULT openbor_playgif(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG temp[3] = {0, 0, 0}; //x,y,noskip
!     int i;
!     extern unsigned char pal[1024];
!     extern int playgif(char * filename, int x, int y, int noskip);
! 
!     if(paramCount < 1)
!     {
!         goto playgif_error;
!     }
! 
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto playgif_error;
!     }
! 
!     for(i = 0; i < 3 && i < paramCount - 1; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i + 1], temp + i)))
!         {
!             goto playgif_error;
!         }
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)playgif(StrCache_Get(varlist[0]->strVal), (int)(temp[0]), (int)(temp[1]), (int)(temp[2]));
!     palette_set_corrected(pal, savedata.gamma, savedata.gamma, savedata.gamma, savedata.brightness, savedata.brightness, savedata.brightness);
!     return S_OK;
! 
! playgif_error:
!     printf("Function need a string parameter, other parameters are optional: playgif(path, int x, int y, int noskip)\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //open and return a handle
! //TODO: error messages
! HRESULT openbor_openanigif(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     anigif_info *info = NULL;
! 
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto openanigif_error;
!     }
! 
!     info = calloc(1, sizeof(*info));
!     if(anigif_open(StrCache_Get(varlist[0]->strVal), packfile, info))
!     {
!         info->magic = anigif_magic;
!         List_InsertAfter(&scriptheap, (void *)info, "openbor_openanigif");
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)info;
!         return S_OK;
!     }
! 
! openanigif_error:
!     if(info)
!     {
!         free(info);
!     }
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //decode a frame if any
! HRESULT openbor_decodeanigif(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     anigif_info *info = NULL;
! 
!     if(varlist[0]->vt != VT_PTR || !varlist[0]->ptrVal)
!     {
!         goto decodeanigif_error;
!     }
!     info = (anigif_info *) varlist[0]->ptrVal;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)anigif_decode_frame(info);
!     return S_OK;
! 
! decodeanigif_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //TODO mapstrings
! HRESULT openbor_getanigifinfo(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     anigif_info *info = NULL;
!     char *name;
! 
!     if(varlist[0]->vt != VT_PTR || !varlist[0]->ptrVal)
!     {
!         goto getanigifinfo_error;
!     }
!     info = (anigif_info *) varlist[0]->ptrVal;
! 
!     if(varlist[1]->vt != VT_STR)
!     {
!         goto getanigifinfo_error;
!     }
!     name = StrCache_Get(varlist[1]->strVal);
!     if(0 == stricmp(name, "buffer"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)anigif_getbuffer(info);
!     }
!     else if(0 == stricmp(name, "done"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)info->done;
!     }
!     else if(0 == stricmp(name, "frame"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)info->frame;
!     }
!     else if(0 == stricmp(name, "isRGB"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)info->isRGB;
!     }
!     else if(0 == stricmp(name, "width"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)(info->gifbuffer[0] ? info->gifbuffer[0]->width : 0);
!     }
!     else if(0 == stricmp(name, "height"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)(info->gifbuffer[0] ? info->gifbuffer[0]->height : 0);
!     }
!     else if(0 == stricmp(name, "nextframe"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)info->info[0].nextframe;
!     }
!     else if(0 == stricmp(name, "lastdelay"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)info->info[0].lastdelay;
!     }
!     else
!     {
!         goto getanigifinfo_error;
!     }
! 
!     return S_OK;
! 
! getanigifinfo_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // complex, so make a function for ai
! // adjustwalkanimation(ent, target);
! HRESULT openbor_adjustwalkanimation(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
! 
!     entity *e, *t, *temp;
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         e = self;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto adjustwalkanimation_error;
!     }
! 
!     if(paramCount < 2)
!     {
!         t = NULL;
!     }
!     else if(varlist[1]->vt == VT_PTR)
!     {
!         t = (entity *)varlist[1]->ptrVal;
!     }
!     else if(varlist[1]->vt == VT_EMPTY)
!     {
!         t = NULL;
!     }
!     else
!     {
!         goto adjustwalkanimation_error;
!     }
! 
!     temp = self;
! 
!     self = e;
!     adjust_walk_animation(t);
!     self = temp;
! 
!     return S_OK;
! adjustwalkanimation_error:
!     printf("Function adjustwalkanimation(entity, target), both parameters are optional, but must be valid.");
!     return E_FAIL;
! }
! 
! //finditem(entity)
! HRESULT openbor_finditem(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
! 
!     entity *e, *t, *temp;
! 
!     if(paramCount < 1)
!     {
!         e = self;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto finditem_error;
!     }
! 
!     temp = self;
! 
!     self = e;
!     t = normal_find_item();
!     self = temp;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)t;
! 
!     return S_OK;
! finditem_error:
! 
!     *pretvar = NULL;
!     printf("Function finditem(entity), entity is optional, but must be valid.");
!     return E_FAIL;
! }
! 
! //pickup(entity, item)
! HRESULT openbor_pickup(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
! 
!     entity *e, *t, *temp;
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 2)
!     {
!         goto pickup_error;
!     }
! 
!     if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto pickup_error;
!     }
! 
!     if(varlist[1]->vt == VT_PTR)
!     {
!         t = (entity *)varlist[1]->ptrVal;
!     }
!     else
!     {
!         goto pickup_error;
!     }
! 
!     if(!e || !t)
!     {
!         goto pickup_error;
!     }
! 
!     temp = self;
! 
!     self = e;
!     common_pickupitem(t);
!     self = temp;
! 
!     return S_OK;
! pickup_error:
!     printf("Function pickup(entity, item), handles must be valid.");
!     return E_FAIL;
! }
! 
! //waypoints(ent, x1, z1, x2, z2, x3, z3, ...)
! //zero length list means clear waypoints
! HRESULT openbor_waypoints(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int num, i;
!     s_axis_principal_float *wp = NULL;
!     DOUBLE x, z;
! 
!     entity *e;
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         goto wp_error;
!     }
! 
!     if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto wp_error;
!     }
! 
!     num = (paramCount - 1) / 2;
!     if(num > 0)
!     {
!         //append
!         wp = malloc(sizeof(*wp) * (num + e->numwaypoints));
! 
!         for(i = 0; i < num ; i++)
!         {
!             if(FAILED(ScriptVariant_DecimalValue(varlist[1], &x)))
!             {
!                 goto wp_error;
!             }
! 
!             if(FAILED(ScriptVariant_DecimalValue(varlist[2], &z)))
!             {
!                 goto wp_error;
!             }
! 
!             wp[num - i - 1].x = (float)x;
!             wp[num - i - 1].z = (float)z;
!         }
!         if(e->numwaypoints)
!         {
!             for(i = 0; i < e->numwaypoints; i++)
!             {
!                 wp[i + num] = e->waypoints[i];
!             }
!         }
! 
!         if(e->waypoints)
!         {
!             free(e->waypoints);
!         }
!         e->waypoints = wp;
!         e->numwaypoints = num;
!     }
!     else
!     {
!         e->numwaypoints = 0;
!         if(e->waypoints)
!         {
!             free(e->waypoints);
!         }
!         e->waypoints = NULL;
!     }
!     return S_OK;
! 
! wp_error:
!     if(wp)
!     {
!         free(wp);
!     }
!     wp = NULL;
!     printf("Function waypoints requires a valid entity handle and a list of x, z value pairs.");
!     return E_FAIL;
! }
! 
! //testmove(entity, x, z)
! HRESULT openbor_testmove(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
! 
!     entity *e;
!     DOUBLE x, z;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(paramCount < 3)
!     {
!         goto testmove_error;
!     }
! 
!     if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto testmove_error;
!     }
! 
!     if(FAILED(ScriptVariant_DecimalValue(varlist[1], &x)))
!     {
!         goto testmove_error;
!     }
! 
!     if(FAILED(ScriptVariant_DecimalValue(varlist[2], &z)))
!     {
!         goto testmove_error;
!     }
! 
!     if(!e)
!     {
!         goto testmove_error;
!     }
! 
!     (*pretvar)->lVal = (LONG) testmove(e, e->position.x, e->position.z, x, z);
! 
!     return S_OK;
! testmove_error:
!     *pretvar = NULL;
!     printf("Function testmove(entity, x, z)");
!     return E_FAIL;
! }
! 
! //spriteq_draw(vscreen, 0, MIN_INT, MAX_INT, dx, dy)
! HRESULT openbor_drawspriteq(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
! 
!     LONG value[5] = {0, MIN_INT, MAX_INT, 0, 0};
!     int i;
!     s_screen *screen;
!     extern s_screen *vscreen;
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         goto drawsq_error;
!     }
! 
!     if(varlist[0]->vt != VT_PTR && varlist[0]->vt != VT_EMPTY)
!     {
!         goto drawsq_error;
!     }
! 
!     if(varlist[0]->ptrVal)
!     {
!         screen = (s_screen *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         screen = vscreen;
!     }
! 
!     for(i = 1; i < paramCount && i <= 5; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawsq_error;
!         }
!     }
! 
!     spriteq_draw(screen, (int)value[0], (int)value[1], (int)value[2], (int)value[3], (int)value[4]);
! 
!     return S_OK;
! 
! drawsq_error:
!     printf("Function drawspriteq needs a valid screen handle and all other paramaters must be integers.");
!     return E_FAIL;
! 
! }
! 
! HRESULT openbor_clearspriteq(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     spriteq_clear();
!     return S_OK;
! 
! }
! 
! // ===== gfxproperty ======
! enum gfxproperty_enum
! {
!     _gfx_centerx,
!     _gfx_centery,
!     _gfx_height,
!     _gfx_palette,
!     _gfx_pixel,
!     _gfx_pixelformat,
!     _gfx_srcheight,
!     _gfx_srcwidth,
!     _gfx_width,
!     _gfx_the_end,
! };
! 
! int mapstrings_gfxproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname = NULL;
!     int prop;
! 
!     static const char *proplist[] =
!     {
!         "centerx",
!         "centery",
!         "height",
!         "palette",
!         "pixel",
!         "pixelformat",
!         "srcheight",
!         "srcwidth",
!         "width",
!     };
! 
! 
!     if(paramCount < 2)
!     {
!         return 1;
!     }
!     MAPSTRINGS(varlist[1], proplist, _gfx_the_end,
!                "Property name '%s' is not supported by gfxproperty.\n");
! 
!     return 1;
! }
! 
! // getgfxproperty(handle, propertyname, ...);
! HRESULT openbor_getgfxproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     s_screen *screen;
!     s_sprite *sprite;
!     s_bitmap *bitmap;
!     LONG value[2] = {0, 0}, v;
!     void *handle;
!     int i, x, y;
! 
!     if(paramCount < 2)
!     {
!         goto ggp_error;
!     }
! 
!     mapstrings_gfxproperty(varlist, paramCount);
! 
!     if(varlist[0]->vt != VT_PTR)
!     {
!         goto ggp_error;
!     }
! 
!     handle = varlist[0]->ptrVal;
! 
!     if(!handle)
!     {
!         goto ggp_error;
!     }
! 
!     screen = (s_screen *)handle;
!     sprite = (s_sprite *)handle;
!     bitmap = (s_bitmap *)handle;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
! 
!     switch(varlist[1]->lVal)
!     {
!     case _gfx_width:
!         switch(screen->magic)
!         {
!         case screen_magic:
!             (*pretvar)->lVal = screen->width;
!             break;
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->width;
!             break;
!         case bitmap_magic:
!             (*pretvar)->lVal = bitmap->width;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_height:
!         switch(screen->magic)
!         {
!         case screen_magic:
!             (*pretvar)->lVal = screen->height;
!             break;
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->height;
!             break;
!         case bitmap_magic:
!             (*pretvar)->lVal = bitmap->height;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_srcwidth:
!         switch(screen->magic)
!         {
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->srcwidth;
!             break;
!         case screen_magic:
!             (*pretvar)->lVal = screen->width;
!             break;
!         case bitmap_magic:
!             (*pretvar)->lVal = bitmap->width;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_srcheight:
!         switch(screen->magic)
!         {
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->srcheight;
!             break;
!         case screen_magic:
!             (*pretvar)->lVal = screen->height;
!             break;
!         case bitmap_magic:
!             (*pretvar)->lVal = bitmap->height;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_centerx:
!         switch(screen->magic)
!         {
!         case screen_magic:
!         case bitmap_magic:
!             (*pretvar)->lVal = 0;
!             break;
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->centerx;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_centery:
!         switch(screen->magic)
!         {
!         case screen_magic:
!         case bitmap_magic:
!             (*pretvar)->lVal = 0;
!             break;
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->centery;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_palette:
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         switch(screen->magic)
!         {
!         case screen_magic:
!             (*pretvar)->ptrVal = (VOID *)screen->palette;
!             break;
!         case sprite_magic:
!             (*pretvar)->ptrVal = (VOID *)sprite->palette;
!             break;
!         case bitmap_magic:
!             (*pretvar)->ptrVal = (VOID *)bitmap->palette;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_pixelformat:
!         switch(screen->magic)
!         {
!         case screen_magic:
!             (*pretvar)->lVal = screen->pixelformat;
!             break;
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->pixelformat;
!             break;
!         case bitmap_magic:
!             (*pretvar)->lVal = bitmap->pixelformat;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_pixel:
!         if(paramCount < 4)
!         {
!             goto ggp_error3;
!         }
!         for(i = 2; i < 4; i++)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 2)))
!             {
!                 goto ggp_error4;
!             }
!         }
!         x = value[0];
!         y = value[1];
!         switch(screen->magic)
!         {
!         case bitmap_magic: //As long as the two structures are identical...
!         case screen_magic:
!             if(x < 0 || x >= screen->width || y < 0 || y >= screen->height)
!             {
!                 v = 0;
!             }
!             else
!             {
!                 switch(screen->pixelformat)
!                 {
!                 case PIXEL_8:
!                 case PIXEL_x8:
!                     v = (LONG)(((unsigned char *)screen->data)[y * screen->width + x]);
!                     break;
!                 case PIXEL_16:
!                     v = (LONG)(((unsigned short *)screen->data)[y * screen->width + x]);
!                     break;
!                 case PIXEL_32:
!                     v = (LONG)(((unsigned *)screen->data)[y * screen->width + x]);
!                     break;
!                 default:
!                     v = 0;
!                 }
!             }
!             break;
!         case sprite_magic:
!             if(x < 0 || x >= sprite->width || y < 0 || y >= sprite->height)
!             {
!                 v = 0;
!             }
!             else
!             {
!                 v = (LONG)sprite_get_pixel(sprite, x, y);
!             }
!             break;
!         default:
!             goto ggp_error2;
!         }
!         (*pretvar)->lVal = v;
!         break;
!     default:
!         break;
! 
!     }
! 
!     return S_OK;
! 
! ggp_error:
!     printf("Function getgfxproperty must have a valid handle and a property name.\n");
!     *pretvar = NULL;
!     return E_FAIL;
! ggp_error2:
!     printf("Function getgfxproperty encountered an invalid handle.\n");
!     *pretvar = NULL;
!     return E_FAIL;
! ggp_error3:
!     printf("You need to specify x, y value for getgfxproperty.\n");
!     *pretvar = NULL;
!     return E_FAIL;
! ggp_error4:
!     printf("Invalid x or y value for getgfxproperty.\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //allocscript(name, comment);
! HRESULT openbor_allocscript(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Script *ns;
!     char *name = NULL, *comment = NULL;
! 
!     ns = malloc(sizeof(Script));
! 
!     if(ns == NULL)
!     {
!         goto as_error;
!     }
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_STR)
!     {
!         name = (char *)StrCache_Get(varlist[0]->strVal);
!     }
!     if(paramCount >= 2 && varlist[1]->vt == VT_STR)
!     {
!         comment = (char *)StrCache_Get(varlist[1]->strVal);
!     }
! 
!     Script_Init(ns, name, comment, 1);
! 
!     List_InsertAfter(&scriptheap, (void *)ns, "openbor_allocscript");
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)ns;
!     return S_OK;
! 
! as_error:
!     printf("Function allocscript failed to alloc enough memory.\n");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //loadscript(handle, path);
! HRESULT openbor_loadscript(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Script *ns = NULL;
!     char *path = NULL;
!     int load_script(Script * script, char * file);
! 
!     (*pretvar) = NULL;
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_PTR)
!     {
!         ns = (Script *)varlist[0]->ptrVal;
!     }
!     if(ns == NULL || ns->magic != script_magic)
!     {
!         goto ls_error;
!     }
!     if(paramCount >= 2 && varlist[1]->vt == VT_STR)
!     {
!         path = (char *)StrCache_Get(varlist[1]->strVal);
!     }
!     if(path == NULL)
!     {
!         goto ls_error;
!     }
! 
!     load_script(ns, path);
!     //Script_Init(ns, name, comment, 1);
!     //if(!load_script(ns, path)) goto ls_error2;
! 
!     return S_OK;
! 
! ls_error:
!     printf("Function loadscript requires a valid script handle and a path.\n");
!     return E_FAIL;
! }
! 
! //compilescript(handle);
! HRESULT openbor_compilescript(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Script *ns = NULL;
! 
!     (*pretvar) = NULL;
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_PTR)
!     {
!         ns = (Script *)varlist[0]->ptrVal;
!     }
!     if(ns == NULL || ns->magic != script_magic)
!     {
!         goto cs_error;
!     }
! 
!     Script_Compile(ns);
! 
!     return S_OK;
! 
! cs_error:
!     printf("Function compilescript requires a valid script handle.\n");
!     return E_FAIL;
! }
! 
! //executescript(handle);
! HRESULT openbor_executescript(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Script *ns = NULL;
! 
!     (*pretvar) = NULL;
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_PTR)
!     {
!         ns = (Script *)varlist[0]->ptrVal;
!     }
!     if(ns == NULL || ns->magic != script_magic)
!     {
!         goto cs_error;
!     }
! 
!     Script_Execute(ns);
! 
!     return S_OK;
! 
! cs_error:
!     printf("Function executescript requires a valid script handle.\n");
!     return E_FAIL;
! }
! 
! 
! //loadgamefile() //only reload saved level file from saves
! HRESULT openbor_loadgamefile(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     loadGameFile();
!     *pretvar = NULL;
!     return S_OK;
! }
! 
! //finishlevel()
! HRESULT openbor_finishlevel(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     level->force_finishlevel = 1;
!     return S_OK;
! }
! 
! //gameover()
! HRESULT openbor_gameover(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     level->force_gameover = 1;
!     return S_OK;
! }
! 
! //gotomainmenu(flag); flag: 1 = no gameover, 2 = no halloffame, 4 = no intro.txt; you can use a combination like 1+2 = 3 or all 1+2+4 = 7
! HRESULT openbor_gotomainmenu(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp = 0;
! 
!     *pretvar = NULL;
! 
!     if(paramCount >= 1 && FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)) )
!     {
!         return E_FAIL;
!     }
! 
!     goto_mainmenu((LONG)ltemp);
! 
!     return S_OK;
! }
! 
! //playgame(set, usesave?)
! HRESULT openbor_playgame(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG lset = 0, lsave = -1;
!     *pretvar = NULL;
! 
!     if(paramCount >= 1 && FAILED(ScriptVariant_IntegerValue(varlist[0], &lset)) )
!     {
!         goto pg_error;
!     }
!     if(paramCount >= 2 && FAILED(ScriptVariant_IntegerValue(varlist[1], &lsave)) )
!     {
!         goto pg_error;
!     }
! 
! 
!     useSave = lsave;
!     useSet = lset;
!     endgame = 1;
! 
!     return S_OK;
! 
! pg_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //getrecordingstatus() it returns 0 = stop, 1 = rec, 2 = play, 4 = free buffer
! HRESULT openbor_getrecordingstatus(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount) {
!     ScriptVariant_Clear(*pretvar);
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)playrecstatus->status;
!     return S_OK;
! }
! 
! //recordinputs(value) -> 0 = stop, 1 = rec, 2 = play, 4 = free buffer
! HRESULT openbor_recordinputs(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int ltemp;
! 
!     *pretvar = NULL;
!     if( paramCount < 1 && varlist[0]->vt != VT_INTEGER )
!     {
!         return E_FAIL;
!     }
! 
!     ltemp = (int)varlist[0]->lVal;
!     switch(ltemp)
!     {
!         case A_REC_STOP:
!             stopRecordInputs();
!             break;
!         case A_REC_REC:
!             if( paramCount < 3 || varlist[1]->vt != VT_STR || varlist[2]->vt != VT_STR )
!             {
!                 printf("Function recordinputs requires a pathname and filename parameters.\n");
!                 return E_FAIL;
!             }
!             strcpy(playrecstatus->path,(char*)StrCache_Get(varlist[1]->strVal));
!             strcpy(playrecstatus->filename,(char*)StrCache_Get(varlist[2]->strVal));
!             //debug_printf("%s/%s",(char*)StrCache_Get(varlist[1]->strVal),(char*)StrCache_Get(varlist[2]->strVal));
!             stopRecordInputs();
!             playrecstatus->status = A_REC_REC;
!             recordInputs();
!             break;
!         case A_REC_PLAY:
!             if( paramCount < 3 || varlist[1]->vt != VT_STR || varlist[2]->vt != VT_STR )
!             {
!                 printf("Function recordinputs requires a pathname and filename parameters.\n");
!                 return E_FAIL;
!             }
!             strcpy(playrecstatus->path,(char*)StrCache_Get(varlist[1]->strVal));
!             strcpy(playrecstatus->filename,(char*)StrCache_Get(varlist[2]->strVal));
!             stopRecordInputs();
!             playrecstatus->status = A_REC_PLAY;
!             playRecordedInputs();
!             break;
!         case A_REC_FREE:
!             freeRecordedInputs();
!             break;
!     }
! 
!     return S_OK;
! }
! 
! // getsaveinfo(set, prop);
! HRESULT openbor_getsaveinfo(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     s_savelevel *slot;
!     char *prop;
!     if(paramCount < 2)
!     {
!         goto gsi_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)) || varlist[1]->vt != VT_STR)
!     {
!         goto gsi_error;
!     }
! 
!     if(!savelevel)
!     {
!         ScriptVariant_Clear(*pretvar);
!         return S_OK;
!     }
! 
!     slot = savelevel + ltemp;
!     prop = (char *)StrCache_Get(varlist[1]->strVal);
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     if(0 == stricmp(prop, "flag"))
!     {
!         (*pretvar)->lVal = (LONG)slot->flag;
!     }
!     else if(0 == stricmp(prop, "level"))
!     {
!         (*pretvar)->lVal = (LONG)slot->level;
!     }
!     else if(0 == stricmp(prop, "stage"))
!     {
!         (*pretvar)->lVal = (LONG)slot->stage;
!     }
!     else if(0 == stricmp(prop, "set"))
!     {
!         (*pretvar)->lVal = (LONG)slot->which_set;
!     }
!     else if(0 == stricmp(prop, "times_completed"))
!     {
!         (*pretvar)->lVal = (LONG)slot->times_completed;
!     }
!     else if(0 == stricmp(prop, "score"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         (*pretvar)->lVal = (LONG)slot->pScores[ltemp];
!     }
!     else if(0 == stricmp(prop, "lives"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         (*pretvar)->lVal = (LONG)slot->pLives[ltemp];
!     }
!     else if(0 == stricmp(prop, "credits"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         (*pretvar)->lVal = (LONG)(noshare ? slot->credits : slot->pCredits[ltemp]);
!     }
!     else if(0 == stricmp(prop, "name"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(slot->dName);
!     }
!     else if(0 == stricmp(prop, "playername"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(slot->pName[ltemp]);
!     }
!     else if(0 == stricmp(prop, "health"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         (*pretvar)->lVal = (LONG)slot->pSpawnhealth[ltemp];
!     }
!     else if(0 == stricmp(prop, "mp"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         (*pretvar)->lVal = (LONG)slot->pSpawnmp[ltemp];
!     }
!     else
!     {
!         goto gsi_error;
!     }
!     return S_OK;
! 
! gsi_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
--- 10980,15437 ----
          {
              projectile_prime = PROJECTILE_PRIME_BASE_Y;
              projectile_prime += PROJECTILE_PRIME_LAUNCH_MOVING;
!         }
!     }
!     if(paramCount >= 7 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[6], &ltemp)))
!     {
!         type = (LONG)ltemp;
!     }
!     if(paramCount >= 8 && SUCCEEDED(ScriptVariant_IntegerValue(varlist[7], &ltemp)))
!     {
!         map = (LONG)ltemp;
!     }
! 
!     if(relative)
!     {
!         if(self->direction == DIRECTION_RIGHT)
!         {
!             x += self->position.x;
!         }
!         else
!         {
!             x = self->position.x - x;
!             direction = !direction;
!         }
!         z += self->position.z;
!         a += self->position.y;
!     }
! 
!     switch(type)
!     {
!     default:
!     case 0:
!         ent = knife_spawn(name, -1, x, z, a, direction, projectile_prime, map);
!         break;
!     case 1:
!         ent = bomb_spawn(name, -1, x, z, a, direction, map);
!         break;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *) ent;
! 
!     return S_OK;
! }
! 
! 
! 
! 
! //int rgbcolor(int r, int g, int b);
! HRESULT openbor_rgbcolor(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG r, g, b;
! 
!     if(paramCount != 3)
!     {
!         goto rgbcolor_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &r)))
!     {
!         goto rgbcolor_error;    // decimal/integer value for red?
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &g)))
!     {
!         goto rgbcolor_error;    // decimal/integer value for green?
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[2], &b)))
!     {
!         goto rgbcolor_error;    // decimal/integer value for blue?
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = _makecolour(r, g, b);
!     return S_OK;
! 
! rgbcolor_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // ===== playerkeys =====
! enum playerkeys_enum
! {
!     _pk_anybutton,
!     _pk_attack,
!     _pk_attack2,
!     _pk_attack3,
!     _pk_attack4,
!     _pk_esc,
!     _pk_jump,
!     _pk_movedown,
!     _pk_moveleft,
!     _pk_moveright,
!     _pk_moveup,
!     _pk_screenshot,
!     _pk_special,
!     _pk_start,
!     _pk_the_end,
! };
! 
! int mapstrings_playerkeys(ScriptVariant **varlist, int paramCount)
! {
!     char *propname = NULL;
!     int i, prop;
! 
!     static const char *proplist[] = // for args 2+
!     {
!         "anybutton",
!         "attack",
!         "attack2",
!         "attack3",
!         "attack4",
!         "esc",
!         "jump",
!         "movedown",
!         "moveleft",
!         "moveright",
!         "moveup",
!         "screenshot",
!         "special",
!         "start",
!     };
! 
!     for(i = 2; i < paramCount; i++)
!     {
!         MAPSTRINGS(varlist[i], proplist, _pk_the_end,
!                    "Button name '%s' is not supported by playerkeys.");
!     }
! 
!     return 1;
! }
! 
! //playerkeys(playerindex, newkey?, key1, key2, ...);
! HRESULT openbor_playerkeys(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     int index, newkey;
!     int i;
!     u64 keys;
!     ScriptVariant *arg = NULL;
! 
!     if(paramCount < 3)
!     {
!         *pretvar = NULL;
!         return E_FAIL;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)1;
! 
!     mapstrings_playerkeys(varlist, paramCount);
! 
!     if(FAILED(ScriptVariant_IntegerValue((varlist[0]), &ltemp)))
!     {
!         index = 0;
!     }
!     else
!     {
!         index = (LONG)ltemp;
!     }
! 
!     if(SUCCEEDED(ScriptVariant_IntegerValue((varlist[1]), &ltemp)))
!     {
!         newkey = (LONG)ltemp;
!     }
!     else
!     {
!         newkey = 0;
!     }
! 
!     if(newkey == 1)
!     {
!         keys = player[index].newkeys;
!     }
!     else if(newkey == 2)
!     {
!         keys = player[index].releasekeys;
!     }
!     else
!     {
!         keys = player[index].keys;
!     }
! 
!     for(i = 2; i < paramCount; i++)
!     {
!         arg = varlist[i];
!         if(arg->vt == VT_INTEGER)
!         {
!             switch(arg->lVal)
!             {
!             case _pk_jump:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_JUMP);
!                 break;
!             case _pk_attack:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ATTACK);
!                 break;
!             case _pk_attack2:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ATTACK2);
!                 break;
!             case _pk_attack3:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ATTACK3);
!                 break;
!             case _pk_attack4:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ATTACK4);
!                 break;
!             case _pk_special:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_SPECIAL);
!                 break;
!             case _pk_esc:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ESC);
!                 break;
!             case _pk_start:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_START);
!                 break;
!             case _pk_moveleft:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_MOVELEFT);
!                 break;
!             case _pk_moveright:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_MOVERIGHT);
!                 break;
!             case _pk_moveup:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_MOVEUP);
!                 break;
!             case _pk_movedown:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_MOVEDOWN);
!                 break;
!             case _pk_screenshot:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_SCREENSHOT);
!                 break;
!             case _pk_anybutton:
!                 (*pretvar)->lVal = (LONG)(keys & FLAG_ANYBUTTON);
!                 break;
!             default:
!                 (*pretvar)->lVal = (LONG)0;
!             }
!         }
!         else
!         {
!             (*pretvar)->lVal = (LONG)0;
!         }
!         if(!((*pretvar)->lVal))
!         {
!             break;
!         }
!     }
! 
!     return S_OK;
! }
! 
! //playmusic(name, loop)
! HRESULT openbor_playmusic(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int loop = 0;
!     LONG offset = 0;
!     char *thename = NULL;
! 
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         sound_close_music();
!         return S_OK;
!     }
!     if(varlist[0]->vt != VT_STR)
!     {
!         //printf("");
!         return E_FAIL;
!     }
!     thename = StrCache_Get(varlist[0]->strVal);
! 
!     if(paramCount > 1)
!     {
!         loop = (int)ScriptVariant_IsTrue(varlist[1]);
!     }
! 
!     if(paramCount > 2)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &offset)))
!         {
!             return E_FAIL;
!         }
!     }
! 
! 
!     music(thename, loop, offset);
!     return S_OK;
! }
! 
! //fademusic(fade, name, loop, offset)
! HRESULT openbor_fademusic(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     DOUBLE value = 0;
!     LONG values[2] = {0, 0};
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto fademusic_error;
!     }
!     if(FAILED(ScriptVariant_DecimalValue(varlist[0], &value)))
!     {
!         goto fademusic_error;
!     }
!     musicfade[0] = value;
!     musicfade[1] = (float)savedata.musicvol;
! 
!     if(paramCount == 4)
!     {
!         strncpy(musicname, StrCache_Get(varlist[1]->strVal), MAX_STR_LEN - 1);
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &values[0])))
!         {
!             goto fademusic_error;
!         }
!         if(FAILED(ScriptVariant_IntegerValue(varlist[3], &values[1])))
!         {
!             goto fademusic_error;
!         }
!         musicloop = values[0];
!         musicoffset = values[1];
!     }
!     return S_OK;
! 
! fademusic_error:
!     printf("Function requires 1 value, with an optional 3 for music triggering: fademusic_error(float fade, char name, int loop, unsigned long offset)\n");
!     return E_FAIL;
! }
! 
! //setmusicvolume(left, right)
! HRESULT openbor_setmusicvolume(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG channels[2];
! 
!     if(paramCount < 1)
!     {
!         return S_OK;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], channels)))
!     {
!         goto setmusicvolume_error;
!     }
! 
!     if(paramCount > 1)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[1], channels + 1)))
!         {
!             goto setmusicvolume_error;
!         }
!     }
!     else
!     {
!         channels[1] = channels[0];
!     }
! 
!     sound_volume_music((int)channels[0], (int)channels[1]);
!     return S_OK;
! 
! setmusicvolume_error:
!     printf("values must be integers: setmusicvolume(int left, (optional)int right)\n");
!     return E_FAIL;
! }
! 
! //setmusicvolume(left, right)
! HRESULT openbor_setmusictempo(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG new_tempo;
! 
!     if(paramCount < 1)
!     {
!         return S_OK;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &new_tempo)))
!     {
!         return E_FAIL;
!     }
! 
!     sound_music_tempo(new_tempo);
!     return S_OK;
! }
! 
! //pausemusic(togglr)
! HRESULT openbor_pausemusic(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
      int pause = 0;
!     if(paramCount < 1)
!     {
!         return S_OK;
!     }
! 
!     pause = (int)ScriptVariant_IsTrue(varlist[0]);
! 
!     sound_pause_music(pause);
!     return S_OK;
! }
! 
! //pausesamples(toggle)
! HRESULT openbor_pausesamples(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int pause = 0;
!     if(paramCount < 1)
!     {
!         return S_OK;
!     }
! 
!     pause = (int)ScriptVariant_IsTrue(varlist[0]);
! 
!     sound_pause_sample(pause);
!     return S_OK;
! }
! 
! //pausesample(toggle,channel)
! HRESULT openbor_pausesample(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int pause = 0;
!     LONG channel = 0;
!     if(paramCount < 2)
!     {
!         return S_OK;
!     }
! 
!     pause = (int)ScriptVariant_IsTrue(varlist[0]);
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &channel)))
!     {
!         return S_OK;
!     }
! 
!     sound_pause_single_sample(pause,channel);
!     return S_OK;
! }
! 
! HRESULT openbor_querychannel(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         goto query_error;
!     }
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = sound_query_channel((LONG)ltemp);
! 
!     query_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! HRESULT openbor_stopchannel(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     *pretvar = NULL;
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         goto sc_error;
!     }
!     sound_stop_sample((LONG)ltemp);
! 
!     sc_error:
!     return E_FAIL;
! }
! 
! //isactivesample(channel): returns 1 is sample is active, returns 0 otherwise
! HRESULT openbor_isactivesample(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         goto error;
!     }
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = sound_is_active((LONG)ltemp);
! 
!     error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //sampleid(channel): returns sample id in channel if sample is active, it returns -1 otherwise
! HRESULT openbor_sampleid(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         goto error;
!     }
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = sound_id((LONG)ltemp);
! 
!     error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //playsample(id, priority, lvolume, rvolume, speed, loop)
! HRESULT openbor_playsample(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int i, result;
!     LONG value[6] = { -1, 0, savedata.effectvol, savedata.effectvol, 100, 0};
! 
!     for(i = 0; i < 6 && i < paramCount; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i)))
!         {
!             goto playsample_error;
!         }
!     }
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     if((int)value[5])
!     {
!         result = sound_loop_sample((int)value[0], (unsigned int)value[1], (int)value[2], (int)value[3], (unsigned int)value[4]);
!     }
!     else
!     {
!         result = sound_play_sample((int)value[0], (unsigned int)value[1], (int)value[2], (int)value[3], (unsigned int)value[4]);
!     }
!     (*pretvar)->lVal = (LONG)result;
!     return S_OK;
! 
! playsample_error:
!     *pretvar = NULL;
!     printf("Function requires 6 integer values: playsample(int id, unsigned int priority, int lvolume, int rvolume, unsigned int speed, int loop)\n");
!     return E_FAIL;
! }
! 
! // int loadsample(filename, log)
! HRESULT openbor_loadsample(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int arg = 0;
! 
!     if(paramCount < 1)
!     {
!         goto loadsample_error;
!     }
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto loadsample_error;
!     }
! 
!     if(paramCount > 1)
!     {
!         if(varlist[1]->vt == VT_INTEGER)
!         {
!             arg = varlist[1]->lVal;
!         }
!         else
!         {
!             goto loadsample_error;
!         }
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)sound_load_sample(StrCache_Get(varlist[0]->strVal), packfile, arg);
!     return S_OK;
! 
! loadsample_error:
!     printf("Function requires 1 string value and optional log value: loadsample(string {filename} integer {log})\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // void unloadsample(id)
! HRESULT openbor_unloadsample(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG id;
!     *pretvar = NULL;
!     if(paramCount != 1 )
!     {
!         goto unloadsample_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue((varlist[0]), &id)))
!     {
!         goto unloadsample_error;
!     }
! 
!     sound_unload_sample((int)id);
!     return S_OK;
! 
! unloadsample_error:
!     printf("Function requires 1 integer value: unloadsample(int id)\n");
!     return E_FAIL;
! }
! 
! //fadeout(type, speed);
! HRESULT openbor_fadeout(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG type;
!     LONG speed;
!     *pretvar = NULL;
!     if(paramCount < 1 )
!     {
!         goto fade_out_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue((varlist[0]), &type)))
!     {
!         goto fade_out_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue((varlist[1]), &speed)))
! 
!     {
!         fade_out((int)type, (int)speed);
!     }
!     return S_OK;
! 
! fade_out_error:
!     printf("Function requires 2 integer values: fade_out(int type, int speed)\n");
!     return E_FAIL;
! }
! 
! //changepalette(index);
! HRESULT openbor_changepalette(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG index;
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         goto changepalette_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue((varlist[0]), &index)))
!     {
!         goto changepalette_error;
!     }
! 
!     change_system_palette((int)index);
! 
!     return S_OK;
! 
! changepalette_error:
!     printf("Function requires 1 integer value: changepalette(int index)\n");
!     return E_FAIL;
! }
! 
! //changelight(x, z);
! HRESULT openbor_changelight(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG x, z;
!     extern s_axis_plane_vertical_int light;
!     ScriptVariant *arg = NULL;
! 
!     *pretvar = NULL;
!     if(paramCount < 2)
!     {
!         goto changelight_error;
!     }
! 
!     arg = varlist[0];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &x)))
!         {
!             goto changelight_error;
!         }
!         light.x = (int)x;
!     }
! 
!     arg = varlist[1];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &z)))
!         {
!             goto changelight_error;
!         }
!         light.y = (int)z;
!     }
! 
!     return S_OK;
! changelight_error:
!     printf("Function requires 2 integer values: changepalette(int x, int z)\n");
!     return E_FAIL;
! }
! 
! //changeshadowcolor(color, alpha);
! // color = 0 means no gfxshadow, -1 means don't fill the shadow with colour
! // alpha default to 2, <=0 means no alpha effect
! HRESULT openbor_changeshadowcolor(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG c, a;
!     extern int            shadowcolor;
!     extern int            shadowalpha;
! 
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto changeshadowcolor_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &c)))
!     {
!         goto changeshadowcolor_error;
!     }
! 
!     shadowcolor = (int)c;
! 
!     if(paramCount > 1)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[1], &a)))
!         {
!             goto changeshadowcolor_error;
!         }
!         shadowalpha = (int)a;
!     }
! 
!     return S_OK;
! changeshadowcolor_error:
!     printf("Function requires at least 1 integer value, the 2nd integer parameter is optional: changepalette(int colorindex, int alpha)\n");
!     return E_FAIL;
! }
! 
! // ===== gettextobjproperty(name, value) =====
! enum gtop_enum
! {
!     _top_a,
!     _top_font,
!     _top_text,
!     _top_time,
!     _top_x,
!     _top_y,
!     _top_z,
!     _top_the_end,
! };
! 
! int mapstrings_textobjproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname = NULL;
!     int prop;
! 
!     static const char *proplist[] =
!     {
!         "a",
!         "font",
!         "text",
!         "time",
!         "x",
!         "y",
!         "z",
!     };
! 
!     if(paramCount < 2)
!     {
!         return 1;
!     }
! 
!     MAPSTRINGS(varlist[1], proplist, _top_the_end,
!                "'%s' is not a valid textobj property.\n");
! 
!     return 1;
! }
! 
! HRESULT openbor_gettextobjproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     int propind;
! 
!     if(paramCount < 2)
!     {
!         goto gettextobjproperty_error;
!     }
! 
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ind)))
!     {
!         printf("Function's 1st argument must be a numeric value: gettextproperty(int index, \"property\")\n");
!         goto gettextobjproperty_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     mapstrings_textobjproperty(varlist, paramCount);
! 
!     if(ind < 0 || ind >= level->numtextobjs)
!     {
!         (*pretvar)->lVal = 0;
!         return S_OK;
!     }
! 
!     if(varlist[1]->vt != VT_INTEGER)
!     {
!         if(varlist[1]->vt != VT_STR)
!         {
!             printf("Function gettextobjproperty must have a string property name.\n");
!         }
!         goto gettextobjproperty_error;
!     }
! 
!     propind = varlist[1]->lVal;
! 
!     switch(propind)
!     {
!     case _top_font:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)level->textobjs[ind].font;
!         break;
!     }
!     case _top_text:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(level->textobjs[ind].text);
!         break;
!     }
!     case _top_time:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)level->textobjs[ind].time;
!         break;
!     }
!     case _top_x:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)level->textobjs[ind].position.x;
!         break;
!     }
!     case _top_y:
!     case _top_a:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)level->textobjs[ind].position.y;
!         break;
!     }
!     case _top_z:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)level->textobjs[ind].position.z;
!         break;
!     }
!     default:
!         //printf("Property name '%s' is not supported by function gettextobjproperty.\n", propname);
!         goto gettextobjproperty_error;
!         break;
!     }
! 
!     return S_OK;
! 
! gettextobjproperty_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! HRESULT openbor_changetextobjproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     int propind;
!     static char buf[MAX_STR_VAR_LEN];
!     LONG ltemp;
!     const char *ctotext = "changetextobjproperty(int index, \"property\", value)";
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 3)
!     {
!         printf("Function needs at last 3 parameters: %s\n", ctotext);
!         return E_FAIL;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ind)))
!     {
!         printf("Function's 1st argument must be a numeric value: %s\n", ctotext);
!         return E_FAIL;
!     }
! 
!     mapstrings_textobjproperty(varlist, paramCount);
! 
!     if(ind < 0)
!     {
!         printf("Invalid textobj index, must be >= 0\n");
!         return E_FAIL;
!     }
!     else if (ind >= level->numtextobjs)
!     {
!         __reallocto(level->textobjs, level->numtextobjs, ind + 1);
!         level->numtextobjs = ind + 1;
!     }
! 
!     if(varlist[1]->vt != VT_INTEGER)
!     {
!         printf("Invalid property type for changetextobjproperty.\n");
!         return E_FAIL;
!     }
! 
!     propind = varlist[1]->lVal;
! 
!     switch(propind)
!     {
!     case _top_font:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             level->textobjs[ind].font = (LONG)ltemp;
!         }
!         else
!         {
!             goto changetextobjproperty_error;
!         }
!         break;
!     }
!     case _top_text:
!     {
!         ScriptVariant_ToString(varlist[2], buf);
!         level->textobjs[ind].text = malloc(MAX_STR_VAR_LEN);
!         strncpy(level->textobjs[ind].text, buf, MAX_STR_VAR_LEN);
!         break;
!     }
!     case _top_time:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             level->textobjs[ind].time = (LONG)ltemp;
!         }
!         else
!         {
!             goto changetextobjproperty_error;
!         }
!         break;
!     }
!     case _top_x:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             level->textobjs[ind].position.x = (LONG)ltemp;
!         }
!         else
!         {
!             goto changetextobjproperty_error;
!         }
!         break;
!     }
!     case _top_a:
!     case _top_y:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             level->textobjs[ind].position.y = (LONG)ltemp;
!         }
!         else
!         {
!             goto changetextobjproperty_error;
!         }
!         break;
!     }
!     case _top_z:
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[2], &ltemp)))
!         {
!             level->textobjs[ind].position.z = (LONG)ltemp;
!         }
!         else
!         {
!             goto changetextobjproperty_error;
!         }
!         break;
!     }
!     default:
!         //printf("Property name '%s' is not supported by function changetextobjproperty.\n", propname);
!         return E_FAIL;
!         break;
!     }
! 
!     return S_OK;
! 
! changetextobjproperty_error:
!     ScriptVariant_ToString(varlist[2], buf);
!     printf("Invalid textobj value: %s\n", buf);
!     return E_FAIL;
! }
! 
! // settextobj(int index, int x, int y, int font, int z, char text, int time {optional})
! HRESULT openbor_settextobj(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     LONG X, Y, Z, F, T = 0;
!     static char buf[MAX_STR_VAR_LEN];
!     const char *stotext = "settextobj(int index, int x, int y, int font, int z, char text, int time {optional})";
! 
!     *pretvar = NULL;
! 
! 
!     if(paramCount < 6)
!     {
!         printf("Function needs at least 6 parameters: %s\n", stotext);
!         return E_FAIL;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ind)))
!     {
!         printf("Function's 1st argument must be a numeric value: %s\n", stotext);
!         return E_FAIL;
!     }
! 
!     if(ind < 0)
!     {
!         printf("Invalid textobj index, must be >= 0\n");
!         return E_FAIL;
!     }
!     else if(ind >= level->numtextobjs)
!     {
!         __reallocto(level->textobjs, level->numtextobjs, ind + 1);
!         level->numtextobjs = ind + 1;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &X)))
!     {
!         goto settextobj_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[2], &Y)))
!     {
!         goto settextobj_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[3], &F)))
!     {
!         goto settextobj_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[4], &Z)))
!     {
!         goto settextobj_error;
!     }
!     ScriptVariant_ToString(varlist[5], buf);
!     if(paramCount >= 7 && FAILED(ScriptVariant_IntegerValue(varlist[6], &T)))
!     {
!         goto settextobj_error;
!     }
! 
!     level->textobjs[ind].time = (int)T;
!     level->textobjs[ind].position.x = (int)X;
!     level->textobjs[ind].position.y = (int)Y;
!     level->textobjs[ind].position.z = (int)Z;
!     level->textobjs[ind].font = (int)F;
! 
!     if(!level->textobjs[ind].text)
!     {
!         level->textobjs[ind].text = (char *)malloc(MAX_STR_VAR_LEN);
!     }
!     strncpy(level->textobjs[ind].text, buf, MAX_STR_VAR_LEN);
! 
!     return S_OK;
! 
! settextobj_error:
!     printf("Invalid value(s) for settextobj: %s\n", stotext);
!     return E_FAIL;
! }
! 
! HRESULT openbor_cleartextobj(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     const char *cltotext = "cleartextobj(int index)";
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         printf("Function needs at least 1 parameter: %s\n", cltotext);
!         return E_FAIL;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ind)))
!     {
!         printf("Function's 1st argument must be a numeric value: %s\n", cltotext);
!         return E_FAIL;
!     }
! 
!     if(ind < 0 || ind >= level->numtextobjs)
!     {
!         return S_OK;
!     }
! 
!     level->textobjs[ind].time = 0;
!     level->textobjs[ind].position.x = 0;
!     level->textobjs[ind].position.y = 0;
!     level->textobjs[ind].font = 0;
!     level->textobjs[ind].position.z = 0;
!     if(level->textobjs[ind].text)
!     {
!         free(level->textobjs[ind].text);
!     }
!     level->textobjs[ind].text = NULL;
!     return S_OK;
! }
! 
! // ===== get layer type ======
! enum getlt_enum
! {
!     _glt_background,
!     _glt_bglayer,
!     _glt_fglayer,
!     _glt_frontpanel,
!     _glt_generic,
!     _glt_neon,
!     _glt_panel,
!     _glt_screen,
!     _glt_water,
!     _glt_the_end,
! };
! 
! 
! // ===== getbglayerproperty ======
! enum getbglp_enum
! {
!     _glp_alpha,
!     _glp_amplitude,
!     _glp_bgspeedratio,
!     _glp_enabled,
!     _glp_neon,
!     _glp_quake,
!     _glp_transparency,
!     _glp_watermode,
!     _glp_wavelength,
!     _glp_wavespeed,
!     _glp_xoffset,
!     _glp_xratio,
!     _glp_xrepeat,
!     _glp_xspacing,
!     _glp_z,
!     _glp_zoffset,
!     _glp_zratio,
!     _glp_zrepeat,
!     _glp_zspacing,
!     _glp_the_end,
! };
! 
! int mapstrings_layerproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname = NULL;
!     int prop;
! 
!     static const char *proplist[] =
!     {
!         "alpha",
!         "amplitude",
!         "bgspeedratio",
!         "enabled",
!         "neon",
!         "quake",
!         "transparency",
!         "watermode",
!         "wavelength",
!         "wavespeed",
!         "xoffset",
!         "xratio",
!         "xrepeat",
!         "xspacing",
!         "z",
!         "zoffset",
!         "zratio",
!         "zrepeat",
!         "zspacing",
!     };
! 
!     static const char *typelist[] =
!     {
!         "background",
!         "bglayer",
!         "fglayer",
!         "frontpanel",
!         "generic",
!         "neon",
!         "panel",
!         "water",
!     };
! 
!     if(paramCount < 3)
!     {
!         return 1;
!     }
!     MAPSTRINGS(varlist[0], typelist, _glt_the_end,
!                "Type name '%s' is not supported by function getlayerproperty.\n");
!     MAPSTRINGS(varlist[2], proplist, _glp_the_end,
!                "Property name '%s' is not supported by function getlayerproperty.\n");
! 
!     return 1;
! }
! 
! HRESULT _getlayerproperty(s_layer *layer, int propind, ScriptVariant **pretvar)
! {
! 
!     switch(propind)
!     {
!     case _glp_alpha:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.alpha;
!         break;
!     }
!     case _glp_amplitude:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.water.amplitude;
!         break;
!     }
!     case _glp_bgspeedratio:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)layer->bgspeedratio;
!         break;
!     }
!     case _glp_enabled:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->enabled;
!         break;
!     }
!     case _glp_neon:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->neon;
!         break;
!     }
!     case _glp_quake:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->quake;
!         break;
!     }
!     case _glp_transparency:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.transbg;
!         break;
!     }
!     case _glp_watermode:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.water.watermode;
!         break;
!     }
! 
!     case _glp_wavelength:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.water.wavelength;
!         break;
!     }
!     case _glp_wavespeed:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)layer->drawmethod.water.wavespeed;
!         break;
!     }
!     case _glp_xoffset:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->offset.x;
!         break;
!     }
!     case _glp_xratio:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)layer->ratio.x;
!         break;
!     }
!     case _glp_xrepeat:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.xrepeat;
!         break;
!     }
!     case _glp_xspacing:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->spacing.x;
!         break;
!     }
!     case _glp_z:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->z;
!         break;
!     }
!     case _glp_zoffset:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->offset.z;
!         break;
!     }
!     case _glp_zratio:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!         (*pretvar)->dblVal = (DOUBLE)layer->ratio.z;
!         break;
!     }
!     case _glp_zrepeat:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->drawmethod.yrepeat;
!         break;
!     }
!     case _glp_zspacing:
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)layer->spacing.z;
!         break;
!     }
!     default:
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     return S_OK;
! }
! 
! HRESULT _changelayerproperty(s_layer *layer, int propind, ScriptVariant *var)
! {
!     LONG temp;
!     DOUBLE temp2;
!     switch(propind)
!     {
!     case _glp_alpha:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.alpha = temp;
!         break;
!     }
!     case _glp_amplitude:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.water.amplitude = temp;
!         break;
!     }
!     case _glp_bgspeedratio:
!     {
!         if(FAILED(ScriptVariant_DecimalValue(var, &temp2)))
!         {
!             return E_FAIL;
!         }
!         layer->bgspeedratio = temp2;
!         break;
!     }
!     case _glp_enabled:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->enabled = temp;
!         break;
!     }
!     case _glp_neon:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->neon = temp;
!         break;
!     }
!     case _glp_quake:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->quake = temp;
!         break;
!     }
!     case _glp_transparency:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.transbg = temp;
!         break;
!     }
!     case _glp_watermode:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.water.watermode = temp;
!         break;
!     }
! 
!     case _glp_wavelength:
!     {
!         if(FAILED(ScriptVariant_DecimalValue(var, &temp2)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.water.wavelength = temp2;
!         break;
!     }
!     case _glp_wavespeed:
!     {
!         if(FAILED(ScriptVariant_DecimalValue(var, &temp2)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.water.wavespeed = temp2;
!         break;
!     }
!     case _glp_xoffset:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->offset.x = temp;
!         break;
!     }
!     case _glp_xratio:
!     {
!         if(FAILED(ScriptVariant_DecimalValue(var, &temp2)))
!         {
!             return E_FAIL;
!         }
!         layer->ratio.x = temp2;
!         break;
!     }
!     case _glp_xrepeat:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.xrepeat = temp;
!         break;
!     }
!     case _glp_xspacing:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->spacing.x = temp;
!         break;
!     }
!     case _glp_z:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->z = temp;
!         break;
!     }
!     case _glp_zoffset:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->offset.z = temp;
!         break;
!     }
!     case _glp_zratio:
!     {
!         if(FAILED(ScriptVariant_DecimalValue(var, &temp2)))
!         {
!             return E_FAIL;
!         }
!         layer->ratio.z = temp2;
!         break;
!     }
!     case _glp_zrepeat:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->drawmethod.yrepeat = temp;
!         break;
!     }
!     case _glp_zspacing:
!     {
!         if(FAILED(ScriptVariant_IntegerValue(var, &temp)))
!         {
!             return E_FAIL;
!         }
!         layer->spacing.z = temp;
!         break;
!     }
!     default:
!         return E_FAIL;
!     }
!     return S_OK;
! }
! 
! s_layer *_getlayer(int type, int ind)
! {
!     switch(type)
!     {
!     case _glt_background:
!         return level->background;
!     case _glt_bglayer:
!         if(ind < 0 || ind >= level->numbglayers)
!         {
!             return NULL;
!         }
!         return level->bglayers[ind];
!     case _glt_fglayer:
!         if(ind < 0 || ind >= level->numfglayers)
!         {
!             return NULL;
!         }
!         return level->fglayers[ind];
!     case _glt_frontpanel:
!         if(ind < 0 || ind >= level->numfrontpanels)
!         {
!             return NULL;
!         }
!         return level->frontpanels[ind];
!     case _glt_generic:
!         if(ind < 0 || ind >= level->numgenericlayers)
!         {
!             return NULL;
!         }
!         return level->genericlayers[ind];
!     case _glt_neon:
!         if(ind < 0 || ind >= level->numpanels)
!         {
!             return NULL;
!         }
!         return level->panels[ind][1];
!     case _glt_panel:
!         if(ind < 0 || ind >= level->numpanels)
!         {
!             return NULL;
!         }
!         return level->panels[ind][0];
!     case _glt_screen:
!         if(ind < 0 || ind >= level->numpanels)
!         {
!             return NULL;
!         }
!         return level->panels[ind][2];
!     case _glt_water:
!         if(ind < 0 || ind >= level->numwaters)
!         {
!             return NULL;
!         }
!         return level->waters[ind];
!     default:
!         return NULL;
!     }
! }
! 
! // getlayerproperty(type, index, propertyname);
! HRESULT openbor_getlayerproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     int propind, type;
!     s_layer *layer = NULL;
! 
!     if(paramCount < 3)
!     {
!         goto getlayerproperty_error;
!     }
! 
!     mapstrings_layerproperty(varlist, paramCount);
! 
!     type = varlist[0]->lVal;
!     propind = varlist[2]->lVal;
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &ind)))
!     {
!         goto getlayerproperty_error2;
!     }
! 
!     layer = _getlayer(type, (int)ind);
! 
!     if(layer == NULL)
!     {
!         goto getlayerproperty_error2;
!     }
! 
!     if(FAILED(_getlayerproperty(layer, propind, pretvar)))
!     {
!         goto getlayerproperty_error3;
!     }
! 
!     return S_OK;
! 
! getlayerproperty_error:
!     *pretvar = NULL;
!     printf("Function getlayerproperty must have 3 parameters: layertype, index and propertyname\n");
!     return E_FAIL;
! getlayerproperty_error2:
!     *pretvar = NULL;
!     printf("Layer not found!\n");
!     return E_FAIL;
! getlayerproperty_error3:
!     *pretvar = NULL;
!     printf("Bad property name or value.\n");
!     return E_FAIL;
! }
! 
! // changelayerproperty(type, index, propertyname);
! HRESULT openbor_changelayerproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     int propind, type;
!     s_layer *layer = NULL;
!     *pretvar = NULL;
! 
!     if(paramCount < 4)
!     {
!         goto chglayerproperty_error;
!     }
! 
!     mapstrings_layerproperty(varlist, paramCount);
! 
!     type = varlist[0]->lVal;
!     propind = varlist[2]->lVal;
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &ind)))
!     {
!         goto chglayerproperty_error2;
!     }
! 
!     layer = _getlayer(type, (int)ind);
! 
!     if(layer == NULL)
!     {
!         goto chglayerproperty_error2;
!     }
! 
!     if(FAILED(_changelayerproperty(layer, propind, varlist[3])))
!     {
!         goto chglayerproperty_error3;
!     }
! 
!     return S_OK;
! 
! chglayerproperty_error:
!     printf("Function changelayerproperty must have 4 parameters: layertype, index, propertyname and value\n");
!     return E_FAIL;
! chglayerproperty_error2:
!     printf("Layer not found!\n");
!     return E_FAIL;
! chglayerproperty_error3:
!     printf("Layer property not understood or bad value.\n");
!     return E_FAIL;
! }
! 
! //shutdown(status, message)
! HRESULT openbor_shutdown(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp = 0;
! 
!     *pretvar = NULL;
! 
!     if(paramCount > 0 && FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)))
!     {
!         goto shutdown_error;
!     }
!     if(paramCount > 1 && varlist[1]->vt != VT_STR)
!     {
!         goto shutdown_error;
!     }
! 
!     borShutdown((LONG)ltemp,  paramCount > 1 ? StrCache_Get(varlist[1]->strVal) : (DEFAULT_SHUTDOWN_MESSAGE));
! 
!     return S_OK;
! shutdown_error:
!     printf("shutdown(status, message): both parameters are optional but must be valid.\n");
!     return E_FAIL;
! }
! 
! //jumptobranch(name, immediate)
! HRESULT openbor_jumptobranch(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     extern char branch_name[MAX_NAME_LEN + 1];
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto jumptobranch_error;
!     }
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto jumptobranch_error;
!     }
! 
!     strncpy(branch_name, StrCache_Get(varlist[0]->strVal), MIN(MAX_NAME_LEN, MAX_STR_VAR_LEN)); // copy the string value to branch name
! 
!     if(paramCount >= 2)
!     {
!         if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &ltemp)))
!         {
!             endgame = (LONG)ltemp;
!             // 1 means goto that level immediately, or, wait until the level is complete
!         }
!         else
!         {
!             goto jumptobranch_error;
!         }
!     }
! 
!     return S_OK;
! jumptobranch_error:
!     printf("Function requires 1 string value, the second argument is optional(int): jumptobranch(name, immediate)\n");
!     return E_FAIL;
! }
! 
! //bindentity(entity, target, x, z, a, direction, binding.ani_bind);
! //bindentity(entity, NULL()); // unbind
! HRESULT openbor_bindentity(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *ent = NULL;
!     entity *other = NULL;
!     ScriptVariant *arg = NULL;
!     void adjust_bind(entity * e);
!     LONG x = 0, z = 0, a = 0, dir = 0, anim = 0, sortid = -1;
! 
!     *pretvar = NULL;
!     if(paramCount < 2)
!     {
!         return E_FAIL;
!     }
! 
!     ent = (entity *)(varlist[0])->ptrVal; //retrieve the entity
!     if(!ent)
!     {
!         return S_OK;
!     }
! 
!     other = (entity *)(varlist[1])->ptrVal;
!     if(!other)
!     {
!         ent->binding.ent = NULL;
!         ent->binding.bind_toggle.x = 0;
!         ent->binding.bind_toggle.z = 0;
!         ent->binding.bind_toggle.y = 0;
!         return S_OK;
!     }
! 
!     ent->binding.ent = other;
!     ent->binding.sortid = sortid;
! 
!     if(paramCount < 3)
!     {
!         goto BIND;
!     }
!     // x
!     arg = varlist[2];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &x)))
!         {
!             return E_FAIL;
!         }
! 
!         ent->binding.offset.x = (int)x;
!         ent->binding.bind_toggle.x = 1;
!     } else ent->binding.bind_toggle.x = 0;
!     if(paramCount < 4)
!     {
!         goto BIND;
!     }
!     // z
!     arg = varlist[3];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &z)))
!         {
!             return E_FAIL;
!         }
!         ent->binding.offset.z = (int)z;
!         ent->binding.bind_toggle.z = 1;
!     } else ent->binding.bind_toggle.z = 0;
!     if(paramCount < 5)
!     {
!         goto BIND;
!     }
!     // a
!     arg = varlist[4];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &a)))
!         {
!             return E_FAIL;
!         }
!         ent->binding.offset.y = (int)a;
!         ent->binding.bind_toggle.y = 1;
!     } else ent->binding.bind_toggle.y = 0;
!     if(paramCount < 6)
!     {
!         goto BIND;
!     }
!     // direction
!     arg = varlist[5];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &dir)))
!         {
!             return E_FAIL;
!         }
!         ent->binding.direction = (int)dir;
!     }
!     if(paramCount < 7)
!     {
!         goto BIND;
!     }
!     // animation
!     arg = varlist[6];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &anim)))
!         {
!             return E_FAIL;
!         }
!         ent->binding.ani_bind = (int)anim;
!     }
!     if(paramCount < 8)
!     {
!         goto BIND;
!     }
!     // sortid
!     arg = varlist[7];
!     if(arg->vt != VT_EMPTY)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(arg, &sortid)))
!         {
!             return E_FAIL;
!         }
!         ent->binding.sortid = (int)sortid;
!     }
! 
! BIND:
!     adjust_bind(ent);
! 
!     return S_OK;
! }
! 
! //array(size);
! HRESULT openbor_array(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG size;
!     Varlist *array;
! 
!     if(paramCount < 1 || FAILED(ScriptVariant_IntegerValue(varlist[0], &size)) || size < 0)
!     {
!         printf("Function requires 1 positive int value: array(int size)\n");
!         goto array_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     array = malloc(sizeof(*array));
!     (*pretvar)->ptrVal = (VOID *)array;
! 
!     if((*pretvar)->ptrVal == NULL)
!     {
!         printf("Not enough memory: array(%d)\n", (int)size);
!         goto array_error;
!     }
! 
!     Varlist_Init(array, size);
! 
!     List_InsertAfter(&scriptheap, (void *)(array), "openbor_array");
!     return S_OK;
! 
! array_error:
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //size(array)
! HRESULT openbor_size(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto size_error;
!     }
! 
!     // By White Dragon
!     if( array->list->size != 0 ) //or array->list->first
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)array->list->size;
!     }
!     else
!     {
!         ScriptVariant_Copy(*pretvar, array->vars);
!     }
! 
!     return S_OK;
! size_error:
!     printf("Function requires 1 array handle: %s(array)\n", "size");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //get(array, index);
! HRESULT openbor_get(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *ptmpvar;
!     Varlist *array;
!     LONG ltemp;
! 
!     if(paramCount < 2 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto get_error;
!     }
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         ptmpvar = Varlist_GetByName(array, StrCache_Get(varlist[1]->strVal));
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &ltemp)))
!     {
!         ptmpvar = Varlist_GetByIndex(array, (LONG)ltemp);
!     }
!     else
!     {
!         goto get_error;
!     }
! 
!     if(ptmpvar)
!     {
!         ScriptVariant_Copy(*pretvar,  ptmpvar);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
!     return S_OK;
! 
! get_error:
!     printf("Function requires 1 array handle and 1 int value: get(array, int index)\n");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //set(array, index, value);
! HRESULT openbor_set(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     LONG ltemp;
! 
!     *pretvar = NULL;
!     if(paramCount < 3 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto set_error;
!     }
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         Varlist_SetByName(array, StrCache_Get(varlist[1]->strVal), varlist[2]);
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &ltemp)))
!     {
!         Varlist_SetByIndex(array, (LONG)ltemp, varlist[2]);
!     }
!     else
!     {
!         goto set_error;
!     }
! 
!     return S_OK;
! 
! set_error:
!     printf("Function requires 1 array handle, 1 int value and 1 value: set(array, int index, value)\n");
!     return E_FAIL;
! }
! 
! //delete(array, index); // By White Dragon
! HRESULT openbor_delete(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     LONG index;
! 
!     *pretvar = NULL;
!     if(paramCount < 2 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto set_error;
!     }
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         if ( !Varlist_DeleteByName(array, StrCache_Get(varlist[1]->strVal)) ) goto set_error;
!     }
!     else if(SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &index)))
!     {
!         if ( !Varlist_DeleteByIndex(array, (int)index) ) goto set_error;
!     }
!     else
!     {
!         goto set_error;
!     }
! 
!     return S_OK;
! 
! set_error:
!     printf("Function requires 1 array handle and 1 int value (index): delete(array, index)\n");
!     return E_FAIL;
! }
! 
! //add(array, index); // By White Dragon
! HRESULT openbor_add(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     LONG index;
! 
!     *pretvar = NULL;
!     if(paramCount < 2 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto add_error;
!     }
! 
!     if(varlist[1]->vt == VT_STR)
!     {
!         Varlist_SetByName(array, StrCache_Get(varlist[1]->strVal), varlist[2]);
!     }
!     else if( SUCCEEDED(ScriptVariant_IntegerValue(varlist[1], &index)) )
!     {
!         if ( !Varlist_AddByIndex(array, (int)index, varlist[2]) ) goto add_error;
!     }
!     else
!     {
!         goto add_error;
!     }
! 
!     return S_OK;
! 
! add_error:
!     printf("Function requires 1 array handle and 1 int value (index): add(array, index)\n");
!     return E_FAIL;
! }
! 
! //reset(array)
! HRESULT openbor_reset(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto reset_error;
!     }
!     List_Reset(array->list);
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)(array->list->current != NULL);
! 
!     return S_OK;
! reset_error:
!     printf("Function requires 1 array handle: %s(array)\n", "reset");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //next(array)
! HRESULT openbor_next(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto next_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)(List_GotoNext(array->list));
! 
!     return S_OK;
! next_error:
!     printf("Function requires 1 array handle: %s(array)\n", "next");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //previous(array)
! HRESULT openbor_previous(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto previous_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)(List_GotoPrevious(array->list));
! 
!     return S_OK;
! previous_error:
!     printf("Function requires 1 array handle: %s(array)\n", "previous");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //islast(array)
! HRESULT openbor_islast(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto islast_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)(  List_Retrieve(array->list) == List_GetLast(array->list) );
! 
!     return S_OK;
! islast_error:
!     printf("Function requires 1 array handle: %s(array)\n", "islast");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //isfirst(array)
! HRESULT openbor_isfirst(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto isfirst_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)(  List_Retrieve(array->list) == List_GetFirst(array->list) );
! 
!     return S_OK;
! isfirst_error:
!     printf("Function requires 1 array handle: %s(array)\n", "isfirst");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //key(array)
! HRESULT openbor_key(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     char *name;
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto key_error;
!     }
! 
!     name = List_GetName(array->list);
!     if(name)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(name);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
! 
!     return S_OK;
! key_error:
!     printf("Function requires 1 array handle: %s(array)\n", "key");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //value(array)
! HRESULT openbor_value(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     ScriptVariant *var;
!     Varlist *array;
!     if(paramCount < 1 || varlist[0]->vt != VT_PTR || !(array = (Varlist *)varlist[0]->ptrVal) || array->magic != varlist_magic)
!     {
!         goto value_error;
!     }
! 
!     var = List_Retrieve(array->list);
!     if(var)
!     {
!         ScriptVariant_Copy(*pretvar, var);
!     }
!     else
!     {
!         ScriptVariant_Clear(*pretvar);
!     }
! 
!     return S_OK;
! value_error:
!     printf("Function requires 1 array handle: %s(array)\n", "value");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //allocscreen(int w, int h);
! HRESULT openbor_allocscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG w, h;
!     s_screen *screen;
! 
!     if(paramCount < 2)
!     {
!         goto allocscreen_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &w)))
!     {
!         goto allocscreen_error;
!     }
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &h)))
!     {
!         goto allocscreen_error;
!     }
! 
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     screen = allocscreen((int)w, (int)h, PIXEL_32);
!     if(screen)
!     {
!         clearscreen(screen);
!     }
!     (*pretvar)->ptrVal = (VOID *)screen;
! 
!     if((*pretvar)->ptrVal == NULL)
!     {
!         printf("Not enough memory: allocscreen(%d, %d)\n", (int)w, (int)h);
!         (*pretvar) = NULL;
!         return E_FAIL;
!     }
!     List_InsertAfter(&scriptheap, (void *)((*pretvar)->ptrVal), "openbor_allocscreen");
!     return S_OK;
! 
! allocscreen_error:
!     printf("Function requires 2 int values: allocscreen(int width, int height)\n");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //clearscreen(s_screen* screen)
! HRESULT openbor_clearscreen(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     s_screen *screen;
! 
!     *pretvar = NULL;
!     if(paramCount != 1)
!     {
!         goto clearscreen_error;
!     }
!     if(varlist[0]->vt != VT_PTR)
!     {
!         goto clearscreen_error;
!     }
! 
!     screen = (s_screen *)varlist[0]->ptrVal;
! 
!     if(screen == NULL)
!     {
!         printf("Error: NULL pointer passed to clearscreen(void screen)\n");
!         *pretvar = NULL;
!         return E_FAIL;
!     }
!     clearscreen(screen);
!     return S_OK;
! 
! clearscreen_error:
!     printf("Function requires a screen pointer: clearscreen(void screen)\n");
!     return E_FAIL;
! }
! 
! int mapstrings_drawmethodproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname = NULL;
!     int prop;
! 
!     static const char *proplist[] =
!     {
!         "alpha",
!         "amplitude",
!         "beginsize",
!         "centerx",
!         "centery",
!         "channelb",
!         "channelg",
!         "channelr",
!         "clip",
!         "cliph",
!         "clipw",
!         "clipx",
!         "clipy",
!         "enabled",
!         "endsize",
!         "fillcolor",
!         "flag",
!         "fliprotate",
!         "flipx",
!         "flipy",
!         "perspective",
!         "remap",
!         "reset",
!         "rotate",
!         "scalex",
!         "scaley",
!         "shiftx",
!         "table",
!         "tintcolor",
!         "tintmode",
!         "transbg",
!         "watermode",
!         "wavelength",
!         "wavespeed",
!         "wavetime",
!         "xrepeat",
!         "xspan",
!         "yrepeat",
!         "yspan",
!     };
! 
! 
!     if(paramCount < 2)
!     {
!         return 1;
!     }
!     MAPSTRINGS(varlist[1], proplist, _dm_the_end,
!                "Property name '%s' is not supported by drawmethod.\n");
! 
!     return 1;
! }
! 
! // changedrawmethod(entity, propertyname, value);
! HRESULT openbor_changedrawmethod(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     entity *e;
!     LONG temp = 0;
!     DOUBLE ftemp = 0;
!     s_drawmethod *pmethod;
!     *pretvar = NULL;
! 
!     if(paramCount < 3)
!     {
!         goto changedm_error;
!     }
! 
!     mapstrings_drawmethodproperty(varlist, paramCount);
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto changedm_error;
!     }
! 
!     if(e)
!     {
!         pmethod = &(e->drawmethod);
!     }
!     else
!     {
!         pmethod = &(drawmethod);
!     }
! 
!     switch(varlist[1]->lVal)
!     {
! 
!     case _dm_alpha:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->alpha = (int)temp;
!         break;
!     case _dm_amplitude:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.amplitude = (int)temp;
!         break;
!     case _dm_beginsize:
!         if(FAILED(ScriptVariant_DecimalValue(varlist[2], &ftemp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.beginsize = (float)ftemp;
!         break;
!     case _dm_centerx:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->centerx = (int)temp;
!         break;
!     case _dm_centery:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->centery = (int)temp;
!         break;
!     case _dm_channelb:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->channelb = (int)temp;
!         break;
!     case _dm_channelg:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->channelg = (int)temp;
!         break;
!     case _dm_channelr:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->channelr = (int)temp;
!         break;
!     case _dm_clip:
!         if(paramCount < 6)
!         {
!             return E_FAIL;
!         }
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipx = (int)temp;
!         if(FAILED(ScriptVariant_IntegerValue(varlist[3], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipy = (int)temp;
!         if(FAILED(ScriptVariant_IntegerValue(varlist[4], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipw = (int)temp;
!         if(FAILED(ScriptVariant_IntegerValue(varlist[5], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->cliph = (int)temp;
!         break;
!     case _dm_clipx:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipx = (int)temp;
!         break;
!     case _dm_clipy:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipy = (int)temp;
!         break;
!     case _dm_clipw:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->clipw = (int)temp;
!         break;
!     case _dm_cliph:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->cliph = (int)temp;
!         break;
!     case _dm_enabled:
!     case _dm_flag:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->flag = (int)temp;
!         break;
!     case _dm_endsize:
!         if(FAILED(ScriptVariant_DecimalValue(varlist[2], &ftemp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.endsize = (float)ftemp;
!         break;
!     case _dm_fillcolor:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->fillcolor = (int)temp;
!         break;
!     case _dm_fliprotate:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->fliprotate = (int)temp;
!         break;
!     case _dm_flipx:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->flipx = (int)temp;
!         break;
!     case _dm_flipy:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->flipy = (int)temp;
!         break;
!     case _dm_perspective:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.perspective = (int)temp;
!         break;
!     case _dm_remap:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->remap = (int)temp;
!         break;
!     case _dm_reset:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         if(temp)
!         {
!             *pmethod = plainmethod;
!         }
!         break;
!     case _dm_rotate:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->rotate = (float)temp;
!         break;
!     case _dm_scalex:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->scalex = (int)temp;
!         break;
!     case _dm_scaley:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->scaley = (int)temp;
!         break;
!     case _dm_shiftx:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->shiftx = (int)temp;
!         break;
!     case _dm_table:
!         if(varlist[2]->vt != VT_PTR && varlist[2]->vt != VT_EMPTY )
!         {
!             return E_FAIL;
!         }
!         pmethod->table = (void *)varlist[2]->ptrVal;
!         break;
!     case _dm_tintmode:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->tintmode = (int)temp;
!         break;
!     case _dm_tintcolor:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->tintcolor = (int)temp;
!         break;
!     case _dm_transbg:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->transbg = (int)temp;
!         break;
!     case _dm_watermode:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.watermode = (int)temp;
!         break;
!     case _dm_wavelength:
!         if(FAILED(ScriptVariant_DecimalValue(varlist[2], &ftemp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.wavelength = (float)ftemp;
!         break;
!     case _dm_wavespeed:
!         if(FAILED(ScriptVariant_DecimalValue(varlist[2], &ftemp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.wavespeed = (float)ftemp;
!         break;
!     case _dm_wavetime:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->water.wavetime = (int)(temp * pmethod->water.wavespeed);
!         break;
!     case _dm_xrepeat:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->xrepeat = (int)temp;
!         break;
!     case _dm_yrepeat:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->yrepeat = (int)temp;
!         break;
!     case _dm_xspan:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->xspan = (int)temp;
!         break;
!     case _dm_yspan:
!         if(FAILED(ScriptVariant_IntegerValue(varlist[2], &temp)))
!         {
!             return E_FAIL;
!         }
!         pmethod->yspan = (int)temp;
!         break;
!     default:
!         break;
! 
!     }
! 
!     return S_OK;
! 
! changedm_error:
!     printf("Function changedrawmethod must have at least 3 parameters: entity, propertyname, value\n");
!     return E_FAIL;
! }
! 
! //getdrawmethod(<entity>, <property>)
! HRESULT openbor_getdrawmethod(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     /*
!     getdrawmethod
!     Damon V. Caskey
!     2013-11-09
! 
!     Allow module author to read current drawmethod settings.
!     */
!     entity *e;
!     s_drawmethod *pmethod;
! 
!     if(paramCount < 2)
!     {
!         goto getdm_error;
!     }
! 
!     ScriptVariant_Clear(*pretvar);
!     mapstrings_drawmethodproperty(varlist, paramCount);
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto getdm_error;
!     }
! 
!     if(e)
!     {
!         pmethod = &(e->drawmethod);
!     }
!     else
!     {
!         pmethod = &(drawmethod);
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     switch(varlist[1]->lVal)
!     {
!         case _dm_alpha:
!             (*pretvar)->lVal = (int)pmethod->alpha;
!             break;
!         case _dm_amplitude:
!             (*pretvar)->lVal = (int)pmethod->water.amplitude;
!             break;
!         case _dm_beginsize:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (float)pmethod->water.beginsize;
!             break;
!         case _dm_centerx:
!             (*pretvar)->lVal = (int)pmethod->centerx;
!             break;
!         case _dm_centery:
!             (*pretvar)->lVal = (int)pmethod->centery;
!             break;
!         case _dm_channelb:
!             (*pretvar)->lVal = (int)pmethod->channelb;
!             break;
!         case _dm_channelg:
!             (*pretvar)->lVal = (int)pmethod->channelg;
!             break;
!         case _dm_channelr:
!             (*pretvar)->lVal = (int)pmethod->channelr;
!             break;
!         case _dm_clipx:
!             (*pretvar)->lVal = (int)pmethod->clipx;
!             break;
!         case _dm_clipy:
!             (*pretvar)->lVal = (int)pmethod->clipy;
!             break;
!         case _dm_clipw:
!             (*pretvar)->lVal = (int)pmethod->clipw;
!             break;
!         case _dm_cliph:
!             (*pretvar)->lVal = (int)pmethod->cliph;
!             break;
!         case _dm_endsize:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (float)pmethod->water.endsize;
!             break;
!         case _dm_fillcolor:
!             (*pretvar)->lVal = (int)pmethod->fillcolor;
!             break;
!         case _dm_fliprotate:
!             (*pretvar)->lVal = (int)pmethod->fliprotate;
!             break;
!         case _dm_flipx:
!             (*pretvar)->lVal = (int)pmethod->flipx;
!             break;
!         case _dm_flipy:
!             (*pretvar)->lVal = (int)pmethod->flipy;
!             break;
!         case _dm_perspective:
!             (*pretvar)->lVal = (int)pmethod->water.perspective;
!             break;
!         case _dm_remap:
!             (*pretvar)->lVal = (int)pmethod->remap;
!             break;
!         case _dm_rotate:
!             (*pretvar)->lVal = (int)pmethod->rotate;
!             break;
!         case _dm_scalex:
!             (*pretvar)->lVal = (int)pmethod->scalex;
!             break;
!         case _dm_scaley:
!             (*pretvar)->lVal = (int)pmethod->scaley;
!             break;
!         case _dm_shiftx:
!             (*pretvar)->lVal = (int)pmethod->shiftx;
!             break;
!         case _dm_table:
!             ScriptVariant_ChangeType(*pretvar, VT_PTR);
!             (*pretvar)->ptrVal = (void *)pmethod->table;
!             break;
!         case _dm_tintmode:
!             (*pretvar)->lVal = (int)pmethod->tintmode;
!             break;
!         case _dm_tintcolor:
!             (*pretvar)->lVal = (int)pmethod->tintcolor;
!             break;
!         case _dm_transbg:
!             (*pretvar)->lVal = (int)pmethod->transbg;
!             break;
!         case _dm_watermode:
!             (*pretvar)->lVal = (int)pmethod->water.watermode;
!             break;
!         case _dm_wavelength:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (float)pmethod->water.wavelength;
!             break;
!         case _dm_wavespeed:
!             ScriptVariant_ChangeType(*pretvar, VT_DECIMAL);
!             (*pretvar)->dblVal = (float)pmethod->water.wavespeed;
!             break;
!         case _dm_wavetime:
!             (*pretvar)->lVal = (int)pmethod->water.wavetime;
!             break;
!         case _dm_xrepeat:
!             (*pretvar)->lVal = (int)pmethod->xrepeat;
!             break;
!         case _dm_yrepeat:
!             (*pretvar)->lVal = (int)pmethod->yrepeat;
!             break;
!         case _dm_xspan:
!             (*pretvar)->lVal = (int)pmethod->xspan;
!             break;
!         case _dm_yspan:
!             (*pretvar)->lVal = pmethod->yspan;
!             break;
!         default:
!         case _dm_enabled:
!         case _dm_flag:
!             (*pretvar)->lVal = (int)pmethod->flag;
!             break;
!     }
! 
!     return S_OK;
! 
! getdm_error:
!     printf("Function getdrawmethod must have at least 2 parameters: entity, propertyname\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //deprecated
! //setdrawmethod(entity, int flag, int scalex, int scaley, int flipx, int flipy, int shiftx, int alpha, int remap, int fillcolor, int rotate, int fliprotate, int transparencybg, void* colourmap, int centerx, int centery);
! HRESULT openbor_setdrawmethod(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG value[14];
!     entity *e;
!     s_drawmethod *pmethod;
!     int i;
! 
!     *pretvar = NULL;
!     if(paramCount < 2)
!     {
!         goto setdrawmethod_error;
!     }
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto setdrawmethod_error;
!     }
! 
!     if(e)
!     {
!         pmethod = &(e->drawmethod);
!     }
!     else
!     {
!         pmethod = &(drawmethod);
!     }
! 
!     memset(value, 0, sizeof(value));
!     for(i = 1; i < paramCount && i < 13; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto setdrawmethod_error;
!         }
!     }
! 
!     if(paramCount >= 14 && varlist[13]->vt != VT_PTR && varlist[13]->vt != VT_EMPTY)
!     {
!         goto setdrawmethod_error;
!     }
! 
!     for(i = 14; i < paramCount && i < 16; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 2)))
!         {
!             goto setdrawmethod_error;
!         }
!     }
! 
!     pmethod->flag = (int)value[0];
!     pmethod->scalex = (int)value[1];
!     pmethod->scaley = (int)value[2];
!     pmethod->flipx = (int)value[3];
!     pmethod->flipy = (int)value[4];
!     pmethod->shiftx = (int)value[5];
!     pmethod->alpha = (int)value[6];
!     pmethod->remap = (int)value[7];
!     pmethod->fillcolor = (int)value[8];
!     pmethod->rotate = ((int)value[9]) % 360;
!     pmethod->fliprotate = (int)value[10];
!     pmethod->transbg = (int)value[11];
!     if(paramCount >= 14)
!     {
!         pmethod->table = (unsigned char *)varlist[13]->ptrVal;
!     }
!     pmethod->centerx = (int)value[12];
!     pmethod->centery = (int)value[13];
! 
!     if(pmethod->rotate < 0)
!     {
!         pmethod->rotate += 360;
!     }
!     return S_OK;
! 
! setdrawmethod_error:
!     printf("Function need a valid entity handle and at least 1 interger parameter, setdrawmethod(entity, int flag, int scalex, int scaley, int flipx, int flipy, int shiftx, int alpha, int remap, int fillcolor, int rotate, int fliprotate, int transparencybg, void* colourmap, centerx, centery)\n");
!     return E_FAIL;
! }
! 
! //updateframe(entity, int frame);
! HRESULT openbor_updateframe(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG f;
!     entity *e;
!     void update_frame(entity * ent, int f);
! 
!     *pretvar = NULL;
!     if(paramCount < 2)
!     {
!         goto updateframe_error;
!     }
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto updateframe_error;
!     }
! 
!     if(!e)
!     {
!         goto updateframe_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[1], &f)))
!     {
!         goto updateframe_error;
!     }
! 
!     update_frame(e, (int)f);
! 
!     return S_OK;
! 
! updateframe_error:
!     printf("Function need a valid entity handle and at an interger parameter: updateframe(entity, int frame)\n");
!     return E_FAIL;
! }
! 
! //executeanimation(entity, int anim, int resetable);
! HRESULT openbor_executeanimation(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG anim, resetable = 0;
!     entity *e;
! 
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto executeanimation_error;
!     }
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto executeanimation_error;
!     }
! 
!     if(!e)
!     {
!         goto executeanimation_error;
!     }
! 
!     e->takeaction = common_animation_normal;
!     e->attacking = ATTACKING_INACTIVE;
!     e->idling = IDLING_INACTIVE;
!     e->drop = 0;
!     e->falling = 0;
      e->inpain = 0;
      e->rising = 0;
      e->riseattacking = 0;
      e->edge = EDGE_NO;
!     e->ducking = DUCK_INACTIVE;
!     e->inbackpain = 0;
!     e->blocking = 0;
! 
!     if(paramCount == 1)
!     {
!         return S_OK;
!     }
! 
!     if(paramCount > 1 && FAILED(ScriptVariant_IntegerValue(varlist[1], &anim)))
!     {
!         goto executeanimation_error;
!     }
!     if(paramCount > 2 && FAILED(ScriptVariant_IntegerValue(varlist[2], &resetable)))
!     {
!         goto executeanimation_error;
!     }
!     ent_set_anim(e, (int)anim, (int)resetable);
! 
!     return S_OK;
! 
! executeanimation_error:
!     printf("Function need a valid entity handle, the other 2 integer parameters are optional: performattack(entity, int anim, int resetable)\n");
!     return E_FAIL;
! }
! 
! //performattack(entity, int anim, int resetable);
! HRESULT openbor_performattack(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG anim, resetable = 0;
!     entity *e;
! 
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto performattack_error;
!     }
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto performattack_error;
!     }
! 
!     if(!e)
!     {
!         goto performattack_error;
!     }
! 
!     e->takeaction = common_attack_proc;
!     e->attacking = ATTACKING_ACTIVE;
!     e->idling = IDLING_INACTIVE;
!     e->drop = 0;
!     e->falling = 0;
      e->inpain = 0;
      e->rising = 0;
      e->riseattacking = 0;
!     e->edge = EDGE_NO;
!     e->inbackpain = 0;
!     e->blocking = 0;
! 
!     if(paramCount == 1)
!     {
!         return S_OK;
!     }
! 
!     if(paramCount > 1 && FAILED(ScriptVariant_IntegerValue(varlist[1], &anim)))
!     {
!         goto performattack_error;
!     }
!     if(paramCount > 2 && FAILED(ScriptVariant_IntegerValue(varlist[2], &resetable)))
!     {
!         goto performattack_error;
!     }
!     ent_set_anim(e, (int)anim, (int)resetable);
! 
!     return S_OK;
! 
! performattack_error:
!     printf("Function need a valid entity handle, the other 2 integer parameters are optional: performattack(entity, int anim, int resetable)\n");
!     return E_FAIL;
! }
! 
! //setidle(entity, int anim, int resetable, int stalladd);
! HRESULT openbor_setidle(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG anim = 0, resetable = 0, stalladd = 0;
!     entity *e;
!     extern unsigned int _time;
! 
!     *pretvar = NULL;
!     if(paramCount < 1)
!     {
!         goto setidle_error;
!     }
! 
!     if(varlist[0]->vt == VT_EMPTY)
!     {
!         e = NULL;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto setidle_error;
!     }
! 
!     if(!e)
!     {
!         goto setidle_error;
!     }
! 
!     e->takeaction = NULL;
!     e->attacking = ATTACKING_INACTIVE;
!     e->idling = 1;
!     e->drop = 0;
!     e->falling = 0;
      e->inpain = 0;
      e->rising = 0;
      e->riseattacking = 0;
      e->edge = EDGE_NO;
!     e->ducking = DUCK_INACTIVE;
!     e->inbackpain = 0;
!     e->blocking = 0;
!     e->nograb = e->nograb_default; //e->nograb = 0;
!     e->destx = e->position.x;
!     e->destz = e->position.z;
! 
!     if(paramCount == 1)
!     {
!         return S_OK;
!     }
! 
!     if(paramCount > 1 && FAILED(ScriptVariant_IntegerValue(varlist[1], &anim)))
!     {
!         goto setidle_error;
!     }
!     if(paramCount > 2 && FAILED(ScriptVariant_IntegerValue(varlist[2], &resetable)))
!     {
!         goto setidle_error;
!     }
!     if(paramCount > 3 && FAILED(ScriptVariant_IntegerValue(varlist[3], &stalladd)))
!     {
!         goto setidle_error;
!     }
!     ent_set_anim(e, (int)anim, (int)resetable);
! 
!     if(stalladd > 0)
!     {
!         e->stalltime = _time + stalladd;
!     }
! 
!     return S_OK;
! 
! setidle_error:
!     printf("Function need a valid entity handle, the other 3 integer parameters are optional: setidle(entity, int anim, int resetable, int stalladd)\n");
!     return E_FAIL;
! }
! 
! //getentity(int index_from_list)
! HRESULT openbor_getentity(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ind;
!     extern entity **ent_list;
!     extern int ent_list_size;
! 
!     if(paramCount != 1)
!     {
!         goto getentity_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ind)))
!     {
!         goto getentity_error;
!     }
! 
!     ScriptVariant_Clear(*pretvar);
! 
!     if((int)ind < ent_list_size && (int)ind >= 0)
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)ent_list[(int)ind];
!     }
!     //else, it should return an empty value
!     return S_OK;
! 
! getentity_error:
!     printf("Function need an integer parameter: getentity(int index_in_list)\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! 
! //loadmodel(name)
! HRESULT openbor_loadmodel(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG unload = 0;
!     s_model *model;
!     if(paramCount < 1)
!     {
!         goto loadmodel_error;
!     }
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto loadmodel_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     if(paramCount >= 2)
!         if(FAILED(ScriptVariant_IntegerValue(varlist[1], &unload)))
!         {
!             goto loadmodel_error;
!         }
! 
!     model = load_cached_model(StrCache_Get(varlist[0]->strVal), "openbor_loadmodel", (char)unload);
! 
!     if(paramCount >= 3 && model)
!     {
!         model_cache[model->index].selectable = (char)ScriptVariant_IsTrue(varlist[2]);
!     }
! 
!     (*pretvar)->ptrVal = (VOID *)model;
! 
!     //else, it should return an empty value
!     return S_OK;
! 
! loadmodel_error:
!     printf("Function needs a string and integer parameters: loadmodel(name, unload, selectable)\n");
!     ScriptVariant_Clear(*pretvar);
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // load a sprite which doesn't belong to the sprite_cache
! // loadsprite(path, maskpath)
! HRESULT openbor_loadsprite(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     extern s_sprite *loadsprite2(char * filename, int * width, int * height);
!     s_sprite *spr, *mask;
!     if(paramCount < 1)
!     {
!         goto loadsprite_error;
!     }
! 
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto loadsprite_error;
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     if((spr = loadsprite2(StrCache_Get(varlist[0]->strVal), NULL, NULL)))
!     {
!         (*pretvar)->ptrVal = (VOID *)spr;
!         if(paramCount > 1 && (mask = loadsprite2(StrCache_Get(varlist[1]->strVal), NULL, NULL)))
!         {
!             spr->mask = mask;
!         }
!         List_InsertAfter(&scriptheap, (void *)spr, "openbor_loadsprite");
!     }
!     //else, it should return an empty value
!     return S_OK;
! 
! loadsprite_error:
!     printf("Function need a string parameter: loadsprite(path)\n");
!     ScriptVariant_Clear(*pretvar);
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // Call options menu, blocked
! HRESULT openbor_menu_options(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     //void menu_options();
! 
!     menu_options();
! 
!     *pretvar = NULL;
!     return S_OK;
! }
! 
! HRESULT openbor_hallfame(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     hallfame(0);
! 
!     *pretvar = NULL;
!     return S_OK;
! }
! 
! //playwebm(path, int noskip)
! HRESULT openbor_playwebm(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG temp = 0; //noskip
!     extern int playwebm(char * filename, int noskip); // avoid implicit declaration
! 
!     if(paramCount < 1)
!     {
!         goto playwebm_error;
!     }
! 
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto playwebm_error;
!     }
! 
!     if(paramCount > 1)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[1], &temp)))
!         {
!             goto playwebm_error;
!         }
!     }
! 
!     #ifdef WEBM
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)playwebm(StrCache_Get(varlist[0]->strVal), (int)temp);
!     #else
!         printf("Skipping video %s; WebM playback not supported on this platform\n");
!         *pretvar = NULL;
!     #endif
! 
!     return S_OK;
! 
! playwebm_error:
!     printf("Function need a string parameter, other parameters are optional: playwebm(path, int noskip)\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //playgif(path, int x, int y, int noskip)
! HRESULT openbor_playgif(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG temp[3] = {0, 0, 0}; //x,y,noskip
!     int i;
!     extern unsigned char pal[1024];
!     extern int playgif(char * filename, int x, int y, int noskip);
! 
!     if(paramCount < 1)
!     {
!         goto playgif_error;
!     }
! 
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto playgif_error;
!     }
! 
!     for(i = 0; i < 3 && i < paramCount - 1; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i + 1], temp + i)))
!         {
!             goto playgif_error;
!         }
!     }
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)playgif(StrCache_Get(varlist[0]->strVal), (int)(temp[0]), (int)(temp[1]), (int)(temp[2]));
!     palette_set_corrected(pal, savedata.gamma, savedata.gamma, savedata.gamma, savedata.brightness, savedata.brightness, savedata.brightness);
!     return S_OK;
! 
! playgif_error:
!     printf("Function need a string parameter, other parameters are optional: playgif(path, int x, int y, int noskip)\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //open and return a handle
! //TODO: error messages
! HRESULT openbor_openanigif(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     anigif_info *info = NULL;
! 
!     if(varlist[0]->vt != VT_STR)
!     {
!         goto openanigif_error;
!     }
! 
!     info = calloc(1, sizeof(*info));
!     if(anigif_open(StrCache_Get(varlist[0]->strVal), packfile, info))
!     {
!         info->magic = anigif_magic;
!         List_InsertAfter(&scriptheap, (void *)info, "openbor_openanigif");
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)info;
!         return S_OK;
!     }
! 
! openanigif_error:
!     if(info)
!     {
!         free(info);
!     }
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //decode a frame if any
! HRESULT openbor_decodeanigif(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     anigif_info *info = NULL;
! 
!     if(varlist[0]->vt != VT_PTR || !varlist[0]->ptrVal)
!     {
!         goto decodeanigif_error;
!     }
!     info = (anigif_info *) varlist[0]->ptrVal;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)anigif_decode_frame(info);
!     return S_OK;
! 
! decodeanigif_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //TODO mapstrings
! HRESULT openbor_getanigifinfo(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     anigif_info *info = NULL;
!     char *name;
! 
!     if(varlist[0]->vt != VT_PTR || !varlist[0]->ptrVal)
!     {
!         goto getanigifinfo_error;
!     }
!     info = (anigif_info *) varlist[0]->ptrVal;
! 
!     if(varlist[1]->vt != VT_STR)
!     {
!         goto getanigifinfo_error;
!     }
!     name = StrCache_Get(varlist[1]->strVal);
!     if(0 == stricmp(name, "buffer"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         (*pretvar)->ptrVal = (VOID *)anigif_getbuffer(info);
!     }
!     else if(0 == stricmp(name, "done"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)info->done;
!     }
!     else if(0 == stricmp(name, "frame"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)info->frame;
!     }
!     else if(0 == stricmp(name, "isRGB"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)info->isRGB;
!     }
!     else if(0 == stricmp(name, "width"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)(info->gifbuffer[0] ? info->gifbuffer[0]->width : 0);
!     }
!     else if(0 == stricmp(name, "height"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)(info->gifbuffer[0] ? info->gifbuffer[0]->height : 0);
!     }
!     else if(0 == stricmp(name, "nextframe"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)info->info[0].nextframe;
!     }
!     else if(0 == stricmp(name, "lastdelay"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!         (*pretvar)->lVal = (LONG)info->info[0].lastdelay;
!     }
!     else
!     {
!         goto getanigifinfo_error;
!     }
! 
!     return S_OK;
! 
! getanigifinfo_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! // complex, so make a function for ai
! // adjustwalkanimation(ent, target);
! HRESULT openbor_adjustwalkanimation(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
! 
!     entity *e, *t, *temp;
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         e = self;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto adjustwalkanimation_error;
!     }
! 
!     if(paramCount < 2)
!     {
!         t = NULL;
!     }
!     else if(varlist[1]->vt == VT_PTR)
!     {
!         t = (entity *)varlist[1]->ptrVal;
!     }
!     else if(varlist[1]->vt == VT_EMPTY)
!     {
!         t = NULL;
!     }
!     else
!     {
!         goto adjustwalkanimation_error;
!     }
! 
!     temp = self;
! 
!     self = e;
!     adjust_walk_animation(t);
!     self = temp;
! 
!     return S_OK;
! adjustwalkanimation_error:
!     printf("Function adjustwalkanimation(entity, target), both parameters are optional, but must be valid.");
!     return E_FAIL;
! }
! 
! //finditem(entity)
! HRESULT openbor_finditem(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
! 
!     entity *e, *t, *temp;
! 
!     if(paramCount < 1)
!     {
!         e = self;
!     }
!     else if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto finditem_error;
!     }
! 
!     temp = self;
! 
!     self = e;
!     t = normal_find_item();
!     self = temp;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)t;
! 
!     return S_OK;
! finditem_error:
! 
!     *pretvar = NULL;
!     printf("Function finditem(entity), entity is optional, but must be valid.");
!     return E_FAIL;
! }
! 
! //pickup(entity, item)
! HRESULT openbor_pickup(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
! 
!     entity *e, *t, *temp;
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 2)
!     {
!         goto pickup_error;
!     }
! 
!     if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto pickup_error;
!     }
! 
!     if(varlist[1]->vt == VT_PTR)
!     {
!         t = (entity *)varlist[1]->ptrVal;
!     }
!     else
!     {
!         goto pickup_error;
!     }
! 
!     if(!e || !t)
!     {
!         goto pickup_error;
!     }
! 
!     temp = self;
! 
!     self = e;
!     common_pickupitem(t);
!     self = temp;
! 
!     return S_OK;
! pickup_error:
!     printf("Function pickup(entity, item), handles must be valid.");
!     return E_FAIL;
! }
! 
! //waypoints(ent, x1, z1, x2, z2, x3, z3, ...)
! //zero length list means clear waypoints
! HRESULT openbor_waypoints(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int num, i;
!     s_axis_principal_float *wp = NULL;
!     DOUBLE x, z;
! 
!     entity *e;
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         goto wp_error;
!     }
! 
!     if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto wp_error;
!     }
! 
!     num = (paramCount - 1) / 2;
!     if(num > 0)
!     {
!         //append
!         wp = malloc(sizeof(*wp) * (num + e->numwaypoints));
! 
!         for(i = 0; i < num ; i++)
!         {
!             if(FAILED(ScriptVariant_DecimalValue(varlist[1], &x)))
!             {
!                 goto wp_error;
!             }
! 
!             if(FAILED(ScriptVariant_DecimalValue(varlist[2], &z)))
!             {
!                 goto wp_error;
!             }
! 
!             wp[num - i - 1].x = (float)x;
!             wp[num - i - 1].z = (float)z;
!         }
!         if(e->numwaypoints)
!         {
!             for(i = 0; i < e->numwaypoints; i++)
!             {
!                 wp[i + num] = e->waypoints[i];
!             }
!         }
! 
!         if(e->waypoints)
!         {
!             free(e->waypoints);
!         }
!         e->waypoints = wp;
!         e->numwaypoints = num;
!     }
!     else
!     {
!         e->numwaypoints = 0;
!         if(e->waypoints)
!         {
!             free(e->waypoints);
!         }
!         e->waypoints = NULL;
!     }
!     return S_OK;
! 
! wp_error:
!     if(wp)
!     {
!         free(wp);
!     }
!     wp = NULL;
!     printf("Function waypoints requires a valid entity handle and a list of x, z value pairs.");
!     return E_FAIL;
! }
! 
! //testmove(entity, x, z)
! HRESULT openbor_testmove(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
! 
!     entity *e;
!     DOUBLE x, z;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
!     if(paramCount < 3)
!     {
!         goto testmove_error;
!     }
! 
!     if(varlist[0]->vt == VT_PTR)
!     {
!         e = (entity *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         goto testmove_error;
!     }
! 
!     if(FAILED(ScriptVariant_DecimalValue(varlist[1], &x)))
!     {
!         goto testmove_error;
!     }
! 
!     if(FAILED(ScriptVariant_DecimalValue(varlist[2], &z)))
!     {
!         goto testmove_error;
!     }
! 
!     if(!e)
!     {
!         goto testmove_error;
!     }
! 
!     (*pretvar)->lVal = (LONG) testmove(e, e->position.x, e->position.z, x, z);
! 
!     return S_OK;
! testmove_error:
!     *pretvar = NULL;
!     printf("Function testmove(entity, x, z)");
!     return E_FAIL;
! }
! 
! //spriteq_draw(vscreen, 0, MIN_INT, MAX_INT, dx, dy)
! HRESULT openbor_drawspriteq(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
! 
!     LONG value[5] = {0, MIN_INT, MAX_INT, 0, 0};
!     int i;
!     s_screen *screen;
!     extern s_screen *vscreen;
! 
!     *pretvar = NULL;
! 
!     if(paramCount < 1)
!     {
!         goto drawsq_error;
!     }
! 
!     if(varlist[0]->vt != VT_PTR && varlist[0]->vt != VT_EMPTY)
!     {
!         goto drawsq_error;
!     }
! 
!     if(varlist[0]->ptrVal)
!     {
!         screen = (s_screen *)varlist[0]->ptrVal;
!     }
!     else
!     {
!         screen = vscreen;
!     }
! 
!     for(i = 1; i < paramCount && i <= 5; i++)
!     {
!         if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 1)))
!         {
!             goto drawsq_error;
!         }
!     }
! 
!     spriteq_draw(screen, (int)value[0], (int)value[1], (int)value[2], (int)value[3], (int)value[4]);
! 
!     return S_OK;
! 
! drawsq_error:
!     printf("Function drawspriteq needs a valid screen handle and all other paramaters must be integers.");
!     return E_FAIL;
! 
! }
! 
! HRESULT openbor_clearspriteq(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     spriteq_clear();
!     return S_OK;
! 
! }
! 
! // ===== gfxproperty ======
! enum gfxproperty_enum
! {
!     _gfx_centerx,
!     _gfx_centery,
!     _gfx_height,
!     _gfx_palette,
!     _gfx_pixel,
!     _gfx_pixelformat,
!     _gfx_srcheight,
!     _gfx_srcwidth,
!     _gfx_width,
!     _gfx_the_end,
! };
! 
! int mapstrings_gfxproperty(ScriptVariant **varlist, int paramCount)
! {
!     char *propname = NULL;
!     int prop;
! 
!     static const char *proplist[] =
!     {
!         "centerx",
!         "centery",
!         "height",
!         "palette",
!         "pixel",
!         "pixelformat",
!         "srcheight",
!         "srcwidth",
!         "width",
!     };
! 
! 
!     if(paramCount < 2)
!     {
!         return 1;
!     }
!     MAPSTRINGS(varlist[1], proplist, _gfx_the_end,
!                "Property name '%s' is not supported by gfxproperty.\n");
! 
!     return 1;
! }
! 
! // getgfxproperty(handle, propertyname, ...);
! HRESULT openbor_getgfxproperty(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     s_screen *screen;
!     s_sprite *sprite;
!     s_bitmap *bitmap;
!     LONG value[2] = {0, 0}, v;
!     void *handle;
!     int i, x, y;
! 
!     if(paramCount < 2)
!     {
!         goto ggp_error;
!     }
! 
!     mapstrings_gfxproperty(varlist, paramCount);
! 
!     if(varlist[0]->vt != VT_PTR)
!     {
!         goto ggp_error;
!     }
! 
!     handle = varlist[0]->ptrVal;
! 
!     if(!handle)
!     {
!         goto ggp_error;
!     }
! 
!     screen = (s_screen *)handle;
!     sprite = (s_sprite *)handle;
!     bitmap = (s_bitmap *)handle;
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
! 
! 
!     switch(varlist[1]->lVal)
!     {
!     case _gfx_width:
!         switch(screen->magic)
!         {
!         case screen_magic:
!             (*pretvar)->lVal = screen->width;
!             break;
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->width;
!             break;
!         case bitmap_magic:
!             (*pretvar)->lVal = bitmap->width;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_height:
!         switch(screen->magic)
!         {
!         case screen_magic:
!             (*pretvar)->lVal = screen->height;
!             break;
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->height;
!             break;
!         case bitmap_magic:
!             (*pretvar)->lVal = bitmap->height;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_srcwidth:
!         switch(screen->magic)
!         {
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->srcwidth;
!             break;
!         case screen_magic:
!             (*pretvar)->lVal = screen->width;
!             break;
!         case bitmap_magic:
!             (*pretvar)->lVal = bitmap->width;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_srcheight:
!         switch(screen->magic)
!         {
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->srcheight;
!             break;
!         case screen_magic:
!             (*pretvar)->lVal = screen->height;
!             break;
!         case bitmap_magic:
!             (*pretvar)->lVal = bitmap->height;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_centerx:
!         switch(screen->magic)
!         {
!         case screen_magic:
!         case bitmap_magic:
!             (*pretvar)->lVal = 0;
!             break;
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->centerx;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_centery:
!         switch(screen->magic)
!         {
!         case screen_magic:
!         case bitmap_magic:
!             (*pretvar)->lVal = 0;
!             break;
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->centery;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_palette:
!         ScriptVariant_ChangeType(*pretvar, VT_PTR);
!         switch(screen->magic)
!         {
!         case screen_magic:
!             (*pretvar)->ptrVal = (VOID *)screen->palette;
!             break;
!         case sprite_magic:
!             (*pretvar)->ptrVal = (VOID *)sprite->palette;
!             break;
!         case bitmap_magic:
!             (*pretvar)->ptrVal = (VOID *)bitmap->palette;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_pixelformat:
!         switch(screen->magic)
!         {
!         case screen_magic:
!             (*pretvar)->lVal = screen->pixelformat;
!             break;
!         case sprite_magic:
!             (*pretvar)->lVal = sprite->pixelformat;
!             break;
!         case bitmap_magic:
!             (*pretvar)->lVal = bitmap->pixelformat;
!             break;
!         default:
!             goto ggp_error2;
!         }
!         break;
!     case _gfx_pixel:
!         if(paramCount < 4)
!         {
!             goto ggp_error3;
!         }
!         for(i = 2; i < 4; i++)
!         {
!             if(FAILED(ScriptVariant_IntegerValue(varlist[i], value + i - 2)))
!             {
!                 goto ggp_error4;
!             }
!         }
!         x = value[0];
!         y = value[1];
!         switch(screen->magic)
!         {
!         case bitmap_magic: //As long as the two structures are identical...
!         case screen_magic:
!             if(x < 0 || x >= screen->width || y < 0 || y >= screen->height)
!             {
!                 v = 0;
!             }
!             else
!             {
!                 switch(screen->pixelformat)
!                 {
!                 case PIXEL_8:
!                 case PIXEL_x8:
!                     v = (LONG)(((unsigned char *)screen->data)[y * screen->width + x]);
!                     break;
!                 case PIXEL_16:
!                     v = (LONG)(((unsigned short *)screen->data)[y * screen->width + x]);
!                     break;
!                 case PIXEL_32:
!                     v = (LONG)(((unsigned *)screen->data)[y * screen->width + x]);
!                     break;
!                 default:
!                     v = 0;
!                 }
!             }
!             break;
!         case sprite_magic:
!             if(x < 0 || x >= sprite->width || y < 0 || y >= sprite->height)
!             {
!                 v = 0;
!             }
!             else
!             {
!                 v = (LONG)sprite_get_pixel(sprite, x, y);
!             }
!             break;
!         default:
!             goto ggp_error2;
!         }
!         (*pretvar)->lVal = v;
!         break;
!     default:
!         break;
! 
!     }
! 
!     return S_OK;
! 
! ggp_error:
!     printf("Function getgfxproperty must have a valid handle and a property name.\n");
!     *pretvar = NULL;
!     return E_FAIL;
! ggp_error2:
!     printf("Function getgfxproperty encountered an invalid handle.\n");
!     *pretvar = NULL;
!     return E_FAIL;
! ggp_error3:
!     printf("You need to specify x, y value for getgfxproperty.\n");
!     *pretvar = NULL;
!     return E_FAIL;
! ggp_error4:
!     printf("Invalid x or y value for getgfxproperty.\n");
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //allocscript(name, comment);
! HRESULT openbor_allocscript(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Script *ns;
!     char *name = NULL, *comment = NULL;
! 
!     ns = malloc(sizeof(Script));
! 
!     if(ns == NULL)
!     {
!         goto as_error;
!     }
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_STR)
!     {
!         name = (char *)StrCache_Get(varlist[0]->strVal);
!     }
!     if(paramCount >= 2 && varlist[1]->vt == VT_STR)
!     {
!         comment = (char *)StrCache_Get(varlist[1]->strVal);
!     }
! 
!     Script_Init(ns, name, comment, 1);
! 
!     List_InsertAfter(&scriptheap, (void *)ns, "openbor_allocscript");
! 
!     ScriptVariant_ChangeType(*pretvar, VT_PTR);
!     (*pretvar)->ptrVal = (VOID *)ns;
!     return S_OK;
! 
! as_error:
!     printf("Function allocscript failed to alloc enough memory.\n");
!     (*pretvar) = NULL;
!     return E_FAIL;
! }
! 
! //loadscript(handle, path);
! HRESULT openbor_loadscript(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Script *ns = NULL;
!     char *path = NULL;
!     int load_script(Script * script, char * file);
! 
!     (*pretvar) = NULL;
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_PTR)
!     {
!         ns = (Script *)varlist[0]->ptrVal;
!     }
!     if(ns == NULL || ns->magic != script_magic)
!     {
!         goto ls_error;
!     }
!     if(paramCount >= 2 && varlist[1]->vt == VT_STR)
!     {
!         path = (char *)StrCache_Get(varlist[1]->strVal);
!     }
!     if(path == NULL)
!     {
!         goto ls_error;
!     }
! 
!     load_script(ns, path);
!     //Script_Init(ns, name, comment, 1);
!     //if(!load_script(ns, path)) goto ls_error2;
! 
!     return S_OK;
! 
! ls_error:
!     printf("Function loadscript requires a valid script handle and a path.\n");
!     return E_FAIL;
! }
! 
! //compilescript(handle);
! HRESULT openbor_compilescript(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Script *ns = NULL;
! 
!     (*pretvar) = NULL;
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_PTR)
!     {
!         ns = (Script *)varlist[0]->ptrVal;
!     }
!     if(ns == NULL || ns->magic != script_magic)
!     {
!         goto cs_error;
!     }
! 
!     Script_Compile(ns);
! 
!     return S_OK;
! 
! cs_error:
!     printf("Function compilescript requires a valid script handle.\n");
!     return E_FAIL;
! }
! 
! //executescript(handle);
! HRESULT openbor_executescript(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     Script *ns = NULL;
! 
!     (*pretvar) = NULL;
! 
!     if(paramCount >= 1 && varlist[0]->vt == VT_PTR)
!     {
!         ns = (Script *)varlist[0]->ptrVal;
!     }
!     if(ns == NULL || ns->magic != script_magic)
!     {
!         goto cs_error;
!     }
! 
!     Script_Execute(ns);
! 
!     return S_OK;
! 
! cs_error:
!     printf("Function executescript requires a valid script handle.\n");
!     return E_FAIL;
! }
! 
! 
! //loadgamefile() //only reload saved level file from saves
! HRESULT openbor_loadgamefile(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     loadGameFile();
!     *pretvar = NULL;
!     return S_OK;
! }
! 
! //finishlevel()
! HRESULT openbor_finishlevel(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     level->force_finishlevel = 1;
!     return S_OK;
! }
! 
! //gameover()
! HRESULT openbor_gameover(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     *pretvar = NULL;
!     level->force_gameover = 1;
!     return S_OK;
! }
! 
! //gotomainmenu(flag); flag: 1 = no gameover, 2 = no halloffame, 4 = no intro.txt; you can use a combination like 1+2 = 3 or all 1+2+4 = 7
! HRESULT openbor_gotomainmenu(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp = 0;
! 
!     *pretvar = NULL;
! 
!     if(paramCount >= 1 && FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)) )
!     {
!         return E_FAIL;
!     }
! 
!     goto_mainmenu((LONG)ltemp);
! 
!     return S_OK;
! }
! 
! //playgame(set, usesave?)
! HRESULT openbor_playgame(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG lset = 0, lsave = -1;
!     *pretvar = NULL;
! 
!     if(paramCount >= 1 && FAILED(ScriptVariant_IntegerValue(varlist[0], &lset)) )
!     {
!         goto pg_error;
!     }
!     if(paramCount >= 2 && FAILED(ScriptVariant_IntegerValue(varlist[1], &lsave)) )
!     {
!         goto pg_error;
!     }
! 
! 
!     useSave = lsave;
!     useSet = lset;
!     endgame = 1;
! 
!     return S_OK;
! 
! pg_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
! //getrecordingstatus() it returns 0 = stop, 1 = rec, 2 = play, 4 = free buffer
! HRESULT openbor_getrecordingstatus(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount) {
!     ScriptVariant_Clear(*pretvar);
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     (*pretvar)->lVal = (LONG)playrecstatus->status;
!     return S_OK;
! }
! 
! //recordinputs(value) -> 0 = stop, 1 = rec, 2 = play, 4 = free buffer
! HRESULT openbor_recordinputs(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     int ltemp;
! 
!     *pretvar = NULL;
!     if( paramCount < 1 && varlist[0]->vt != VT_INTEGER )
!     {
!         return E_FAIL;
!     }
! 
!     ltemp = (int)varlist[0]->lVal;
!     switch(ltemp)
!     {
!         case A_REC_STOP:
!             stopRecordInputs();
!             break;
!         case A_REC_REC:
!             if( paramCount < 3 || varlist[1]->vt != VT_STR || varlist[2]->vt != VT_STR )
!             {
!                 printf("Function recordinputs requires a pathname and filename parameters.\n");
!                 return E_FAIL;
!             }
!             strcpy(playrecstatus->path,(char*)StrCache_Get(varlist[1]->strVal));
!             strcpy(playrecstatus->filename,(char*)StrCache_Get(varlist[2]->strVal));
!             //debug_printf("%s/%s",(char*)StrCache_Get(varlist[1]->strVal),(char*)StrCache_Get(varlist[2]->strVal));
!             stopRecordInputs();
!             playrecstatus->status = A_REC_REC;
!             recordInputs();
!             break;
!         case A_REC_PLAY:
!             if( paramCount < 3 || varlist[1]->vt != VT_STR || varlist[2]->vt != VT_STR )
!             {
!                 printf("Function recordinputs requires a pathname and filename parameters.\n");
!                 return E_FAIL;
!             }
!             strcpy(playrecstatus->path,(char*)StrCache_Get(varlist[1]->strVal));
!             strcpy(playrecstatus->filename,(char*)StrCache_Get(varlist[2]->strVal));
!             stopRecordInputs();
!             playrecstatus->status = A_REC_PLAY;
!             playRecordedInputs();
!             break;
!         case A_REC_FREE:
!             freeRecordedInputs();
!             break;
!     }
! 
!     return S_OK;
! }
! 
! // getsaveinfo(set, prop);
! HRESULT openbor_getsaveinfo(ScriptVariant **varlist , ScriptVariant **pretvar, int paramCount)
! {
!     LONG ltemp;
!     s_savelevel *slot;
!     char *prop;
!     if(paramCount < 2)
!     {
!         goto gsi_error;
!     }
! 
!     if(FAILED(ScriptVariant_IntegerValue(varlist[0], &ltemp)) || varlist[1]->vt != VT_STR)
!     {
!         goto gsi_error;
!     }
! 
!     if(!savelevel)
!     {
!         ScriptVariant_Clear(*pretvar);
!         return S_OK;
!     }
! 
!     slot = savelevel + ltemp;
!     prop = (char *)StrCache_Get(varlist[1]->strVal);
! 
!     ScriptVariant_ChangeType(*pretvar, VT_INTEGER);
!     if(0 == stricmp(prop, "flag"))
!     {
!         (*pretvar)->lVal = (LONG)slot->flag;
!     }
!     else if(0 == stricmp(prop, "level"))
!     {
!         (*pretvar)->lVal = (LONG)slot->level;
!     }
!     else if(0 == stricmp(prop, "stage"))
!     {
!         (*pretvar)->lVal = (LONG)slot->stage;
!     }
!     else if(0 == stricmp(prop, "set"))
!     {
!         (*pretvar)->lVal = (LONG)slot->which_set;
!     }
!     else if(0 == stricmp(prop, "times_completed"))
!     {
!         (*pretvar)->lVal = (LONG)slot->times_completed;
!     }
!     else if(0 == stricmp(prop, "score"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         (*pretvar)->lVal = (LONG)slot->pScores[ltemp];
!     }
!     else if(0 == stricmp(prop, "lives"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         (*pretvar)->lVal = (LONG)slot->pLives[ltemp];
!     }
!     else if(0 == stricmp(prop, "credits"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         (*pretvar)->lVal = (LONG)(noshare ? slot->credits : slot->pCredits[ltemp]);
!     }
!     else if(0 == stricmp(prop, "name"))
!     {
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(slot->dName);
!     }
!     else if(0 == stricmp(prop, "playername"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         ScriptVariant_ChangeType(*pretvar, VT_STR);
!         (*pretvar)->strVal = StrCache_CreateNewFrom(slot->pName[ltemp]);
!     }
!     else if(0 == stricmp(prop, "health"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         (*pretvar)->lVal = (LONG)slot->pSpawnhealth[ltemp];
!     }
!     else if(0 == stricmp(prop, "mp"))
!     {
!         if(paramCount < 3 || FAILED(ScriptVariant_IntegerValue(varlist[2], &ltemp)) )
!         {
!             goto gsi_error;
!         }
!         (*pretvar)->lVal = (LONG)slot->pSpawnmp[ltemp];
!     }
!     else
!     {
!         goto gsi_error;
!     }
!     return S_OK;
! 
! gsi_error:
!     *pretvar = NULL;
!     return E_FAIL;
! }
! 
Only in engine mod: openborscriptCOPY.c
Only in engine/releases: _DUMMY
Only in engine mod/releases: COMPILING.txt
Only in engine mod/releases: LICENSE.txt
Only in engine mod/releases: PSP
Only in engine mod/releases: README.txt
Only in engine mod/releases: translation.txt
Only in engine mod/releases: WII
Only in engine mod/releases: WINDOWS
diff -crB engine/resources/Info.plist "engine mod/resources/Info.plist"
*** engine/resources/Info.plist	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/resources/Info.plist"	2019-10-17 20:52:11.195083700 +0200
***************
*** 27,33 ****
    <key>CFBundleExecutable</key>
    <string>OpenBOR</string>
    <key>CFBundleVersion</key>
!   <string></string>
    <key>CFBundleDevelopmentRegion</key>
    <string>English</string>
    <key>CFBundleInfoDictionaryVersion</key>
--- 27,33 ----
    <key>CFBundleExecutable</key>
    <string>OpenBOR</string>
    <key>CFBundleVersion</key>
!   <string>6330 LNS v0.9d</string>
    <key>CFBundleDevelopmentRegion</key>
    <string>English</string>
    <key>CFBundleInfoDictionaryVersion</key>
***************
*** 49,55 ****
          <string>spk</string>
        </array>
        <key>CFBundleTypeIconFile</key>
!       <string>OpenBOR.icns</string>
        <key>CFBundleTypeName</key>
        <string>PAK File</string>
        <key>CFBundleTypeOSTypes</key>
--- 49,55 ----
          <string>spk</string>
        </array>
        <key>CFBundleTypeIconFile</key>
!       <string>OpenBOR.ico</string>
        <key>CFBundleTypeName</key>
        <string>PAK File</string>
        <key>CFBundleTypeOSTypes</key>
***************
*** 62,68 ****
      </dict>
      <dict>
        <key>CFBundleTypeIconFile</key>
!       <string>OpenBOR.icns</string>
        <key>CFBundleTypeName</key>
        <string>SPK File</string>
        <key>CFBundleTypeRole</key>
--- 62,68 ----
      </dict>
      <dict>
        <key>CFBundleTypeIconFile</key>
!       <string>OpenBOR.ico</string>
        <key>CFBundleTypeName</key>
        <string>SPK File</string>
        <key>CFBundleTypeRole</key>
Only in engine mod/resources: meta.xml
Only in engine mod/resources: OpenBOR.ico
Binary files engine/resources/OpenBOR_Icon_32x32.ico and engine mod/resources/OpenBOR_Icon_32x32.ico differ
Only in engine mod/resources: OpenBOR_Icon_32x32.png
Only in engine mod/resources: OpenBOR_Icon_32x32ORIGINAL.ico
diff -crB engine/sdl/control.c "engine mod/sdl/control.c"
*** engine/sdl/control.c	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/sdl/control.c"	2019-10-17 04:27:23.857392400 +0200
***************
*** 43,49 ****
  */
  void getPads(Uint8* keystate, Uint8* keystate_def)
  {
! 	int i, j, x, axis;
  	SDL_Event ev;
  	while(SDL_PollEvent(&ev))
  	{
--- 43,50 ----
  */
  void getPads(Uint8* keystate, Uint8* keystate_def)
  {
! 	//int i, j, x, axis;
! 	int i, j, axis;
  	SDL_Event ev;
  	while(SDL_PollEvent(&ev))
  	{
***************
*** 172,197 ****
  
  			case SDL_JOYBUTTONDOWN:
  				// FIXME: restore GP2X controls
  				for(i=0; i<JOY_LIST_TOTAL; i++)
  				{
  					if(ev.jbutton.which == i)
  					{
  						lastjoy = 1 + i * JOY_MAX_INPUTS + ev.jbutton.button;
- 
  						// add key flag from event
! 						/*#ifdef ANDROID
! 						joysticks[i].Buttons |= 0x01 << ev.jbutton.button;
! 						#endif*/
  					}
  				}
  				break;
! 
  			case SDL_JOYHATMOTION:
  				for(i=0; i<JOY_LIST_TOTAL; i++)
  				{
  					if(ev.jhat.which == i)
  					{
  						int hatfirst = 1 + i * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2*joysticks[i].NumAxes + 4*ev.jhat.hat;
  						x = (joysticks[i].Hats >> (4*ev.jhat.hat)) & 0x0F; // hat's previous state
  						if(ev.jhat.value & SDL_HAT_UP       && !(x & SDL_HAT_UP))       lastjoy = hatfirst;
  						if(ev.jhat.value & SDL_HAT_RIGHT    && !(x & SDL_HAT_RIGHT))	lastjoy = hatfirst + 1;
--- 173,205 ----
  
  			case SDL_JOYBUTTONDOWN:
  				// FIXME: restore GP2X controls
+ 				
+ 				//lastjoy = 1 + ev.jbutton.which * JOY_MAX_INPUTS + ev.jbutton.button;
+ 				
+ 				/*
  				for(i=0; i<JOY_LIST_TOTAL; i++)
  				{
  					if(ev.jbutton.which == i)
  					{
+ 						
+ 						//lastjoy = 1 + (SDL_NumJoysticks()- 1 - i) * JOY_MAX_INPUTS + ev.jbutton.button;
  						lastjoy = 1 + i * JOY_MAX_INPUTS + ev.jbutton.button;
  						// add key flag from event
! 						//#ifdef ANDROID
! 						//joysticks[i].Buttons |= 0x01 << ev.jbutton.button;
! 						//#endif
  					}
  				}
  				break;
! 				*/
  			case SDL_JOYHATMOTION:
+ 				/*
  				for(i=0; i<JOY_LIST_TOTAL; i++)
  				{
  					if(ev.jhat.which == i)
  					{
  						int hatfirst = 1 + i * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2*joysticks[i].NumAxes + 4*ev.jhat.hat;
+ 						//int hatfirst = 1 + (SDL_NumJoysticks()- 1 - i) * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2*joysticks[i].NumAxes + 4*ev.jhat.hat;
  						x = (joysticks[i].Hats >> (4*ev.jhat.hat)) & 0x0F; // hat's previous state
  						if(ev.jhat.value & SDL_HAT_UP       && !(x & SDL_HAT_UP))       lastjoy = hatfirst;
  						if(ev.jhat.value & SDL_HAT_RIGHT    && !(x & SDL_HAT_RIGHT))	lastjoy = hatfirst + 1;
***************
*** 209,221 ****
  					}
  				}
  				break;
! 
  			case SDL_JOYAXISMOTION:
  				for(i=0; i<JOY_LIST_TOTAL; i++)
  				{
  					if(ev.jaxis.which == i)
  					{
  						int axisfirst = 1 + i * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2*ev.jaxis.axis;
  						x = (joysticks[i].Axes >> (2*ev.jaxis.axis)) & 0x03; // previous state of axis
  						if(ev.jaxis.value <  -1*T_AXIS && !(x & 0x01))		lastjoy = axisfirst;
  						if(ev.jaxis.value >     T_AXIS && !(x & 0x02))		lastjoy = axisfirst + 1;
--- 217,231 ----
  					}
  				}
  				break;
! 				*/
  			case SDL_JOYAXISMOTION:
+ 			/*
  				for(i=0; i<JOY_LIST_TOTAL; i++)
  				{
  					if(ev.jaxis.which == i)
  					{
  						int axisfirst = 1 + i * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2*ev.jaxis.axis;
+ 						//int axisfirst = 1 + (SDL_NumJoysticks()- 1 - i) * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2*ev.jaxis.axis;
  						x = (joysticks[i].Axes >> (2*ev.jaxis.axis)) & 0x03; // previous state of axis
  						if(ev.jaxis.value <  -1*T_AXIS && !(x & 0x01))		lastjoy = axisfirst;
  						if(ev.jaxis.value >     T_AXIS && !(x & 0x02))		lastjoy = axisfirst + 1;
***************
*** 229,248 ****
  					}
  				}
  				break;
! 
              // PLUG AND PLAY
              case SDL_JOYDEVICEADDED:
                  if (ev.jdevice.which < JOY_LIST_TOTAL)
                  {
!                     int i = ev.jdevice.which;
!                     char buffer[MAX_BUFFER_LEN];
!                     char joy_name[MAX_BUFFER_LEN];
!                     open_joystick(i);
                      //get_time_string(buffer, MAX_BUFFER_LEN, (time_t)ev.jdevice.timestamp, TIMESTAMP_PATTERN);
!                     get_now_string(buffer, MAX_BUFFER_LEN, TIMESTAMP_PATTERN);
!                     numjoy = SDL_NumJoysticks();
!                     strcpy(joy_name,get_joystick_name(joysticks[i].Name));
!                     printf("Joystick: \"%s\" connected at port: %d at %s\n",joy_name,i,buffer);
                  }
                  break;
  
--- 239,260 ----
  					}
  				}
  				break;
! 				*/
              // PLUG AND PLAY
              case SDL_JOYDEVICEADDED:
                  if (ev.jdevice.which < JOY_LIST_TOTAL)
                  {
!                     
! 					//int i = ev.jdevice.which;
!                     //char buffer[MAX_BUFFER_LEN];
!                     //char joy_name[MAX_BUFFER_LEN];
!                     //open_joystick(i);
                      //get_time_string(buffer, MAX_BUFFER_LEN, (time_t)ev.jdevice.timestamp, TIMESTAMP_PATTERN);
!                     //get_now_string(buffer, MAX_BUFFER_LEN, TIMESTAMP_PATTERN);
!                     //numjoy = SDL_NumJoysticks();
!                     //strcpy(joy_name,get_joystick_name(joysticks[i].Name));
!                     //printf("Joystick: \"%s\" connected at port: %d at %s\n",joy_name,i,buffer);
! 					
                  }
                  break;
  
***************
*** 255,261 ****
                          char buffer[MAX_BUFFER_LEN];
                          char joy_name[MAX_BUFFER_LEN];
                          get_now_string(buffer, MAX_BUFFER_LEN, TIMESTAMP_PATTERN);
!                         close_joystick(i);
                          numjoy = SDL_NumJoysticks();
                          strcpy(joy_name,get_joystick_name(joysticks[i].Name));
                          printf("Joystick: \"%s\" disconnected from port: %d at %s\n",joy_name,i,buffer);
--- 267,273 ----
                          char buffer[MAX_BUFFER_LEN];
                          char joy_name[MAX_BUFFER_LEN];
                          get_now_string(buffer, MAX_BUFFER_LEN, TIMESTAMP_PATTERN);
!                         //close_joystick(i);
                          numjoy = SDL_NumJoysticks();
                          strcpy(joy_name,get_joystick_name(joysticks[i].Name));
                          printf("Joystick: \"%s\" disconnected from port: %d at %s\n",joy_name,i,buffer);
***************
*** 271,308 ****
  
  	if(joysticks[0].Type != JOY_TYPE_GAMEPARK)
  	{
  		// new PC joystick code - forget about SDL joystick events, just do a state check
  		SDL_JoystickUpdate();
  		for(i = 0; i < JOY_LIST_TOTAL; i++)
  		{
  			// reset state
  			joysticks[i].Axes = joysticks[i].Hats = joysticks[i].Buttons = 0;
  			if (joystick[i] == NULL) continue;
  
  			// check buttons
  			for(j = 0; j < joysticks[i].NumButtons; j++)
!             {
!                 joysticks[i].Buttons |= SDL_JoystickGetButton(joystick[i], j) << j;
              }
  
  			// check axes
  			for(j = 0; j < joysticks[i].NumAxes; j++)
! 			{
  				axis = SDL_JoystickGetAxis(joystick[i], j);
! 				if(axis < -1*T_AXIS)  { joysticks[i].Axes |= 0x01 << (j*2); }
! 				if(axis >    T_AXIS)  { joysticks[i].Axes |= 0x02 << (j*2); }
  			}
  
  			// check hats
  			for(j = 0; j < joysticks[i].NumHats; j++)
              {
!                 //joysticks[i].Hats |= SDL_JoystickGetHat(joystick[i], j) << (j*4);
! 
                  Uint8 hat_value = SDL_JoystickGetHat(joystick[i], j);
                  if(hat_value & SDL_HAT_UP)      joysticks[i].Hats |= SDL_HAT_UP     << (j*4);
                  if(hat_value & SDL_HAT_RIGHT)   joysticks[i].Hats |= SDL_HAT_RIGHT  << (j*4);
                  if(hat_value & SDL_HAT_DOWN)    joysticks[i].Hats |= SDL_HAT_DOWN   << (j*4);
!                 if(hat_value & SDL_HAT_LEFT)    joysticks[i].Hats |= SDL_HAT_LEFT   << (j*4);
              }
  
  			// combine axis, hat, and button state into a single value
--- 283,344 ----
  
  	if(joysticks[0].Type != JOY_TYPE_GAMEPARK)
  	{
+ 		u32 oldButtons;
+ 		u32 oldAxes; //variable que almacena el antiguo valor del eje para determinar si hubo cambio
+ 		u32 oldHat; //variable que almacena el antiguo valor de la cruceta para determinar si hubo cambio
+ 		
  		// new PC joystick code - forget about SDL joystick events, just do a state check
  		SDL_JoystickUpdate();
  		for(i = 0; i < JOY_LIST_TOTAL; i++)
  		{
  			// reset state
+ 			oldButtons = joysticks[i].Buttons; //Memorizamos el valor anterior, antes de reiniciarlo
+ 			oldAxes = joysticks[i].Axes; //Memorizamos el valor anterior, antes de reiniciarlo
+ 			oldHat = joysticks[i].Hats; //Memorizamos el valor anterior, antes de reiniciarlo
  			joysticks[i].Axes = joysticks[i].Hats = joysticks[i].Buttons = 0;
  			if (joystick[i] == NULL) continue;
  
  			// check buttons
  			for(j = 0; j < joysticks[i].NumButtons; j++)
!             {				
!                 joysticks[i].Buttons |= SDL_JoystickGetButton(joystick[i], j) << j;
! 				
! 				//Nuevo sistema de detecci√≥n de joystick durante la configuraciones de mandos del Openbor
! 				if (SDL_JoystickGetButton(joystick[i], j) == 1 && (oldButtons & (0x01 << j)) == 0) { lastjoy = 1 + i * JOY_MAX_INPUTS + j; } //Si se ha presionado un bot√≥n, procedemos a cargarlo como la √∫ltima interacci√≥n de un gamepad
              }
  
  			// check axes
  			for(j = 0; j < joysticks[i].NumAxes; j++)
! 			{				
  				axis = SDL_JoystickGetAxis(joystick[i], j);
! 				if(axis < -1*T_AXIS)  { joysticks[i].Axes |= 0x01 << (j*2);}
! 				if(axis >    T_AXIS)  { joysticks[i].Axes |= 0x02 << (j*2);}
! 				
! 				//Nuevo sistema de detecci√≥n de joystick durante la configuraciones de mandos del Openbor
! 				int axisfirst = 1 + i * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2 * j; //Optenemos el n√∫mero de eje en el indice de Openbor
! 				int axisNeg = oldAxes & (0x01 << (j*2));
! 				int axisPos = oldAxes & (0x02 << (j*2));
! 				if(axis < -1*T_AXIS && axisNeg == 0)  { lastjoy = axisfirst; }
! 				if(axis >    T_AXIS && axisPos == 0)  { lastjoy = axisfirst + 1; }
  			}
  
  			// check hats
  			for(j = 0; j < joysticks[i].NumHats; j++)
              {
!                 //joysticks[i].Hats |= SDL_JoystickGetHat(joystick[i], j) << (j*4);				
                  Uint8 hat_value = SDL_JoystickGetHat(joystick[i], j);
                  if(hat_value & SDL_HAT_UP)      joysticks[i].Hats |= SDL_HAT_UP     << (j*4);
                  if(hat_value & SDL_HAT_RIGHT)   joysticks[i].Hats |= SDL_HAT_RIGHT  << (j*4);
                  if(hat_value & SDL_HAT_DOWN)    joysticks[i].Hats |= SDL_HAT_DOWN   << (j*4);
!                 if(hat_value & SDL_HAT_LEFT)    joysticks[i].Hats |= SDL_HAT_LEFT   << (j*4);
! 				
! 				//Nuevo sistema de detecci√≥n de joystick durante la configuraciones de mandos del Openbor
! 				
! 				if((hat_value & SDL_HAT_UP) && (oldHat & SDL_HAT_UP) == 0) {lastjoy = 1 + i * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2 * joysticks[i].NumAxes + 0; }
! 				if((hat_value & SDL_HAT_RIGHT) && (oldHat & SDL_HAT_RIGHT) == 0) {lastjoy = 1 + i * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2 * joysticks[i].NumAxes + 1; }
! 				if((hat_value & SDL_HAT_DOWN) && (oldHat & SDL_HAT_DOWN) == 0) {lastjoy = 1 + i * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2 * joysticks[i].NumAxes + 2; }
! 				if((hat_value & SDL_HAT_LEFT) && (oldHat & SDL_HAT_LEFT) == 0) {lastjoy = 1 + i * JOY_MAX_INPUTS + joysticks[i].NumButtons + 2 * joysticks[i].NumAxes + 3; }
! 				
              }
  
  			// combine axis, hat, and button state into a single value
***************
*** 375,388 ****
              // print JOY_MAX_INPUTS (32) spaces for alignment
              if(numjoy == 1)
              {
!                 printf("%s - %d axes, %d buttons, %d hat(s)\n",
!                                     get_joystick_name(joysticks[i].Name), joysticks[i].NumAxes, joysticks[i].NumButtons, joysticks[i].NumHats);
!             }
              else if(numjoy > 1)
              {
                  if(i) printf("\n");
!                 printf("%d. %s - %d axes, %d buttons, %d hat(s)\n", i + 1,
!                         get_joystick_name(joysticks[i].Name), joysticks[i].NumAxes, joysticks[i].NumButtons, joysticks[i].NumHats);
              }
          }
  	}
--- 411,426 ----
              // print JOY_MAX_INPUTS (32) spaces for alignment
              if(numjoy == 1)
              {
!                 //printf("%s - %d axes, %d buttons, %d hat(s)\n",
!                 //                    get_joystick_name(joysticks[i].Name), joysticks[i].NumAxes, joysticks[i].NumButtons, joysticks[i].NumHats);
! 				printf("%s - %d axes, %d buttons, %d hat(s)\n", joysticks[i].Name, joysticks[i].NumAxes, joysticks[i].NumButtons, joysticks[i].NumHats);
! 			}
              else if(numjoy > 1)
              {
                  if(i) printf("\n");
!                 //printf("%d. %s - %d axes, %d buttons, %d hat(s)\n", i + 1,
!                 //        get_joystick_name(joysticks[i].Name), joysticks[i].NumAxes, joysticks[i].NumButtons, joysticks[i].NumHats);
! 				printf("%d. %s - %d axes, %d buttons, %d hat(s)\n", i + 1,joysticks[i].Name, joysticks[i].NumAxes, joysticks[i].NumButtons, joysticks[i].NumHats);
              }
          }
  	}
***************
*** 404,410 ****
      joysticks[i].NumAxes = SDL_JoystickNumAxes(joystick[i]);
      joysticks[i].NumButtons = SDL_JoystickNumButtons(joystick[i]);
  
!     strcpy(joysticks[i].Name, SDL_JoystickName(i));
  
      joystick_haptic[i] = SDL_HapticOpenFromJoystick(joystick[i]);
      if (joystick_haptic[i] != NULL)
--- 442,450 ----
      joysticks[i].NumAxes = SDL_JoystickNumAxes(joystick[i]);
      joysticks[i].NumButtons = SDL_JoystickNumButtons(joystick[i]);
  
!     //strcpy(joysticks[i].Name, SDL_JoystickName(i));
! 	strcpy(joysticks[i].Name, SDL_JoystickNameForIndex(i));
! 	//printf("%d - %s\n",i, SDL_JoystickNameForIndex(i));
  
      joystick_haptic[i] = SDL_HapticOpenFromJoystick(joystick[i]);
      if (joystick_haptic[i] != NULL)
***************
*** 832,840 ****
  
  int keyboard_getlastkey()
  {
! 		int i, ret = lastkey;
  		lastkey = 0;
! 		for(i = 0; i < JOY_LIST_TOTAL; i++) joysticks[i].Buttons = 0;
  		return ret;
  }
  
--- 872,881 ----
  
  int keyboard_getlastkey()
  {
! 		//int i, ret = lastkey;
! 		int ret = lastkey;
  		lastkey = 0;
! 		//for(i = 0; i < JOY_LIST_TOTAL; i++) joysticks[i].Buttons = 0;
  		return ret;
  }
  
***************
*** 899,905 ****
  
          //White Dragon: Set input from default keys overriding previous keys
          //Default keys are available just if no configured keys are pressed!
!         if (player <= 0 && !k)
          {
              for(i = 0; i < JOY_MAX_INPUTS; i++)
              {
--- 940,946 ----
  
          //White Dragon: Set input from default keys overriding previous keys
          //Default keys are available just if no configured keys are pressed!
!         if (player == 0 && !k)
          {
              for(i = 0; i < JOY_MAX_INPUTS; i++)
              {
Only in engine mod/sdl: controlOLD.c
diff -crB engine/sdl/opengl.c "engine mod/sdl/opengl.c"
*** engine/sdl/opengl.c	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/sdl/opengl.c"	2019-08-30 03:45:57.000000000 +0200
***************
*** 254,260 ****
  	}
  
  	// try to disable vertical retrace syncing (VSync)
! 	if(SDL_GL_SetSwapInterval(0) < 0)
  	{
  		printf("Warning: can't disable vertical retrace sync (%s)...\n", SDL_GetError());
  	}
--- 254,260 ----
  	}
  
  	// try to disable vertical retrace syncing (VSync)
! 	if(SDL_GL_SetSwapInterval(!!savedata.vsync) < 0)
  	{
  		printf("Warning: can't disable vertical retrace sync (%s)...\n", SDL_GetError());
  	}
diff -crB engine/sdl/video.c "engine mod/sdl/video.c"
*** engine/sdl/video.c	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/sdl/video.c"	2019-08-30 03:45:57.000000000 +0200
***************
*** 143,149 ****
  
  	if(!gl)
  	{
! 		renderer = SDL_CreateRenderer(window, -1, 0);
  		if(!renderer)
  		{
  			printf("Error: failed to create renderer: %s\n", SDL_GetError());
--- 143,149 ----
  
  	if(!gl)
  	{
! 		renderer = SDL_CreateRenderer(window, -1, savedata.vsync ? SDL_RENDERER_PRESENTVSYNC : 0);
  		if(!renderer)
  		{
  			printf("Error: failed to create renderer: %s\n", SDL_GetError());
diff -crB engine/source/openborscript/commands.c "engine mod/source/openborscript/commands.c"
*** engine/source/openborscript/commands.c	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/source/openborscript/commands.c"	2019-10-17 20:19:28.431753200 +0200
***************
*** 417,422 ****
--- 417,423 ----
      LIST_ADD(CMD_MODEL_SCROLL, "scroll");
      LIST_ADD(CMD_MODEL_SEAL, "seal");
      LIST_ADD(CMD_MODEL_SECRET, "secret");
+ 	LIST_ADD(CMD_MODEL_SELECTCOL, "selectcol");
      LIST_ADD(CMD_MODEL_SETA, "seta");
      LIST_ADD(CMD_MODEL_SETLAYER, "setlayer");
      LIST_ADD(CMD_MODEL_SHADOW, "shadow");
diff -crB engine/source/openborscript/commands.h "engine mod/source/openborscript/commands.h"
*** engine/source/openborscript/commands.h	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/source/openborscript/commands.h"	2019-10-17 20:18:37.375408400 +0200
***************
*** 538,543 ****
--- 538,544 ----
      CMD_MODEL_SCROLL,
      CMD_MODEL_SEAL,
      CMD_MODEL_SECRET,
+ 	CMD_MODEL_SELECTCOL,
      CMD_MODEL_SETA,
      CMD_MODEL_SETLAYER,
      CMD_MODEL_SHADOW,
diff -crB engine/source/savedata.h "engine mod/source/savedata.h"
*** engine/source/savedata.h	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/source/savedata.h"	2019-10-10 03:50:39.306484100 +0200
***************
*** 56,61 ****
--- 56,62 ----
  #if ANDROID
      int is_touchpad_vibration_enabled;
  #endif
+ 	int vsync; // Sync to monitor refresh (1) or don't (0)
  } s_savedata;
  
  extern s_savedata     savedata;
diff -crB engine/version.h "engine mod/version.h"
*** engine/version.h	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/version.h"	2019-11-24 19:09:46.175951700 +0100
***************
*** 12,18 ****
  #define VERSION_NAME "OpenBOR"
  #define VERSION_MAJOR "3"
  #define VERSION_MINOR "0"
! #define VERSION_BUILD ""
  #define VERSION "v"VERSION_MAJOR"."VERSION_MINOR" Build "VERSION_BUILD
  
  #endif
--- 12,18 ----
  #define VERSION_NAME "OpenBOR"
  #define VERSION_MAJOR "3"
  #define VERSION_MINOR "0"
! #define VERSION_BUILD "6330 LNS v0.10d"
  #define VERSION "v"VERSION_MAJOR"."VERSION_MINOR" Build "VERSION_BUILD
  
  #endif
diff -crB engine/version.sh "engine mod/version.sh"
*** engine/version.sh	2018-07-19 19:34:25.000000000 +0200
--- "engine mod/version.sh"	2019-11-24 19:09:20.846905200 +0100
***************
*** 52,57 ****
--- 52,58 ----
  VERSION_NAME="OpenBOR"
  VERSION_MAJOR=3
  VERSION_MINOR=0
+ VERSION_BUILD="6330 LNS v0.10d"
  VERSION_DATE=`date '+%Y%m%d%H%M%S'`
  export VERSION="v$VERSION_MAJOR.$VERSION_MINOR Build $VERSION_BUILD"
  }
***************
*** 140,146 ****
          <string>spk</string>
        </array>
        <key>CFBundleTypeIconFile</key>
!       <string>OpenBOR.icns</string>
        <key>CFBundleTypeName</key>
        <string>PAK File</string>
        <key>CFBundleTypeOSTypes</key>
--- 141,147 ----
          <string>spk</string>
        </array>
        <key>CFBundleTypeIconFile</key>
!       <string>OpenBOR.ico</string>
        <key>CFBundleTypeName</key>
        <string>PAK File</string>
        <key>CFBundleTypeOSTypes</key>
***************
*** 153,159 ****
      </dict>
      <dict>
        <key>CFBundleTypeIconFile</key>
!       <string>OpenBOR.icns</string>
        <key>CFBundleTypeName</key>
        <string>SPK File</string>
        <key>CFBundleTypeRole</key>
--- 154,160 ----
      </dict>
      <dict>
        <key>CFBundleTypeIconFile</key>
!       <string>OpenBOR.ico</string>
        <key>CFBundleTypeName</key>
        <string>SPK File</string>
        <key>CFBundleTypeRole</key>
